# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.


"""
(No short description)

Attributes:
    LLVMTargetMachineRef:
        alias of `~.LLVMOpaqueTargetMachine`

    LLVMTargetRef:
        alias of `~.LLVMTarget`

"""

import cython
import ctypes
import enum

from rocm.llvm.c.target import LLVMByteOrdering
from rocm.llvm.c.target import LLVMTargetDataRef
from rocm.llvm.c.target import LLVMTargetLibraryInfoRef
from rocm.llvm.c.target import LLVMInitializeAllTargetInfos
from rocm.llvm.c.target import LLVMInitializeAllTargets
from rocm.llvm.c.target import LLVMInitializeAllTargetMCs
from rocm.llvm.c.target import LLVMInitializeAllAsmPrinters
from rocm.llvm.c.target import LLVMInitializeAllAsmParsers
from rocm.llvm.c.target import LLVMInitializeAllDisassemblers
from rocm.llvm.c.target import LLVMInitializeNativeTarget
from rocm.llvm.c.target import LLVMInitializeNativeAsmParser
from rocm.llvm.c.target import LLVMInitializeNativeAsmPrinter
from rocm.llvm.c.target import LLVMInitializeNativeDisassembler
from rocm.llvm.c.target import LLVMGetModuleDataLayout
from rocm.llvm.c.target import LLVMSetModuleDataLayout
from rocm.llvm.c.target import LLVMCreateTargetData
from rocm.llvm.c.target import LLVMDisposeTargetData
from rocm.llvm.c.target import LLVMAddTargetLibraryInfo
from rocm.llvm.c.target import LLVMCopyStringRepOfTargetData
from rocm.llvm.c.target import LLVMByteOrder
from rocm.llvm.c.target import LLVMPointerSize
from rocm.llvm.c.target import LLVMPointerSizeForAS
from rocm.llvm.c.target import LLVMIntPtrType
from rocm.llvm.c.target import LLVMIntPtrTypeForAS
from rocm.llvm.c.target import LLVMIntPtrTypeInContext
from rocm.llvm.c.target import LLVMIntPtrTypeForASInContext
from rocm.llvm.c.target import LLVMSizeOfTypeInBits
from rocm.llvm.c.target import LLVMStoreSizeOfType
from rocm.llvm.c.target import LLVMABISizeOfType
from rocm.llvm.c.target import LLVMABIAlignmentOfType
from rocm.llvm.c.target import LLVMCallFrameAlignmentOfType
from rocm.llvm.c.target import LLVMPreferredAlignmentOfType
from rocm.llvm.c.target import LLVMPreferredAlignmentOfGlobal
from rocm.llvm.c.target import LLVMElementAtOffset
from rocm.llvm.c.target import LLVMOffsetOfElement


from rocm.llvm.c.types import LLVMBool
from rocm.llvm.c.types import LLVMMemoryBufferRef
from rocm.llvm.c.types import LLVMContextRef
from rocm.llvm.c.types import LLVMModuleRef
from rocm.llvm.c.types import LLVMTypeRef
from rocm.llvm.c.types import LLVMValueRef
from rocm.llvm.c.types import LLVMBasicBlockRef
from rocm.llvm.c.types import LLVMMetadataRef
from rocm.llvm.c.types import LLVMNamedMDNodeRef
from rocm.llvm.c.types import LLVMValueMetadataEntry
from rocm.llvm.c.types import LLVMBuilderRef
from rocm.llvm.c.types import LLVMDIBuilderRef
from rocm.llvm.c.types import LLVMModuleProviderRef
from rocm.llvm.c.types import LLVMPassManagerRef
from rocm.llvm.c.types import LLVMPassRegistryRef
from rocm.llvm.c.types import LLVMUseRef
from rocm.llvm.c.types import LLVMAttributeRef
from rocm.llvm.c.types import LLVMDiagnosticInfoRef
from rocm.llvm.c.types import LLVMComdatRef
from rocm.llvm.c.types import LLVMModuleFlagEntry
from rocm.llvm.c.types import LLVMJITEventListenerRef
from rocm.llvm.c.types import LLVMBinaryRef

cdef class LLVMOpaqueTargetMachine:
    """Python wrapper for C type ctargetmachine.LLVMOpaqueTargetMachine.
    
    Python wrapper for C type ctargetmachine.LLVMOpaqueTargetMachine.

    If this type is initialized via its `__init__` method, it allocates a member of the underlying C type and
    destroys it again if the wrapper type is deallocted.

    This type also serves as adapter when appearing as argument type in a function signature.
    In this case, the type can further be initialized from the following Python objects
    that you can pass as argument instead:
    
    * `None`:

      This will set the ``self._ptr`` attribute to ``NULL``.

    * `int`:
      
      Interprets the integer value as pointer address and writes it to ``self._ptr``.
      
    * `ctypes.c_void_p`:
      
      Takes the pointer address ``pyobj.value`` and writes it to ``self._ptr``.

    * `object` that implements the `CUDA Array Interface <https://numba.readthedocs.io/en/stable/cuda/cuda_array_interface.html>`_ protocol:
      
      Takes the integer-valued pointer address, i.e. the first entry of the `data` tuple 
      from `pyobj`'s member ``__cuda_array_interface__``  and writes it to ``self._ptr``.

    * `object` that implements the Python buffer protocol:
      
      If the object represents a simple contiguous array,
      writes the `Py_buffer` associated with ``pyobj`` to `self._py_buffer`,
      sets the `self._py_buffer_acquired` flag to `True`, and
      writes `self._py_buffer.buf` to the data pointer `self._ptr`.
    
    Type checks are performed in the above order.

    C Attributes:
        _ptr (C type ``void *``, protected):
            Stores a pointer to the data of the original Python object.
        _ptr_owner (C type ``bint``, protected):
            If this wrapper is the owner of the underlying data.
        _py_buffer (C type ``Py_buffer`, protected):
            Stores a pointer to the data of the original Python object.
        _py_buffer_acquired (C type ``bint``, protected):
            Stores a pointer to the data of the original Python object.
    """
    # members declared in pxd file

    def __cinit__(self):
        self._ptr = NULL
        self.ptr_owner = False
        self._py_buffer_acquired = False

    @staticmethod
    cdef LLVMOpaqueTargetMachine from_ptr(ctargetmachine.LLVMOpaqueTargetMachine* ptr, bint owner=False):
        """Factory function to create ``LLVMOpaqueTargetMachine`` objects from
        given ``ctargetmachine.LLVMOpaqueTargetMachine`` pointer.
        """
        # Fast call to __new__() that bypasses the __init__() constructor.
        cdef LLVMOpaqueTargetMachine wrapper = LLVMOpaqueTargetMachine.__new__(LLVMOpaqueTargetMachine)
        wrapper._ptr = ptr
        wrapper.ptr_owner = owner
        return wrapper

    @staticmethod
    cdef LLVMOpaqueTargetMachine from_pyobj(object pyobj):
        """Derives a LLVMOpaqueTargetMachine from a Python object.

        Derives a LLVMOpaqueTargetMachine from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMOpaqueTargetMachine`` reference, this method
        returns it directly. No new ``LLVMOpaqueTargetMachine`` is created in this case.

        Args:
            pyobj (object): Must be either `None`, a simple, contiguous buffer according to the buffer protocol,
                            or of type `LLVMOpaqueTargetMachine`, `int`, or `ctypes.c_void_p`

        Note:
            This routine does not perform a copy but returns the original ``pyobj``
            if ``pyobj`` is an instance of LLVMOpaqueTargetMachine!
        """
        cdef LLVMOpaqueTargetMachine wrapper = LLVMOpaqueTargetMachine.__new__(LLVMOpaqueTargetMachine)
        cdef dict cuda_array_interface = getattr(pyobj, "__cuda_array_interface__", None)

        if pyobj is None:
            wrapper._ptr = NULL
        elif isinstance(pyobj,LLVMOpaqueTargetMachine):
            return pyobj
        elif isinstance(pyobj,int):
            wrapper._ptr = <ctargetmachine.LLVMOpaqueTargetMachine*>cpython.long.PyLong_AsVoidPtr(pyobj)
        elif isinstance(pyobj,ctypes.c_void_p):
            wrapper._ptr = <ctargetmachine.LLVMOpaqueTargetMachine*>cpython.long.PyLong_AsVoidPtr(pyobj.value) if pyobj.value != None else NULL
        elif cuda_array_interface != None:
            if not "data" in cuda_array_interface:
                raise ValueError("input object has '__cuda_array_interface__' attribute but the dict has no 'data' key")
            ptr_as_int = cuda_array_interface["data"][0]
            wrapper._ptr = <ctargetmachine.LLVMOpaqueTargetMachine*>cpython.long.PyLong_AsVoidPtr(ptr_as_int)
        elif cpython.buffer.PyObject_CheckBuffer(pyobj):
            err = cpython.buffer.PyObject_GetBuffer( 
                pyobj,
                &wrapper._py_buffer, 
                cpython.buffer.PyBUF_SIMPLE | cpython.buffer.PyBUF_ANY_CONTIGUOUS
            )
            if err == -1:
                raise RuntimeError("failed to create simple, contiguous Py_buffer from Python object")
            wrapper._py_buffer_acquired = True
            wrapper._ptr = <ctargetmachine.LLVMOpaqueTargetMachine*>wrapper._py_buffer.buf
        else:
            raise TypeError(f"unsupported input type: '{str(type(pyobj))}'")
        return wrapper
    def __dealloc__(self):
        # Release the buffer handle
        if self._py_buffer_acquired is True:
            cpython.buffer.PyBuffer_Release(&self._py_buffer)
    
    def __int__(self):
        """Returns the data's address as long integer.
        """
        return cpython.long.PyLong_FromVoidPtr(self._ptr)
    def __repr__(self):
        return f"<LLVMOpaqueTargetMachine object, self.ptr={int(self)}>"
    def as_c_void_p(self):
        """Returns the data's address as `ctypes.c_void_p`
        Note:
            Implements as function to not collide with 
            autogenerated property names.
        """
        return ctypes.c_void_p(int(self))
    @staticmethod
    def PROPERTIES():
        return []

    def __contains__(self,item):
        properties = self.PROPERTIES()
        return item in properties

    def __getitem__(self,item):
        properties = self.PROPERTIES()
        if isinstance(item,int):
            if item < 0 or item >= len(properties):
                raise IndexError()
            return getattr(self,properties[item])
        raise ValueError("'item' type must be 'int'")


LLVMTargetMachineRef = LLVMOpaqueTargetMachine

cdef class LLVMTarget:
    """Python wrapper for C type ctargetmachine.LLVMTarget.
    
    Python wrapper for C type ctargetmachine.LLVMTarget.

    If this type is initialized via its `__init__` method, it allocates a member of the underlying C type and
    destroys it again if the wrapper type is deallocted.

    This type also serves as adapter when appearing as argument type in a function signature.
    In this case, the type can further be initialized from the following Python objects
    that you can pass as argument instead:
    
    * `None`:

      This will set the ``self._ptr`` attribute to ``NULL``.

    * `int`:
      
      Interprets the integer value as pointer address and writes it to ``self._ptr``.
      
    * `ctypes.c_void_p`:
      
      Takes the pointer address ``pyobj.value`` and writes it to ``self._ptr``.

    * `object` that implements the `CUDA Array Interface <https://numba.readthedocs.io/en/stable/cuda/cuda_array_interface.html>`_ protocol:
      
      Takes the integer-valued pointer address, i.e. the first entry of the `data` tuple 
      from `pyobj`'s member ``__cuda_array_interface__``  and writes it to ``self._ptr``.

    * `object` that implements the Python buffer protocol:
      
      If the object represents a simple contiguous array,
      writes the `Py_buffer` associated with ``pyobj`` to `self._py_buffer`,
      sets the `self._py_buffer_acquired` flag to `True`, and
      writes `self._py_buffer.buf` to the data pointer `self._ptr`.
    
    Type checks are performed in the above order.

    C Attributes:
        _ptr (C type ``void *``, protected):
            Stores a pointer to the data of the original Python object.
        _ptr_owner (C type ``bint``, protected):
            If this wrapper is the owner of the underlying data.
        _py_buffer (C type ``Py_buffer`, protected):
            Stores a pointer to the data of the original Python object.
        _py_buffer_acquired (C type ``bint``, protected):
            Stores a pointer to the data of the original Python object.
    """
    # members declared in pxd file

    def __cinit__(self):
        self._ptr = NULL
        self.ptr_owner = False
        self._py_buffer_acquired = False

    @staticmethod
    cdef LLVMTarget from_ptr(ctargetmachine.LLVMTarget* ptr, bint owner=False):
        """Factory function to create ``LLVMTarget`` objects from
        given ``ctargetmachine.LLVMTarget`` pointer.
        """
        # Fast call to __new__() that bypasses the __init__() constructor.
        cdef LLVMTarget wrapper = LLVMTarget.__new__(LLVMTarget)
        wrapper._ptr = ptr
        wrapper.ptr_owner = owner
        return wrapper

    @staticmethod
    cdef LLVMTarget from_pyobj(object pyobj):
        """Derives a LLVMTarget from a Python object.

        Derives a LLVMTarget from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMTarget`` reference, this method
        returns it directly. No new ``LLVMTarget`` is created in this case.

        Args:
            pyobj (object): Must be either `None`, a simple, contiguous buffer according to the buffer protocol,
                            or of type `LLVMTarget`, `int`, or `ctypes.c_void_p`

        Note:
            This routine does not perform a copy but returns the original ``pyobj``
            if ``pyobj`` is an instance of LLVMTarget!
        """
        cdef LLVMTarget wrapper = LLVMTarget.__new__(LLVMTarget)
        cdef dict cuda_array_interface = getattr(pyobj, "__cuda_array_interface__", None)

        if pyobj is None:
            wrapper._ptr = NULL
        elif isinstance(pyobj,LLVMTarget):
            return pyobj
        elif isinstance(pyobj,int):
            wrapper._ptr = <ctargetmachine.LLVMTarget*>cpython.long.PyLong_AsVoidPtr(pyobj)
        elif isinstance(pyobj,ctypes.c_void_p):
            wrapper._ptr = <ctargetmachine.LLVMTarget*>cpython.long.PyLong_AsVoidPtr(pyobj.value) if pyobj.value != None else NULL
        elif cuda_array_interface != None:
            if not "data" in cuda_array_interface:
                raise ValueError("input object has '__cuda_array_interface__' attribute but the dict has no 'data' key")
            ptr_as_int = cuda_array_interface["data"][0]
            wrapper._ptr = <ctargetmachine.LLVMTarget*>cpython.long.PyLong_AsVoidPtr(ptr_as_int)
        elif cpython.buffer.PyObject_CheckBuffer(pyobj):
            err = cpython.buffer.PyObject_GetBuffer( 
                pyobj,
                &wrapper._py_buffer, 
                cpython.buffer.PyBUF_SIMPLE | cpython.buffer.PyBUF_ANY_CONTIGUOUS
            )
            if err == -1:
                raise RuntimeError("failed to create simple, contiguous Py_buffer from Python object")
            wrapper._py_buffer_acquired = True
            wrapper._ptr = <ctargetmachine.LLVMTarget*>wrapper._py_buffer.buf
        else:
            raise TypeError(f"unsupported input type: '{str(type(pyobj))}'")
        return wrapper
    def __dealloc__(self):
        # Release the buffer handle
        if self._py_buffer_acquired is True:
            cpython.buffer.PyBuffer_Release(&self._py_buffer)
    
    def __int__(self):
        """Returns the data's address as long integer.
        """
        return cpython.long.PyLong_FromVoidPtr(self._ptr)
    def __repr__(self):
        return f"<LLVMTarget object, self.ptr={int(self)}>"
    def as_c_void_p(self):
        """Returns the data's address as `ctypes.c_void_p`
        Note:
            Implements as function to not collide with 
            autogenerated property names.
        """
        return ctypes.c_void_p(int(self))
    @staticmethod
    def PROPERTIES():
        return []

    def __contains__(self,item):
        properties = self.PROPERTIES()
        return item in properties

    def __getitem__(self,item):
        properties = self.PROPERTIES()
        if isinstance(item,int):
            if item < 0 or item >= len(properties):
                raise IndexError()
            return getattr(self,properties[item])
        raise ValueError("'item' type must be 'int'")


LLVMTargetRef = LLVMTarget

class _LLVMCodeGenOptLevel__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMCodeGenOptLevel(_LLVMCodeGenOptLevel__Base):
    """LLVMCodeGenOptLevel

    Attributes:
        LLVMCodeGenLevelNone:
            (undocumented)
        LLVMCodeGenLevelLess:
            (undocumented)
        LLVMCodeGenLevelDefault:
            (undocumented)
        LLVMCodeGenLevelAggressive:
            (undocumented)
    """
    LLVMCodeGenLevelNone = ctargetmachine.LLVMCodeGenLevelNone
    LLVMCodeGenLevelLess = ctargetmachine.LLVMCodeGenLevelLess
    LLVMCodeGenLevelDefault = ctargetmachine.LLVMCodeGenLevelDefault
    LLVMCodeGenLevelAggressive = ctargetmachine.LLVMCodeGenLevelAggressive
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMRelocMode__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMRelocMode(_LLVMRelocMode__Base):
    """LLVMRelocMode

    Attributes:
        LLVMRelocDefault:
            (undocumented)
        LLVMRelocStatic:
            (undocumented)
        LLVMRelocPIC:
            (undocumented)
        LLVMRelocDynamicNoPic:
            (undocumented)
        LLVMRelocROPI:
            (undocumented)
        LLVMRelocRWPI:
            (undocumented)
        LLVMRelocROPI_RWPI:
            (undocumented)
    """
    LLVMRelocDefault = ctargetmachine.LLVMRelocDefault
    LLVMRelocStatic = ctargetmachine.LLVMRelocStatic
    LLVMRelocPIC = ctargetmachine.LLVMRelocPIC
    LLVMRelocDynamicNoPic = ctargetmachine.LLVMRelocDynamicNoPic
    LLVMRelocROPI = ctargetmachine.LLVMRelocROPI
    LLVMRelocRWPI = ctargetmachine.LLVMRelocRWPI
    LLVMRelocROPI_RWPI = ctargetmachine.LLVMRelocROPI_RWPI
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMCodeModel__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMCodeModel(_LLVMCodeModel__Base):
    """LLVMCodeModel

    Attributes:
        LLVMCodeModelDefault:
            (undocumented)
        LLVMCodeModelJITDefault:
            (undocumented)
        LLVMCodeModelTiny:
            (undocumented)
        LLVMCodeModelSmall:
            (undocumented)
        LLVMCodeModelKernel:
            (undocumented)
        LLVMCodeModelMedium:
            (undocumented)
        LLVMCodeModelLarge:
            (undocumented)
    """
    LLVMCodeModelDefault = ctargetmachine.LLVMCodeModelDefault
    LLVMCodeModelJITDefault = ctargetmachine.LLVMCodeModelJITDefault
    LLVMCodeModelTiny = ctargetmachine.LLVMCodeModelTiny
    LLVMCodeModelSmall = ctargetmachine.LLVMCodeModelSmall
    LLVMCodeModelKernel = ctargetmachine.LLVMCodeModelKernel
    LLVMCodeModelMedium = ctargetmachine.LLVMCodeModelMedium
    LLVMCodeModelLarge = ctargetmachine.LLVMCodeModelLarge
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMCodeGenFileType__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMCodeGenFileType(_LLVMCodeGenFileType__Base):
    """LLVMCodeGenFileType

    Attributes:
        LLVMAssemblyFile:
            (undocumented)
        LLVMObjectFile:
            (undocumented)
    """
    LLVMAssemblyFile = ctargetmachine.LLVMAssemblyFile
    LLVMObjectFile = ctargetmachine.LLVMObjectFile
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


@cython.embedsignature(True)
def LLVMGetFirstTarget():
    r"""(No short description, might be part of a group.)

    Returns the first llvm`~.Target` in the registered targets list. */
    """
    _LLVMGetFirstTarget__retval = LLVMTargetRef.from_value(ctargetmachine.LLVMGetFirstTarget())    # fully specified
    return (_LLVMGetFirstTarget__retval,)


@cython.embedsignature(True)
def LLVMGetNextTarget(object T):
    r"""(No short description, might be part of a group.)

    Returns the next llvm`~.Target` given a previous one (or null if there's none) */

    Args:
        T (`~.LLVMTarget`/`~.object`):
            (undocumented)
    """
    _LLVMGetNextTarget__retval = LLVMTargetRef.from_value(ctargetmachine.LLVMGetNextTarget(
        LLVMTarget.from_pyobj(T)._ptr))    # fully specified
    return (_LLVMGetNextTarget__retval,)


@cython.embedsignature(True)
def LLVMGetTargetFromName(const char * Name):
    r"""(No short description, might be part of a group.)

    Finds the target corresponding to the given name and stores it in ``T.``
    Returns 0 on success.

    Args:
        Name (`~.bytes`):
            (undocumented)
    """
    _LLVMGetTargetFromName__retval = LLVMTargetRef.from_value(ctargetmachine.LLVMGetTargetFromName(Name))    # fully specified
    return (_LLVMGetTargetFromName__retval,)


@cython.embedsignature(True)
def LLVMGetTargetFromTriple(const char * Triple, object T, object ErrorMessage):
    r"""(No short description, might be part of a group.)

    Finds the target corresponding to the given triple and stores it in ``T.``
    Returns 0 on success. Optionally returns any error in ErrorMessage.
    Use LLVMDisposeMessage to dispose the message.

    Args:
        Triple (`~.bytes`):
            (undocumented)

        T (`~.rocm.llvm._util.Pointer`/`~.object`):
            (undocumented)

        ErrorMessage (`~.rocm.llvm._util.Pointer`/`~.object`):
            (undocumented)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`
    """
    cdef int _LLVMGetTargetFromTriple__retval = ctargetmachine.LLVMGetTargetFromTriple(Triple,
        <ctargetmachine.LLVMTargetRef*>rocm.llvm._util.Pointer.from_pyobj(T)._ptr,
        <char **>rocm.llvm._util.Pointer.from_pyobj(ErrorMessage)._ptr)    # fully specified
    return (_LLVMGetTargetFromTriple__retval,)


@cython.embedsignature(True)
def LLVMGetTargetName(object T):
    r"""(No short description, might be part of a group.)

    Returns the name of a target. See llvm`~.Target.getName` */

    Args:
        T (`~.LLVMTarget`/`~.object`):
            (undocumented)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.bytes`
    """
    cdef const char * _LLVMGetTargetName__retval = ctargetmachine.LLVMGetTargetName(
        LLVMTarget.from_pyobj(T)._ptr)    # fully specified
    return (_LLVMGetTargetName__retval,)


@cython.embedsignature(True)
def LLVMGetTargetDescription(object T):
    r"""(No short description, might be part of a group.)

    Returns the description  of a target. See llvm`~.Target.getDescription` */

    Args:
        T (`~.LLVMTarget`/`~.object`):
            (undocumented)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.bytes`
    """
    cdef const char * _LLVMGetTargetDescription__retval = ctargetmachine.LLVMGetTargetDescription(
        LLVMTarget.from_pyobj(T)._ptr)    # fully specified
    return (_LLVMGetTargetDescription__retval,)


@cython.embedsignature(True)
def LLVMTargetHasJIT(object T):
    r"""(No short description, might be part of a group.)

    Returns if the target has a JIT */

    Args:
        T (`~.LLVMTarget`/`~.object`):
            (undocumented)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`
    """
    cdef int _LLVMTargetHasJIT__retval = ctargetmachine.LLVMTargetHasJIT(
        LLVMTarget.from_pyobj(T)._ptr)    # fully specified
    return (_LLVMTargetHasJIT__retval,)


@cython.embedsignature(True)
def LLVMTargetHasTargetMachine(object T):
    r"""(No short description, might be part of a group.)

    Returns if the target has a TargetMachine associated */

    Args:
        T (`~.LLVMTarget`/`~.object`):
            (undocumented)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`
    """
    cdef int _LLVMTargetHasTargetMachine__retval = ctargetmachine.LLVMTargetHasTargetMachine(
        LLVMTarget.from_pyobj(T)._ptr)    # fully specified
    return (_LLVMTargetHasTargetMachine__retval,)


@cython.embedsignature(True)
def LLVMTargetHasAsmBackend(object T):
    r"""(No short description, might be part of a group.)

    Returns if the target as an ASM backend (required for emitting output) */

    Args:
        T (`~.LLVMTarget`/`~.object`):
            (undocumented)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`
    """
    cdef int _LLVMTargetHasAsmBackend__retval = ctargetmachine.LLVMTargetHasAsmBackend(
        LLVMTarget.from_pyobj(T)._ptr)    # fully specified
    return (_LLVMTargetHasAsmBackend__retval,)


@cython.embedsignature(True)
def LLVMCreateTargetMachine(object T, const char * Triple, const char * CPU, const char * Features, object Level, object Reloc, object CodeModel):
    r"""(No short description, might be part of a group.)

    Creates a new llvm`~.TargetMachine`. See llvm`~.Target.createTargetMachine` */

    Args:
        T (`~.LLVMTarget`/`~.object`):
            (undocumented)

        Triple (`~.bytes`):
            (undocumented)

        CPU (`~.bytes`):
            (undocumented)

        Features (`~.bytes`):
            (undocumented)

        Level (`~.LLVMCodeGenOptLevel`):
            (undocumented)

        Reloc (`~.LLVMRelocMode`):
            (undocumented)

        CodeModel (`~.LLVMCodeModel`):
            (undocumented)
    """
    if not isinstance(Level,_LLVMCodeGenOptLevel__Base):
        raise TypeError("argument 'Level' must be of type '_LLVMCodeGenOptLevel__Base'")                    
    if not isinstance(Reloc,_LLVMRelocMode__Base):
        raise TypeError("argument 'Reloc' must be of type '_LLVMRelocMode__Base'")                    
    if not isinstance(CodeModel,_LLVMCodeModel__Base):
        raise TypeError("argument 'CodeModel' must be of type '_LLVMCodeModel__Base'")
    _LLVMCreateTargetMachine__retval = LLVMTargetMachineRef.from_value(ctargetmachine.LLVMCreateTargetMachine(
        LLVMTarget.from_pyobj(T)._ptr,Triple,CPU,Features,Level.value,Reloc.value,CodeModel.value))    # fully specified
    return (_LLVMCreateTargetMachine__retval,)


@cython.embedsignature(True)
def LLVMDisposeTargetMachine(object T):
    r"""(No short description, might be part of a group.)

    Dispose the LLVMTargetMachineRef instance generated by
    LLVMCreateTargetMachine.

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)
    """
    ctargetmachine.LLVMDisposeTargetMachine(
        LLVMOpaqueTargetMachine.from_pyobj(T)._ptr)    # fully specified


@cython.embedsignature(True)
def LLVMGetTargetMachineTarget(object T):
    r"""(No short description, might be part of a group.)

    Returns the Target used in a TargetMachine */

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)
    """
    _LLVMGetTargetMachineTarget__retval = LLVMTargetRef.from_value(ctargetmachine.LLVMGetTargetMachineTarget(
        LLVMOpaqueTargetMachine.from_pyobj(T)._ptr))    # fully specified
    return (_LLVMGetTargetMachineTarget__retval,)


@cython.embedsignature(True)
def LLVMGetTargetMachineTriple(object T):
    r"""(No short description, might be part of a group.)

    Returns the triple used creating this target machine. See
    llvm`~.TargetMachine.getTriple`. The result needs to be disposed with
    LLVMDisposeMessage.

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.bytes`
    """
    cdef char * _LLVMGetTargetMachineTriple__retval = ctargetmachine.LLVMGetTargetMachineTriple(
        LLVMOpaqueTargetMachine.from_pyobj(T)._ptr)    # fully specified
    return (_LLVMGetTargetMachineTriple__retval,)


@cython.embedsignature(True)
def LLVMGetTargetMachineCPU(object T):
    r"""(No short description, might be part of a group.)

    Returns the cpu used creating this target machine. See
    llvm`~.TargetMachine.getCPU`. The result needs to be disposed with
    LLVMDisposeMessage.

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.bytes`
    """
    cdef char * _LLVMGetTargetMachineCPU__retval = ctargetmachine.LLVMGetTargetMachineCPU(
        LLVMOpaqueTargetMachine.from_pyobj(T)._ptr)    # fully specified
    return (_LLVMGetTargetMachineCPU__retval,)


@cython.embedsignature(True)
def LLVMGetTargetMachineFeatureString(object T):
    r"""(No short description, might be part of a group.)

    Returns the feature string used creating this target machine. See
    llvm`~.TargetMachine.getFeatureString`. The result needs to be disposed with
    LLVMDisposeMessage.

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.bytes`
    """
    cdef char * _LLVMGetTargetMachineFeatureString__retval = ctargetmachine.LLVMGetTargetMachineFeatureString(
        LLVMOpaqueTargetMachine.from_pyobj(T)._ptr)    # fully specified
    return (_LLVMGetTargetMachineFeatureString__retval,)


@cython.embedsignature(True)
def LLVMCreateTargetDataLayout(object T):
    r"""(No short description, might be part of a group.)

    Create a DataLayout based on the targetMachine. */

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)
    """
    _LLVMCreateTargetDataLayout__retval = LLVMTargetDataRef.from_value(ctargetmachine.LLVMCreateTargetDataLayout(
        LLVMOpaqueTargetMachine.from_pyobj(T)._ptr))    # fully specified
    return (_LLVMCreateTargetDataLayout__retval,)


@cython.embedsignature(True)
def LLVMSetTargetMachineAsmVerbosity(object T, int VerboseAsm):
    r"""(No short description, might be part of a group.)

    Set the target machine's ASM verbosity. */

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)

        VerboseAsm (`~.int`):
            (undocumented)
    """
    ctargetmachine.LLVMSetTargetMachineAsmVerbosity(
        LLVMOpaqueTargetMachine.from_pyobj(T)._ptr,VerboseAsm)    # fully specified


@cython.embedsignature(True)
def LLVMTargetMachineEmitToFile(object T, object M, const char * Filename, object codegen, object ErrorMessage):
    r"""(No short description, might be part of a group.)

    Emits an asm or object file for the given module to the filename. This
    wraps several c++ only classes (among them a file stream). Returns any
    error in ErrorMessage. Use LLVMDisposeMessage to dispose the message.

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)

        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Filename (`~.bytes`):
            (undocumented)

        codegen (`~.LLVMCodeGenFileType`):
            (undocumented)

        ErrorMessage (`~.rocm.llvm._util.Pointer`/`~.object`):
            (undocumented)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`
    """
    if not isinstance(codegen,_LLVMCodeGenFileType__Base):
        raise TypeError("argument 'codegen' must be of type '_LLVMCodeGenFileType__Base'")
    cdef int _LLVMTargetMachineEmitToFile__retval = ctargetmachine.LLVMTargetMachineEmitToFile(
        LLVMOpaqueTargetMachine.from_pyobj(T)._ptr,
        LLVMOpaqueModule.from_pyobj(M)._ptr,Filename,codegen.value,
        <char **>rocm.llvm._util.Pointer.from_pyobj(ErrorMessage)._ptr)    # fully specified
    return (_LLVMTargetMachineEmitToFile__retval,)


@cython.embedsignature(True)
def LLVMTargetMachineEmitToMemoryBuffer(object T, object M, object codegen, object ErrorMessage, object OutMemBuf):
    r"""(No short description, might be part of a group.)

    Compile the LLVM IR stored in ``M`` and store the result in ``OutMemBuf.`` */

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)

        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        codegen (`~.LLVMCodeGenFileType`):
            (undocumented)

        ErrorMessage (`~.rocm.llvm._util.Pointer`/`~.object`):
            (undocumented)

        OutMemBuf (`~.rocm.llvm._util.Pointer`/`~.object`):
            (undocumented)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`
    """
    if not isinstance(codegen,_LLVMCodeGenFileType__Base):
        raise TypeError("argument 'codegen' must be of type '_LLVMCodeGenFileType__Base'")
    cdef int _LLVMTargetMachineEmitToMemoryBuffer__retval = ctargetmachine.LLVMTargetMachineEmitToMemoryBuffer(
        LLVMOpaqueTargetMachine.from_pyobj(T)._ptr,
        LLVMOpaqueModule.from_pyobj(M)._ptr,codegen.value,
        <char **>rocm.llvm._util.Pointer.from_pyobj(ErrorMessage)._ptr,
        <ctargetmachine.LLVMMemoryBufferRef*>rocm.llvm._util.Pointer.from_pyobj(OutMemBuf)._ptr)    # fully specified
    return (_LLVMTargetMachineEmitToMemoryBuffer__retval,)


@cython.embedsignature(True)
def LLVMGetDefaultTargetTriple():
    r"""(No short description, might be part of a group.)

    Get a triple for the host machine as a string. The result needs to be
    disposed with LLVMDisposeMessage.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.bytes`
    """
    cdef char * _LLVMGetDefaultTargetTriple__retval = ctargetmachine.LLVMGetDefaultTargetTriple()    # fully specified
    return (_LLVMGetDefaultTargetTriple__retval,)


@cython.embedsignature(True)
def LLVMNormalizeTargetTriple(const char * triple):
    r"""(No short description, might be part of a group.)

    Normalize a target triple. The result needs to be disposed with
    LLVMDisposeMessage.

    Args:
        triple (`~.bytes`):
            (undocumented)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.bytes`
    """
    cdef char * _LLVMNormalizeTargetTriple__retval = ctargetmachine.LLVMNormalizeTargetTriple(triple)    # fully specified
    return (_LLVMNormalizeTargetTriple__retval,)


@cython.embedsignature(True)
def LLVMGetHostCPUName():
    r"""(No short description, might be part of a group.)

    Get the host CPU as a string. The result needs to be disposed with
    LLVMDisposeMessage.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.bytes`
    """
    cdef char * _LLVMGetHostCPUName__retval = ctargetmachine.LLVMGetHostCPUName()    # fully specified
    return (_LLVMGetHostCPUName__retval,)


@cython.embedsignature(True)
def LLVMGetHostCPUFeatures():
    r"""(No short description, might be part of a group.)

    Get the host CPU's features as a string. The result needs to be disposed
    with LLVMDisposeMessage.

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.bytes`
    """
    cdef char * _LLVMGetHostCPUFeatures__retval = ctargetmachine.LLVMGetHostCPUFeatures()    # fully specified
    return (_LLVMGetHostCPUFeatures__retval,)


@cython.embedsignature(True)
def LLVMAddAnalysisPasses(object T, object PM):
    r"""(No short description, might be part of a group.)

    Adds the target-specific analysis passes to the pass manager. */

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)

        PM (`~.LLVMOpaquePassManager`/`~.object`):
            (undocumented)
    """
    ctargetmachine.LLVMAddAnalysisPasses(
        LLVMOpaqueTargetMachine.from_pyobj(T)._ptr,
        LLVMOpaquePassManager.from_pyobj(PM)._ptr)    # fully specified

__all__ = [
    "LLVMOpaqueTargetMachine",
    "LLVMTargetMachineRef",
    "LLVMTarget",
    "LLVMTargetRef",
    "_LLVMCodeGenOptLevel__Base",
    "LLVMCodeGenOptLevel",
    "_LLVMRelocMode__Base",
    "LLVMRelocMode",
    "_LLVMCodeModel__Base",
    "LLVMCodeModel",
    "_LLVMCodeGenFileType__Base",
    "LLVMCodeGenFileType",
    "LLVMGetFirstTarget",
    "LLVMGetNextTarget",
    "LLVMGetTargetFromName",
    "LLVMGetTargetFromTriple",
    "LLVMGetTargetName",
    "LLVMGetTargetDescription",
    "LLVMTargetHasJIT",
    "LLVMTargetHasTargetMachine",
    "LLVMTargetHasAsmBackend",
    "LLVMCreateTargetMachine",
    "LLVMDisposeTargetMachine",
    "LLVMGetTargetMachineTarget",
    "LLVMGetTargetMachineTriple",
    "LLVMGetTargetMachineCPU",
    "LLVMGetTargetMachineFeatureString",
    "LLVMCreateTargetDataLayout",
    "LLVMSetTargetMachineAsmVerbosity",
    "LLVMTargetMachineEmitToFile",
    "LLVMTargetMachineEmitToMemoryBuffer",
    "LLVMGetDefaultTargetTriple",
    "LLVMNormalizeTargetTriple",
    "LLVMGetHostCPUName",
    "LLVMGetHostCPUFeatures",
    "LLVMAddAnalysisPasses",
]