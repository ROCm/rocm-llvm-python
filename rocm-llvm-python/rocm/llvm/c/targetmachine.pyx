# MIT License
#
# Copyright (c) 2023-2024 Advanced Micro Devices, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.


"""
(No short description)

Attributes:
    LLVMTargetMachineRef:
        alias of `~.LLVMOpaqueTargetMachine`

    LLVMTargetRef:
        alias of `~.LLVMTarget`

"""

import cython
import ctypes
import enum

from rocm.llvm.c.target import LLVMByteOrdering
from rocm.llvm.c.target import LLVMTargetDataRef
from rocm.llvm.c.target import LLVMTargetLibraryInfoRef
from rocm.llvm.c.target import LLVMInitializeAllTargetInfos
from rocm.llvm.c.target import LLVMInitializeAllTargets
from rocm.llvm.c.target import LLVMInitializeAllTargetMCs
from rocm.llvm.c.target import LLVMInitializeAllAsmPrinters
from rocm.llvm.c.target import LLVMInitializeAllAsmParsers
from rocm.llvm.c.target import LLVMInitializeAllDisassemblers
from rocm.llvm.c.target import LLVMInitializeNativeTarget
from rocm.llvm.c.target import LLVMInitializeNativeAsmParser
from rocm.llvm.c.target import LLVMInitializeNativeAsmPrinter
from rocm.llvm.c.target import LLVMInitializeNativeDisassembler
from rocm.llvm.c.target import LLVMGetModuleDataLayout
from rocm.llvm.c.target import LLVMSetModuleDataLayout
from rocm.llvm.c.target import LLVMCreateTargetData
from rocm.llvm.c.target import LLVMDisposeTargetData
from rocm.llvm.c.target import LLVMAddTargetLibraryInfo
from rocm.llvm.c.target import LLVMCopyStringRepOfTargetData
from rocm.llvm.c.target import LLVMByteOrder
from rocm.llvm.c.target import LLVMPointerSize
from rocm.llvm.c.target import LLVMPointerSizeForAS
from rocm.llvm.c.target import LLVMIntPtrType
from rocm.llvm.c.target import LLVMIntPtrTypeForAS
from rocm.llvm.c.target import LLVMIntPtrTypeInContext
from rocm.llvm.c.target import LLVMIntPtrTypeForASInContext
from rocm.llvm.c.target import LLVMSizeOfTypeInBits
from rocm.llvm.c.target import LLVMStoreSizeOfType
from rocm.llvm.c.target import LLVMABISizeOfType
from rocm.llvm.c.target import LLVMABIAlignmentOfType
from rocm.llvm.c.target import LLVMCallFrameAlignmentOfType
from rocm.llvm.c.target import LLVMPreferredAlignmentOfType
from rocm.llvm.c.target import LLVMPreferredAlignmentOfGlobal
from rocm.llvm.c.target import LLVMElementAtOffset
from rocm.llvm.c.target import LLVMOffsetOfElement


from rocm.llvm.c.types import LLVMMemoryBufferRef
from rocm.llvm.c.types import LLVMContextRef
from rocm.llvm.c.types import LLVMModuleRef
from rocm.llvm.c.types import LLVMTypeRef
from rocm.llvm.c.types import LLVMValueRef
from rocm.llvm.c.types import LLVMBasicBlockRef
from rocm.llvm.c.types import LLVMMetadataRef
from rocm.llvm.c.types import LLVMNamedMDNodeRef
from rocm.llvm.c.types import LLVMValueMetadataEntry
from rocm.llvm.c.types import LLVMBuilderRef
from rocm.llvm.c.types import LLVMDIBuilderRef
from rocm.llvm.c.types import LLVMModuleProviderRef
from rocm.llvm.c.types import LLVMPassManagerRef
from rocm.llvm.c.types import LLVMPassRegistryRef
from rocm.llvm.c.types import LLVMUseRef
from rocm.llvm.c.types import LLVMAttributeRef
from rocm.llvm.c.types import LLVMDiagnosticInfoRef
from rocm.llvm.c.types import LLVMComdatRef
from rocm.llvm.c.types import LLVMModuleFlagEntry
from rocm.llvm.c.types import LLVMJITEventListenerRef
from rocm.llvm.c.types import LLVMBinaryRef

cdef class LLVMOpaqueTargetMachine(rocm.llvm._util.types.Pointer):
    """Python wrapper for cdef class ctargetmachine.LLVMOpaqueTargetMachine.

    Python wrapper for cdef class ctargetmachine.LLVMOpaqueTargetMachine.

    If this type is initialized via its `__init__` method, it allocates a
    member of the underlying C type and destroys it again if the wrapper
    type is deallocated.

    This type also serves as adapter when appearing as argument type in a
    function signature. In this case, the type can further be initialized
    from a number of Python objects:

    * `None`:

      This will set the ``self._ptr`` attribute to ``NULL``.

    * `int`:

      Interprets the integer value as pointer address and writes it to ``self._ptr``.
      No ownership is transferred.

    * `ctypes.c_void_p`:

      Takes the pointer address ``pyobj.value`` and writes it to ``self._ptr``.
      No ownership is transferred.

    * `object` that implements the `CUDA Array Interface <https://numba.readthedocs.io/en/stable/cuda/cuda_array_interface.html>`_ protocol:

      Takes the integer-valued pointer address, i.e. the first entry of the `data` tuple
      from `pyobj`'s member ``__cuda_array_interface__``  and writes it to ``self._ptr``.

    * `object` that implements the Python buffer protocol:

      If the object represents a simple contiguous array,
      writes the `Py_buffer` associated with ``pyobj`` to `self._py_buffer`,
      sets the `self._py_buffer_acquired` flag to `True`, and
      writes `self._py_buffer.buf` to the data pointer `self._ptr`.

    * `rocm.llvm._util.types.Pointer`:

      Takes the pointer address ``pyobj._ptr`` and writes it to ``self._ptr``.
      No ownership is transferred.

    Type checks are performed in the above order.

    C Attributes:
        _ptr (C type ``void *``, protected):
            Stores a pointer to the data of the original Python object.
        _is_ptr_owner (C type ``bint``, protected):
            If this wrapper is the owner of the underlying data.
        _py_buffer (C type ``Py_buffer`, protected):
            Stores a pointer to the data of the original Python object.
        _py_buffer_acquired (C type ``bint``, protected):
            Stores a pointer to the data of the original Python object.
    """
    # C members declared in pxd file

    def __cinit__(self):
        self._ptr = NULL
        self._is_ptr_owner = False
        self._py_buffer_acquired = False

    cdef ctargetmachine.LLVMOpaqueTargetMachine* getElementPtr(self):
        return <ctargetmachine.LLVMOpaqueTargetMachine*>self._ptr

    @staticmethod
    cdef LLVMOpaqueTargetMachine fromPtr(void* ptr, bint owner=False):
        """Factory function to create ``LLVMOpaqueTargetMachine`` objects from
        given ``ctargetmachine.LLVMOpaqueTargetMachine`` pointer.
        """
        # Fast call to __new__() that bypasses the __init__() constructor.
        cdef LLVMOpaqueTargetMachine wrapper = LLVMOpaqueTargetMachine.__new__(LLVMOpaqueTargetMachine)
        wrapper._ptr = ptr
        wrapper._is_ptr_owner = owner
        return wrapper

    @staticmethod
    def fromObj(pyobj):
        """Creates a LLVMOpaqueTargetMachine from a Python object.

        Derives a LLVMOpaqueTargetMachine from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMOpaqueTargetMachine`` reference, this method
        returns it directly. No new ``LLVMOpaqueTargetMachine`` is created in this case.
        """
        return LLVMOpaqueTargetMachine.fromPyobj(pyobj)

    @staticmethod
    cdef LLVMOpaqueTargetMachine fromPyobj(object pyobj):
        """Creates a LLVMOpaqueTargetMachine from a Python object.

        Derives a LLVMOpaqueTargetMachine from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMOpaqueTargetMachine`` reference, this method
        returns it directly. No new ``LLVMOpaqueTargetMachine`` is created in this case.

        Args:
            pyobj (object): Must be either `None`; a `rocm.llvm._util.types.Pointer`; a simple, contiguous buffer according to the buffer protocol;
                            or of type `LLVMOpaqueTargetMachine`; `int`; or `ctypes.c_void_p`.

        Note:
            This routine does not perform a copy but returns the original ``pyobj``
            if ``pyobj`` is an instance of LLVMOpaqueTargetMachine!
        """
        cdef LLVMOpaqueTargetMachine wrapper

        if isinstance(pyobj,LLVMOpaqueTargetMachine):
            return pyobj
        else:
            wrapper = LLVMOpaqueTargetMachine.__new__(LLVMOpaqueTargetMachine)
            wrapper.init_from_pyobj(pyobj)
            return wrapper

    def __dealloc__(self):
        # Release the buffer handle
        if self._py_buffer_acquired is True:
            cpython.buffer.PyBuffer_Release(&self._py_buffer)

    def __int__(self):
        """Returns the data's address as long integer.
        """
        return cpython.long.PyLong_FromVoidPtr(self._ptr)

    def __repr__(self):
        return f"<LLVMOpaqueTargetMachine object, ptr: {int(self)}>"

    def as_c_void_p(self):
        """Returns the data's address as `ctypes.c_void_p`
        Note:
            Implemented as function to not collide with
            autogenerated property names.
        """
        return ctypes.c_void_p(int(self))

    @staticmethod
    def PROPERTIES():
        return []

    def __contains__(self,item):
        properties = self.PROPERTIES()
        return item in properties

    def __getitem__(self,item):
        properties = self.PROPERTIES()
        if isinstance(item,int):
            if item < 0 or item >= len(properties):
                raise IndexError()
            return getattr(self,properties[item])
        raise ValueError("'item' type must be 'int'")


LLVMTargetMachineRef = LLVMOpaqueTargetMachine

cdef class LLVMTarget(rocm.llvm._util.types.Pointer):
    """Python wrapper for cdef class ctargetmachine.LLVMTarget.

    Python wrapper for cdef class ctargetmachine.LLVMTarget.

    If this type is initialized via its `__init__` method, it allocates a
    member of the underlying C type and destroys it again if the wrapper
    type is deallocated.

    This type also serves as adapter when appearing as argument type in a
    function signature. In this case, the type can further be initialized
    from a number of Python objects:

    * `None`:

      This will set the ``self._ptr`` attribute to ``NULL``.

    * `int`:

      Interprets the integer value as pointer address and writes it to ``self._ptr``.
      No ownership is transferred.

    * `ctypes.c_void_p`:

      Takes the pointer address ``pyobj.value`` and writes it to ``self._ptr``.
      No ownership is transferred.

    * `object` that implements the `CUDA Array Interface <https://numba.readthedocs.io/en/stable/cuda/cuda_array_interface.html>`_ protocol:

      Takes the integer-valued pointer address, i.e. the first entry of the `data` tuple
      from `pyobj`'s member ``__cuda_array_interface__``  and writes it to ``self._ptr``.

    * `object` that implements the Python buffer protocol:

      If the object represents a simple contiguous array,
      writes the `Py_buffer` associated with ``pyobj`` to `self._py_buffer`,
      sets the `self._py_buffer_acquired` flag to `True`, and
      writes `self._py_buffer.buf` to the data pointer `self._ptr`.

    * `rocm.llvm._util.types.Pointer`:

      Takes the pointer address ``pyobj._ptr`` and writes it to ``self._ptr``.
      No ownership is transferred.

    Type checks are performed in the above order.

    C Attributes:
        _ptr (C type ``void *``, protected):
            Stores a pointer to the data of the original Python object.
        _is_ptr_owner (C type ``bint``, protected):
            If this wrapper is the owner of the underlying data.
        _py_buffer (C type ``Py_buffer`, protected):
            Stores a pointer to the data of the original Python object.
        _py_buffer_acquired (C type ``bint``, protected):
            Stores a pointer to the data of the original Python object.
    """
    # C members declared in pxd file

    def __cinit__(self):
        self._ptr = NULL
        self._is_ptr_owner = False
        self._py_buffer_acquired = False

    cdef ctargetmachine.LLVMTarget* getElementPtr(self):
        return <ctargetmachine.LLVMTarget*>self._ptr

    @staticmethod
    cdef LLVMTarget fromPtr(void* ptr, bint owner=False):
        """Factory function to create ``LLVMTarget`` objects from
        given ``ctargetmachine.LLVMTarget`` pointer.
        """
        # Fast call to __new__() that bypasses the __init__() constructor.
        cdef LLVMTarget wrapper = LLVMTarget.__new__(LLVMTarget)
        wrapper._ptr = ptr
        wrapper._is_ptr_owner = owner
        return wrapper

    @staticmethod
    def fromObj(pyobj):
        """Creates a LLVMTarget from a Python object.

        Derives a LLVMTarget from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMTarget`` reference, this method
        returns it directly. No new ``LLVMTarget`` is created in this case.
        """
        return LLVMTarget.fromPyobj(pyobj)

    @staticmethod
    cdef LLVMTarget fromPyobj(object pyobj):
        """Creates a LLVMTarget from a Python object.

        Derives a LLVMTarget from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMTarget`` reference, this method
        returns it directly. No new ``LLVMTarget`` is created in this case.

        Args:
            pyobj (object): Must be either `None`; a `rocm.llvm._util.types.Pointer`; a simple, contiguous buffer according to the buffer protocol;
                            or of type `LLVMTarget`; `int`; or `ctypes.c_void_p`.

        Note:
            This routine does not perform a copy but returns the original ``pyobj``
            if ``pyobj`` is an instance of LLVMTarget!
        """
        cdef LLVMTarget wrapper

        if isinstance(pyobj,LLVMTarget):
            return pyobj
        else:
            wrapper = LLVMTarget.__new__(LLVMTarget)
            wrapper.init_from_pyobj(pyobj)
            return wrapper

    def __dealloc__(self):
        # Release the buffer handle
        if self._py_buffer_acquired is True:
            cpython.buffer.PyBuffer_Release(&self._py_buffer)

    def __int__(self):
        """Returns the data's address as long integer.
        """
        return cpython.long.PyLong_FromVoidPtr(self._ptr)

    def __repr__(self):
        return f"<LLVMTarget object, ptr: {int(self)}>"

    def as_c_void_p(self):
        """Returns the data's address as `ctypes.c_void_p`
        Note:
            Implemented as function to not collide with
            autogenerated property names.
        """
        return ctypes.c_void_p(int(self))

    @staticmethod
    def PROPERTIES():
        return []

    def __contains__(self,item):
        properties = self.PROPERTIES()
        return item in properties

    def __getitem__(self,item):
        properties = self.PROPERTIES()
        if isinstance(item,int):
            if item < 0 or item >= len(properties):
                raise IndexError()
            return getattr(self,properties[item])
        raise ValueError("'item' type must be 'int'")


LLVMTargetRef = LLVMTarget

class _LLVMCodeGenOptLevel__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMCodeGenOptLevel(_LLVMCodeGenOptLevel__Base):
    """LLVMCodeGenOptLevel

    Attributes:
        LLVMCodeGenLevelNone:
            (undocumented)
        LLVMCodeGenLevelLess:
            (undocumented)
        LLVMCodeGenLevelDefault:
            (undocumented)
        LLVMCodeGenLevelAggressive:
            (undocumented)
    """
    LLVMCodeGenLevelNone = ctargetmachine.LLVMCodeGenLevelNone
    LLVMCodeGenLevelLess = ctargetmachine.LLVMCodeGenLevelLess
    LLVMCodeGenLevelDefault = ctargetmachine.LLVMCodeGenLevelDefault
    LLVMCodeGenLevelAggressive = ctargetmachine.LLVMCodeGenLevelAggressive
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint


class _LLVMRelocMode__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMRelocMode(_LLVMRelocMode__Base):
    """LLVMRelocMode

    Attributes:
        LLVMRelocDefault:
            (undocumented)
        LLVMRelocStatic:
            (undocumented)
        LLVMRelocPIC:
            (undocumented)
        LLVMRelocDynamicNoPic:
            (undocumented)
        LLVMRelocROPI:
            (undocumented)
        LLVMRelocRWPI:
            (undocumented)
        LLVMRelocROPI_RWPI:
            (undocumented)
    """
    LLVMRelocDefault = ctargetmachine.LLVMRelocDefault
    LLVMRelocStatic = ctargetmachine.LLVMRelocStatic
    LLVMRelocPIC = ctargetmachine.LLVMRelocPIC
    LLVMRelocDynamicNoPic = ctargetmachine.LLVMRelocDynamicNoPic
    LLVMRelocROPI = ctargetmachine.LLVMRelocROPI
    LLVMRelocRWPI = ctargetmachine.LLVMRelocRWPI
    LLVMRelocROPI_RWPI = ctargetmachine.LLVMRelocROPI_RWPI
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint


class _LLVMCodeModel__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMCodeModel(_LLVMCodeModel__Base):
    """LLVMCodeModel

    Attributes:
        LLVMCodeModelDefault:
            (undocumented)
        LLVMCodeModelJITDefault:
            (undocumented)
        LLVMCodeModelTiny:
            (undocumented)
        LLVMCodeModelSmall:
            (undocumented)
        LLVMCodeModelKernel:
            (undocumented)
        LLVMCodeModelMedium:
            (undocumented)
        LLVMCodeModelLarge:
            (undocumented)
    """
    LLVMCodeModelDefault = ctargetmachine.LLVMCodeModelDefault
    LLVMCodeModelJITDefault = ctargetmachine.LLVMCodeModelJITDefault
    LLVMCodeModelTiny = ctargetmachine.LLVMCodeModelTiny
    LLVMCodeModelSmall = ctargetmachine.LLVMCodeModelSmall
    LLVMCodeModelKernel = ctargetmachine.LLVMCodeModelKernel
    LLVMCodeModelMedium = ctargetmachine.LLVMCodeModelMedium
    LLVMCodeModelLarge = ctargetmachine.LLVMCodeModelLarge
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint


class _LLVMCodeGenFileType__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMCodeGenFileType(_LLVMCodeGenFileType__Base):
    """LLVMCodeGenFileType

    Attributes:
        LLVMAssemblyFile:
            (undocumented)
        LLVMObjectFile:
            (undocumented)
    """
    LLVMAssemblyFile = ctargetmachine.LLVMAssemblyFile
    LLVMObjectFile = ctargetmachine.LLVMObjectFile
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint


@cython.embedsignature(True)
def LLVMGetFirstTarget():
    r"""(No short description, might be part of a group.)

    Returns the first llvm`~.Target` in the registered targets list. */
    """
    _LLVMGetFirstTarget__retval = LLVMTarget.fromPtr(ctargetmachine.LLVMGetFirstTarget())
    return None if _LLVMGetFirstTarget__retval._ptr == NULL else _LLVMGetFirstTarget__retval


@cython.embedsignature(True)
def LLVMGetNextTarget(object T):
    r"""(No short description, might be part of a group.)

    Returns the next llvm`~.Target` given a previous one (or null if there's none) */

    Args:
        T (`~.LLVMTarget`/`~.object`):
            (undocumented)
    """
    _LLVMGetNextTarget__retval = LLVMTarget.fromPtr(ctargetmachine.LLVMGetNextTarget(
        LLVMTarget.fromPyobj(T).getElementPtr()))
    return None if _LLVMGetNextTarget__retval._ptr == NULL else _LLVMGetNextTarget__retval


@cython.embedsignature(True)
def LLVMGetTargetFromName(object Name):
    r"""(No short description, might be part of a group.)

    Finds the target corresponding to the given name and stores it in ``T.``
    Returns 0 on success.

    Args:
        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMGetTargetFromName__retval = LLVMTarget.fromPtr(ctargetmachine.LLVMGetTargetFromName(
        <const char *>rocm.llvm._util.types.CStr.fromPyobj(Name)._ptr))
    return None if _LLVMGetTargetFromName__retval._ptr == NULL else _LLVMGetTargetFromName__retval


@cython.embedsignature(True)
def LLVMGetTargetFromTriple(object Triple):
    r"""(No short description, might be part of a group.)

    Finds the target corresponding to the given triple and stores it in ``T.``
    Returns 0 on success. Optionally returns any error in ErrorMessage.
    Use LLVMDisposeMessage to dispose the message.

    Args:
        Triple (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

    Returns:
        A `~.tuple` of size 2 that contains (in that order):

        * T (`~.LLVMTarget`):
            (undocumented)
        * ErrorMessage (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    T = LLVMTarget.fromPtr(NULL)
    ErrorMessage = rocm.llvm._util.types.CStr.fromPtr(NULL)
    cdef int _LLVMGetTargetFromTriple__retval = ctargetmachine.LLVMGetTargetFromTriple(
        <const char *>rocm.llvm._util.types.CStr.fromPyobj(Triple)._ptr,<ctargetmachine.LLVMTarget**>&T._ptr,
        <char **>&ErrorMessage._ptr)
    return (_LLVMGetTargetFromTriple__retval,None if T._ptr == NULL else T,None if ErrorMessage._ptr == NULL else ErrorMessage)


@cython.embedsignature(True)
def LLVMGetTargetName(object T):
    r"""(No short description, might be part of a group.)

    Returns the name of a target. See llvm`~.Target.getName` */

    Args:
        T (`~.LLVMTarget`/`~.object`):
            (undocumented)
    """
    _LLVMGetTargetName__retval = rocm.llvm._util.types.CStr.fromPtr(<void*>ctargetmachine.LLVMGetTargetName(
        LLVMTarget.fromPyobj(T).getElementPtr()))
    return None if _LLVMGetTargetName__retval._ptr == NULL else _LLVMGetTargetName__retval


@cython.embedsignature(True)
def LLVMGetTargetDescription(object T):
    r"""(No short description, might be part of a group.)

    Returns the description  of a target. See llvm`~.Target.getDescription` */

    Args:
        T (`~.LLVMTarget`/`~.object`):
            (undocumented)
    """
    _LLVMGetTargetDescription__retval = rocm.llvm._util.types.CStr.fromPtr(<void*>ctargetmachine.LLVMGetTargetDescription(
        LLVMTarget.fromPyobj(T).getElementPtr()))
    return None if _LLVMGetTargetDescription__retval._ptr == NULL else _LLVMGetTargetDescription__retval


@cython.embedsignature(True)
def LLVMTargetHasJIT(object T):
    r"""(No short description, might be part of a group.)

    Returns if the target has a JIT */

    Args:
        T (`~.LLVMTarget`/`~.object`):
            (undocumented)
    """
    cdef int _LLVMTargetHasJIT__retval = ctargetmachine.LLVMTargetHasJIT(
        LLVMTarget.fromPyobj(T).getElementPtr())
    return _LLVMTargetHasJIT__retval


@cython.embedsignature(True)
def LLVMTargetHasTargetMachine(object T):
    r"""(No short description, might be part of a group.)

    Returns if the target has a TargetMachine associated */

    Args:
        T (`~.LLVMTarget`/`~.object`):
            (undocumented)
    """
    cdef int _LLVMTargetHasTargetMachine__retval = ctargetmachine.LLVMTargetHasTargetMachine(
        LLVMTarget.fromPyobj(T).getElementPtr())
    return _LLVMTargetHasTargetMachine__retval


@cython.embedsignature(True)
def LLVMTargetHasAsmBackend(object T):
    r"""(No short description, might be part of a group.)

    Returns if the target as an ASM backend (required for emitting output) */

    Args:
        T (`~.LLVMTarget`/`~.object`):
            (undocumented)
    """
    cdef int _LLVMTargetHasAsmBackend__retval = ctargetmachine.LLVMTargetHasAsmBackend(
        LLVMTarget.fromPyobj(T).getElementPtr())
    return _LLVMTargetHasAsmBackend__retval


@cython.embedsignature(True)
def LLVMCreateTargetMachine(object T, object Triple, object CPU, object Features, object Level, object Reloc, object CodeModel):
    r"""(No short description, might be part of a group.)

    Creates a new llvm`~.TargetMachine`. See llvm`~.Target.createTargetMachine` */

    Args:
        T (`~.LLVMTarget`/`~.object`):
            (undocumented)

        Triple (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        CPU (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        Features (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        Level (`~.LLVMCodeGenOptLevel`):
            (undocumented)

        Reloc (`~.LLVMRelocMode`):
            (undocumented)

        CodeModel (`~.LLVMCodeModel`):
            (undocumented)
    """
    if not isinstance(Level,_LLVMCodeGenOptLevel__Base):
        raise TypeError("argument 'Level' must be of type '_LLVMCodeGenOptLevel__Base'")                    
    if not isinstance(Reloc,_LLVMRelocMode__Base):
        raise TypeError("argument 'Reloc' must be of type '_LLVMRelocMode__Base'")                    
    if not isinstance(CodeModel,_LLVMCodeModel__Base):
        raise TypeError("argument 'CodeModel' must be of type '_LLVMCodeModel__Base'")
    _LLVMCreateTargetMachine__retval = LLVMOpaqueTargetMachine.fromPtr(ctargetmachine.LLVMCreateTargetMachine(
        LLVMTarget.fromPyobj(T).getElementPtr(),
        <const char *>rocm.llvm._util.types.CStr.fromPyobj(Triple)._ptr,
        <const char *>rocm.llvm._util.types.CStr.fromPyobj(CPU)._ptr,
        <const char *>rocm.llvm._util.types.CStr.fromPyobj(Features)._ptr,Level.value,Reloc.value,CodeModel.value))
    return None if _LLVMCreateTargetMachine__retval._ptr == NULL else _LLVMCreateTargetMachine__retval


@cython.embedsignature(True)
def LLVMDisposeTargetMachine(object T):
    r"""(No short description, might be part of a group.)

    Dispose the LLVMTargetMachineRef instance generated by
    LLVMCreateTargetMachine.

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)
    """
    ctargetmachine.LLVMDisposeTargetMachine(
        LLVMOpaqueTargetMachine.fromPyobj(T).getElementPtr())


@cython.embedsignature(True)
def LLVMGetTargetMachineTarget(object T):
    r"""(No short description, might be part of a group.)

    Returns the Target used in a TargetMachine */

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)
    """
    _LLVMGetTargetMachineTarget__retval = LLVMTarget.fromPtr(ctargetmachine.LLVMGetTargetMachineTarget(
        LLVMOpaqueTargetMachine.fromPyobj(T).getElementPtr()))
    return None if _LLVMGetTargetMachineTarget__retval._ptr == NULL else _LLVMGetTargetMachineTarget__retval


@cython.embedsignature(True)
def LLVMGetTargetMachineTriple(object T):
    r"""(No short description, might be part of a group.)

    Returns the triple used creating this target machine. See
    llvm`~.TargetMachine.getTriple`. The result needs to be disposed with
    LLVMDisposeMessage.

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)
    """
    _LLVMGetTargetMachineTriple__retval = rocm.llvm._util.types.CStr.fromPtr(<void*>ctargetmachine.LLVMGetTargetMachineTriple(
        LLVMOpaqueTargetMachine.fromPyobj(T).getElementPtr()))
    return None if _LLVMGetTargetMachineTriple__retval._ptr == NULL else _LLVMGetTargetMachineTriple__retval


@cython.embedsignature(True)
def LLVMGetTargetMachineCPU(object T):
    r"""(No short description, might be part of a group.)

    Returns the cpu used creating this target machine. See
    llvm`~.TargetMachine.getCPU`. The result needs to be disposed with
    LLVMDisposeMessage.

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)
    """
    _LLVMGetTargetMachineCPU__retval = rocm.llvm._util.types.CStr.fromPtr(<void*>ctargetmachine.LLVMGetTargetMachineCPU(
        LLVMOpaqueTargetMachine.fromPyobj(T).getElementPtr()))
    return None if _LLVMGetTargetMachineCPU__retval._ptr == NULL else _LLVMGetTargetMachineCPU__retval


@cython.embedsignature(True)
def LLVMGetTargetMachineFeatureString(object T):
    r"""(No short description, might be part of a group.)

    Returns the feature string used creating this target machine. See
    llvm`~.TargetMachine.getFeatureString`. The result needs to be disposed with
    LLVMDisposeMessage.

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)
    """
    _LLVMGetTargetMachineFeatureString__retval = rocm.llvm._util.types.CStr.fromPtr(<void*>ctargetmachine.LLVMGetTargetMachineFeatureString(
        LLVMOpaqueTargetMachine.fromPyobj(T).getElementPtr()))
    return None if _LLVMGetTargetMachineFeatureString__retval._ptr == NULL else _LLVMGetTargetMachineFeatureString__retval


@cython.embedsignature(True)
def LLVMCreateTargetDataLayout(object T):
    r"""(No short description, might be part of a group.)

    Create a DataLayout based on the targetMachine. */

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)
    """
    _LLVMCreateTargetDataLayout__retval = LLVMOpaqueTargetData.fromPtr(ctargetmachine.LLVMCreateTargetDataLayout(
        LLVMOpaqueTargetMachine.fromPyobj(T).getElementPtr()))
    return None if _LLVMCreateTargetDataLayout__retval._ptr == NULL else _LLVMCreateTargetDataLayout__retval


@cython.embedsignature(True)
def LLVMSetTargetMachineAsmVerbosity(object T, int VerboseAsm):
    r"""(No short description, might be part of a group.)

    Set the target machine's ASM verbosity. */

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)

        VerboseAsm (`~.int`):
            (undocumented)
    """
    ctargetmachine.LLVMSetTargetMachineAsmVerbosity(
        LLVMOpaqueTargetMachine.fromPyobj(T).getElementPtr(),VerboseAsm)


@cython.embedsignature(True)
def LLVMTargetMachineEmitToFile(object T, object M, object Filename, object codegen, object ErrorMessage):
    r"""(No short description, might be part of a group.)

    Emits an asm or object file for the given module to the filename. This
    wraps several c++ only classes (among them a file stream). Returns any
    error in ErrorMessage. Use LLVMDisposeMessage to dispose the message.

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)

        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Filename (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        codegen (`~.LLVMCodeGenFileType`):
            (undocumented)

        ErrorMessage (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    if not isinstance(codegen,_LLVMCodeGenFileType__Base):
        raise TypeError("argument 'codegen' must be of type '_LLVMCodeGenFileType__Base'")
    cdef int _LLVMTargetMachineEmitToFile__retval = ctargetmachine.LLVMTargetMachineEmitToFile(
        LLVMOpaqueTargetMachine.fromPyobj(T).getElementPtr(),
        LLVMOpaqueModule.fromPyobj(M).getElementPtr(),
        <const char *>rocm.llvm._util.types.CStr.fromPyobj(Filename)._ptr,codegen.value,
        <char **>rocm.llvm._util.types.CStr.fromPyobj(ErrorMessage)._ptr)
    return _LLVMTargetMachineEmitToFile__retval


@cython.embedsignature(True)
def LLVMTargetMachineEmitToMemoryBuffer(object T, object M, object codegen, object ErrorMessage, object OutMemBuf):
    r"""(No short description, might be part of a group.)

    Compile the LLVM IR stored in ``M`` and store the result in ``OutMemBuf.`` */

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)

        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        codegen (`~.LLVMCodeGenFileType`):
            (undocumented)

        ErrorMessage (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        OutMemBuf (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    if not isinstance(codegen,_LLVMCodeGenFileType__Base):
        raise TypeError("argument 'codegen' must be of type '_LLVMCodeGenFileType__Base'")
    cdef int _LLVMTargetMachineEmitToMemoryBuffer__retval = ctargetmachine.LLVMTargetMachineEmitToMemoryBuffer(
        LLVMOpaqueTargetMachine.fromPyobj(T).getElementPtr(),
        LLVMOpaqueModule.fromPyobj(M).getElementPtr(),codegen.value,
        <char **>rocm.llvm._util.types.CStr.fromPyobj(ErrorMessage)._ptr,
        <ctargetmachine.LLVMMemoryBufferRef*>rocm.llvm._util.types.Pointer.fromPyobj(OutMemBuf)._ptr)
    return _LLVMTargetMachineEmitToMemoryBuffer__retval


@cython.embedsignature(True)
def LLVMGetDefaultTargetTriple():
    r"""(No short description, might be part of a group.)

    Get a triple for the host machine as a string. The result needs to be
    disposed with LLVMDisposeMessage.
    """
    _LLVMGetDefaultTargetTriple__retval = rocm.llvm._util.types.CStr.fromPtr(<void*>ctargetmachine.LLVMGetDefaultTargetTriple())
    return None if _LLVMGetDefaultTargetTriple__retval._ptr == NULL else _LLVMGetDefaultTargetTriple__retval


@cython.embedsignature(True)
def LLVMNormalizeTargetTriple(object triple):
    r"""(No short description, might be part of a group.)

    Normalize a target triple. The result needs to be disposed with
    LLVMDisposeMessage.

    Args:
        triple (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMNormalizeTargetTriple__retval = rocm.llvm._util.types.CStr.fromPtr(<void*>ctargetmachine.LLVMNormalizeTargetTriple(
        <const char *>rocm.llvm._util.types.CStr.fromPyobj(triple)._ptr))
    return None if _LLVMNormalizeTargetTriple__retval._ptr == NULL else _LLVMNormalizeTargetTriple__retval


@cython.embedsignature(True)
def LLVMGetHostCPUName():
    r"""(No short description, might be part of a group.)

    Get the host CPU as a string. The result needs to be disposed with
    LLVMDisposeMessage.
    """
    _LLVMGetHostCPUName__retval = rocm.llvm._util.types.CStr.fromPtr(<void*>ctargetmachine.LLVMGetHostCPUName())
    return None if _LLVMGetHostCPUName__retval._ptr == NULL else _LLVMGetHostCPUName__retval


@cython.embedsignature(True)
def LLVMGetHostCPUFeatures():
    r"""(No short description, might be part of a group.)

    Get the host CPU's features as a string. The result needs to be disposed
    with LLVMDisposeMessage.
    """
    _LLVMGetHostCPUFeatures__retval = rocm.llvm._util.types.CStr.fromPtr(<void*>ctargetmachine.LLVMGetHostCPUFeatures())
    return None if _LLVMGetHostCPUFeatures__retval._ptr == NULL else _LLVMGetHostCPUFeatures__retval


@cython.embedsignature(True)
def LLVMAddAnalysisPasses(object T, object PM):
    r"""(No short description, might be part of a group.)

    Adds the target-specific analysis passes to the pass manager. */

    Args:
        T (`~.LLVMOpaqueTargetMachine`/`~.object`):
            (undocumented)

        PM (`~.LLVMOpaquePassManager`/`~.object`):
            (undocumented)
    """
    ctargetmachine.LLVMAddAnalysisPasses(
        LLVMOpaqueTargetMachine.fromPyobj(T).getElementPtr(),
        LLVMOpaquePassManager.fromPyobj(PM).getElementPtr())

__all__ = [
    "LLVMOpaqueTargetMachine",
    "LLVMTargetMachineRef",
    "LLVMTarget",
    "LLVMTargetRef",
    "_LLVMCodeGenOptLevel__Base",
    "LLVMCodeGenOptLevel",
    "_LLVMRelocMode__Base",
    "LLVMRelocMode",
    "_LLVMCodeModel__Base",
    "LLVMCodeModel",
    "_LLVMCodeGenFileType__Base",
    "LLVMCodeGenFileType",
    "LLVMGetFirstTarget",
    "LLVMGetNextTarget",
    "LLVMGetTargetFromName",
    "LLVMGetTargetFromTriple",
    "LLVMGetTargetName",
    "LLVMGetTargetDescription",
    "LLVMTargetHasJIT",
    "LLVMTargetHasTargetMachine",
    "LLVMTargetHasAsmBackend",
    "LLVMCreateTargetMachine",
    "LLVMDisposeTargetMachine",
    "LLVMGetTargetMachineTarget",
    "LLVMGetTargetMachineTriple",
    "LLVMGetTargetMachineCPU",
    "LLVMGetTargetMachineFeatureString",
    "LLVMCreateTargetDataLayout",
    "LLVMSetTargetMachineAsmVerbosity",
    "LLVMTargetMachineEmitToFile",
    "LLVMTargetMachineEmitToMemoryBuffer",
    "LLVMGetDefaultTargetTriple",
    "LLVMNormalizeTargetTriple",
    "LLVMGetHostCPUName",
    "LLVMGetHostCPUFeatures",
    "LLVMAddAnalysisPasses",
]