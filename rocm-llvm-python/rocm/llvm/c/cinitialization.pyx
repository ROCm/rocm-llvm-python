# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

cimport hip._util.posixloader as loader
cdef void* _lib_handle = NULL

cdef void __init() nogil:
    global _lib_handle
    if _lib_handle == NULL:
        with gil:
            _lib_handle = loader.open_library("librocmllvm.so")

cdef void __init_symbol(void** result, const char* name) nogil:
    global _lib_handle
    if _lib_handle == NULL:
        __init()
    if result[0] == NULL:
        with gil:
            result[0] = loader.load_symbol(_lib_handle, name) 


cdef void* _LLVMInitializeCore__funptr = NULL
# 
# @defgroup LLVMCInitialization Initialization Routines
# @ingroup LLVMC
# 
# This module contains routines used to initialize the LLVM system.
# 
# @{
cdef void LLVMInitializeCore(LLVMPassRegistryRef R) nogil:
    global _LLVMInitializeCore__funptr
    __init_symbol(&_LLVMInitializeCore__funptr,"LLVMInitializeCore")
    return (<void (*)(LLVMPassRegistryRef) nogil> _LLVMInitializeCore__funptr)(R)


cdef void* _LLVMInitializeTransformUtils__funptr = NULL
cdef void LLVMInitializeTransformUtils(LLVMPassRegistryRef R) nogil:
    global _LLVMInitializeTransformUtils__funptr
    __init_symbol(&_LLVMInitializeTransformUtils__funptr,"LLVMInitializeTransformUtils")
    return (<void (*)(LLVMPassRegistryRef) nogil> _LLVMInitializeTransformUtils__funptr)(R)


cdef void* _LLVMInitializeScalarOpts__funptr = NULL
cdef void LLVMInitializeScalarOpts(LLVMPassRegistryRef R) nogil:
    global _LLVMInitializeScalarOpts__funptr
    __init_symbol(&_LLVMInitializeScalarOpts__funptr,"LLVMInitializeScalarOpts")
    return (<void (*)(LLVMPassRegistryRef) nogil> _LLVMInitializeScalarOpts__funptr)(R)


cdef void* _LLVMInitializeVectorization__funptr = NULL
cdef void LLVMInitializeVectorization(LLVMPassRegistryRef R) nogil:
    global _LLVMInitializeVectorization__funptr
    __init_symbol(&_LLVMInitializeVectorization__funptr,"LLVMInitializeVectorization")
    return (<void (*)(LLVMPassRegistryRef) nogil> _LLVMInitializeVectorization__funptr)(R)


cdef void* _LLVMInitializeInstCombine__funptr = NULL
cdef void LLVMInitializeInstCombine(LLVMPassRegistryRef R) nogil:
    global _LLVMInitializeInstCombine__funptr
    __init_symbol(&_LLVMInitializeInstCombine__funptr,"LLVMInitializeInstCombine")
    return (<void (*)(LLVMPassRegistryRef) nogil> _LLVMInitializeInstCombine__funptr)(R)


cdef void* _LLVMInitializeIPO__funptr = NULL
cdef void LLVMInitializeIPO(LLVMPassRegistryRef R) nogil:
    global _LLVMInitializeIPO__funptr
    __init_symbol(&_LLVMInitializeIPO__funptr,"LLVMInitializeIPO")
    return (<void (*)(LLVMPassRegistryRef) nogil> _LLVMInitializeIPO__funptr)(R)


cdef void* _LLVMInitializeAnalysis__funptr = NULL
cdef void LLVMInitializeAnalysis(LLVMPassRegistryRef R) nogil:
    global _LLVMInitializeAnalysis__funptr
    __init_symbol(&_LLVMInitializeAnalysis__funptr,"LLVMInitializeAnalysis")
    return (<void (*)(LLVMPassRegistryRef) nogil> _LLVMInitializeAnalysis__funptr)(R)


cdef void* _LLVMInitializeIPA__funptr = NULL
cdef void LLVMInitializeIPA(LLVMPassRegistryRef R) nogil:
    global _LLVMInitializeIPA__funptr
    __init_symbol(&_LLVMInitializeIPA__funptr,"LLVMInitializeIPA")
    return (<void (*)(LLVMPassRegistryRef) nogil> _LLVMInitializeIPA__funptr)(R)


cdef void* _LLVMInitializeCodeGen__funptr = NULL
cdef void LLVMInitializeCodeGen(LLVMPassRegistryRef R) nogil:
    global _LLVMInitializeCodeGen__funptr
    __init_symbol(&_LLVMInitializeCodeGen__funptr,"LLVMInitializeCodeGen")
    return (<void (*)(LLVMPassRegistryRef) nogil> _LLVMInitializeCodeGen__funptr)(R)


cdef void* _LLVMInitializeTarget__funptr = NULL
cdef void LLVMInitializeTarget(LLVMPassRegistryRef R) nogil:
    global _LLVMInitializeTarget__funptr
    __init_symbol(&_LLVMInitializeTarget__funptr,"LLVMInitializeTarget")
    return (<void (*)(LLVMPassRegistryRef) nogil> _LLVMInitializeTarget__funptr)(R)
