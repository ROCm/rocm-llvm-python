# MIT License
#
# Copyright (c) 2023-2024 Advanced Micro Devices, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

cimport rocm.llvm._util.posixloader as loader
cdef void* _lib_handle = NULL

DLL = b"librocmllvm.so"

cdef int __init() except 1 nogil:
    global DLL
    global _lib_handle
    cdef char* dll = NULL
    if _lib_handle == NULL:
        with gil:
            dll = DLL
        return loader.open_library(&_lib_handle,dll)
    return 0

cdef int __init_symbol(void** result, const char* name) except 1 nogil:
    global _lib_handle
    cdef int init_result = 0
    if _lib_handle == NULL:
        init_result = __init()
        if init_result > 0:
            return init_result
    if result[0] == NULL:
        return loader.load_symbol(result,_lib_handle, name)
    return 0


cdef void* _LLVMInitializeCore__funptr = NULL
# 
# @defgroup LLVMCInitialization Initialization Routines
# @ingroup LLVMC
# 
# This module contains routines used to initialize the LLVM system.
# 
# @{
cdef void LLVMInitializeCore(LLVMPassRegistryRef R):
    global _LLVMInitializeCore__funptr
    if __init_symbol(&_LLVMInitializeCore__funptr,"LLVMInitializeCore") > 0:
        pass
    (<void (*)(LLVMPassRegistryRef) noexcept nogil> _LLVMInitializeCore__funptr)(R)


cdef void* _LLVMInitializeTransformUtils__funptr = NULL
cdef void LLVMInitializeTransformUtils(LLVMPassRegistryRef R):
    global _LLVMInitializeTransformUtils__funptr
    if __init_symbol(&_LLVMInitializeTransformUtils__funptr,"LLVMInitializeTransformUtils") > 0:
        pass
    (<void (*)(LLVMPassRegistryRef) noexcept nogil> _LLVMInitializeTransformUtils__funptr)(R)


cdef void* _LLVMInitializeScalarOpts__funptr = NULL
cdef void LLVMInitializeScalarOpts(LLVMPassRegistryRef R):
    global _LLVMInitializeScalarOpts__funptr
    if __init_symbol(&_LLVMInitializeScalarOpts__funptr,"LLVMInitializeScalarOpts") > 0:
        pass
    (<void (*)(LLVMPassRegistryRef) noexcept nogil> _LLVMInitializeScalarOpts__funptr)(R)


cdef void* _LLVMInitializeVectorization__funptr = NULL
cdef void LLVMInitializeVectorization(LLVMPassRegistryRef R):
    global _LLVMInitializeVectorization__funptr
    if __init_symbol(&_LLVMInitializeVectorization__funptr,"LLVMInitializeVectorization") > 0:
        pass
    (<void (*)(LLVMPassRegistryRef) noexcept nogil> _LLVMInitializeVectorization__funptr)(R)


cdef void* _LLVMInitializeInstCombine__funptr = NULL
cdef void LLVMInitializeInstCombine(LLVMPassRegistryRef R):
    global _LLVMInitializeInstCombine__funptr
    if __init_symbol(&_LLVMInitializeInstCombine__funptr,"LLVMInitializeInstCombine") > 0:
        pass
    (<void (*)(LLVMPassRegistryRef) noexcept nogil> _LLVMInitializeInstCombine__funptr)(R)


cdef void* _LLVMInitializeIPO__funptr = NULL
cdef void LLVMInitializeIPO(LLVMPassRegistryRef R):
    global _LLVMInitializeIPO__funptr
    if __init_symbol(&_LLVMInitializeIPO__funptr,"LLVMInitializeIPO") > 0:
        pass
    (<void (*)(LLVMPassRegistryRef) noexcept nogil> _LLVMInitializeIPO__funptr)(R)


cdef void* _LLVMInitializeAnalysis__funptr = NULL
cdef void LLVMInitializeAnalysis(LLVMPassRegistryRef R):
    global _LLVMInitializeAnalysis__funptr
    if __init_symbol(&_LLVMInitializeAnalysis__funptr,"LLVMInitializeAnalysis") > 0:
        pass
    (<void (*)(LLVMPassRegistryRef) noexcept nogil> _LLVMInitializeAnalysis__funptr)(R)


cdef void* _LLVMInitializeIPA__funptr = NULL
cdef void LLVMInitializeIPA(LLVMPassRegistryRef R):
    global _LLVMInitializeIPA__funptr
    if __init_symbol(&_LLVMInitializeIPA__funptr,"LLVMInitializeIPA") > 0:
        pass
    (<void (*)(LLVMPassRegistryRef) noexcept nogil> _LLVMInitializeIPA__funptr)(R)


cdef void* _LLVMInitializeCodeGen__funptr = NULL
cdef void LLVMInitializeCodeGen(LLVMPassRegistryRef R):
    global _LLVMInitializeCodeGen__funptr
    if __init_symbol(&_LLVMInitializeCodeGen__funptr,"LLVMInitializeCodeGen") > 0:
        pass
    (<void (*)(LLVMPassRegistryRef) noexcept nogil> _LLVMInitializeCodeGen__funptr)(R)


cdef void* _LLVMInitializeTarget__funptr = NULL
cdef void LLVMInitializeTarget(LLVMPassRegistryRef R):
    global _LLVMInitializeTarget__funptr
    if __init_symbol(&_LLVMInitializeTarget__funptr,"LLVMInitializeTarget") > 0:
        pass
    (<void (*)(LLVMPassRegistryRef) noexcept nogil> _LLVMInitializeTarget__funptr)(R)
