# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

cimport rocm.llvm._util.posixloader as loader
cdef void* _lib_handle = NULL

DLL = "librocmllvm.so"

cdef void __init():
    global DLL
    global _lib_handle
    if not isinstance(DLL,str):
        raise RuntimeError(f"'DLL' must be of type `str`")
    if _lib_handle == NULL:
        _lib_handle = loader.open_library(DLL.encode("utf-8"))

cdef void __init_symbol(void** result, const char* name):
    global _lib_handle
    if _lib_handle == NULL:
        __init()
    if result[0] == NULL:
        result[0] = loader.load_symbol(_lib_handle, name)


cdef void* _LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager__funptr = NULL
# 
# Create a RTDyldObjectLinkingLayer instance using the standard
# SectionMemoryManager for memory management.
cdef LLVMOrcObjectLayerRef LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager(LLVMOrcExecutionSessionRef ES):
    global _LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager__funptr
    __init_symbol(&_LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager__funptr,"LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager")
    with nogil:
        return (<LLVMOrcObjectLayerRef (*)(LLVMOrcExecutionSessionRef) noexcept nogil> _LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager__funptr)(ES)


cdef void* _LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks__funptr = NULL
# 
# Create a RTDyldObjectLinkingLayer instance using MCJIT-memory-manager-like
# callbacks.
# 
# This is intended to simplify transitions for existing MCJIT clients. The
# callbacks used are similar (but not identical) to the callbacks for
# LLVMCreateSimpleMCJITMemoryManager: Unlike MCJIT, RTDyldObjectLinkingLayer
# will create a new memory manager for each object linked by calling the given
# CreateContext callback. This allows for code removal by destroying each
# allocator individually. Every allocator will be destroyed (if it has not been
# already) at RTDyldObjectLinkingLayer destruction time, and the
# NotifyTerminating callback will be called to indicate that no further
# allocation contexts will be created.
# 
# To implement MCJIT-like behavior clients can implement CreateContext,
# NotifyTerminating, and Destroy as:
# 
#   void *CreateContext(void *CtxCtx) { return CtxCtx; }
#   void NotifyTerminating(void *CtxCtx) { MyOriginalDestroy(CtxCtx); }
#   void Destroy(void *Ctx) { }
# 
# This scheme simply reuses the CreateContextCtx pointer as the one-and-only
# allocation context.
cdef LLVMOrcObjectLayerRef LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks(LLVMOrcExecutionSessionRef ES,void * CreateContextCtx,LLVMMemoryManagerCreateContextCallback CreateContext,LLVMMemoryManagerNotifyTerminatingCallback NotifyTerminating,LLVMMemoryManagerAllocateCodeSectionCallback AllocateCodeSection,LLVMMemoryManagerAllocateDataSectionCallback AllocateDataSection,LLVMMemoryManagerFinalizeMemoryCallback FinalizeMemory,LLVMMemoryManagerDestroyCallback Destroy):
    global _LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks__funptr
    __init_symbol(&_LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks__funptr,"LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks")
    with nogil:
        return (<LLVMOrcObjectLayerRef (*)(LLVMOrcExecutionSessionRef,void *,LLVMMemoryManagerCreateContextCallback,LLVMMemoryManagerNotifyTerminatingCallback,LLVMMemoryManagerAllocateCodeSectionCallback,LLVMMemoryManagerAllocateDataSectionCallback,LLVMMemoryManagerFinalizeMemoryCallback,LLVMMemoryManagerDestroyCallback) noexcept nogil> _LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks__funptr)(ES,CreateContextCtx,CreateContext,NotifyTerminating,AllocateCodeSection,AllocateDataSection,FinalizeMemory,Destroy)


cdef void* _LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener__funptr = NULL
# 
# Add the given listener to the given RTDyldObjectLinkingLayer.
# 
# Note: Layer must be an RTDyldObjectLinkingLayer instance or
# behavior is undefined.
cdef void LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener(LLVMOrcObjectLayerRef RTDyldObjLinkingLayer,LLVMJITEventListenerRef Listener):
    global _LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener__funptr
    __init_symbol(&_LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener__funptr,"LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener")
    with nogil:
        (<void (*)(LLVMOrcObjectLayerRef,LLVMJITEventListenerRef) noexcept nogil> _LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener__funptr)(RTDyldObjLinkingLayer,Listener)
