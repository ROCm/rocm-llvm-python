# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

cimport hip._util.posixloader as loader
cdef void* _lib_handle = NULL

cdef void __init() nogil:
    global _lib_handle
    if _lib_handle == NULL:
        with gil:
            _lib_handle = loader.open_library("librocmllvm.so")

cdef void __init_symbol(void** result, const char* name) nogil:
    global _lib_handle
    if _lib_handle == NULL:
        __init()
    if result[0] == NULL:
        with gil:
            result[0] = loader.load_symbol(_lib_handle, name) 


cdef void* _LLVMDebugMetadataVersion__funptr = NULL
# 
# The current debug metadata version number.
cdef unsigned int LLVMDebugMetadataVersion() nogil:
    global _LLVMDebugMetadataVersion__funptr
    __init_symbol(&_LLVMDebugMetadataVersion__funptr,"LLVMDebugMetadataVersion")
    return (<unsigned int (*)() nogil> _LLVMDebugMetadataVersion__funptr)()


cdef void* _LLVMGetModuleDebugMetadataVersion__funptr = NULL
# 
# The version of debug metadata that's present in the provided \c Module.
cdef unsigned int LLVMGetModuleDebugMetadataVersion(LLVMModuleRef Module) nogil:
    global _LLVMGetModuleDebugMetadataVersion__funptr
    __init_symbol(&_LLVMGetModuleDebugMetadataVersion__funptr,"LLVMGetModuleDebugMetadataVersion")
    return (<unsigned int (*)(LLVMModuleRef) nogil> _LLVMGetModuleDebugMetadataVersion__funptr)(Module)


cdef void* _LLVMStripModuleDebugInfo__funptr = NULL
# 
# Strip debug info in the module if it exists.
# To do this, we remove all calls to the debugger intrinsics and any named
# metadata for debugging. We also remove debug locations for instructions.
# Return true if module is modified.
cdef int LLVMStripModuleDebugInfo(LLVMModuleRef Module) nogil:
    global _LLVMStripModuleDebugInfo__funptr
    __init_symbol(&_LLVMStripModuleDebugInfo__funptr,"LLVMStripModuleDebugInfo")
    return (<int (*)(LLVMModuleRef) nogil> _LLVMStripModuleDebugInfo__funptr)(Module)


cdef void* _LLVMCreateDIBuilderDisallowUnresolved__funptr = NULL
# 
# Construct a builder for a module, and do not allow for unresolved nodes
# attached to the module.
cdef LLVMDIBuilderRef LLVMCreateDIBuilderDisallowUnresolved(LLVMModuleRef M) nogil:
    global _LLVMCreateDIBuilderDisallowUnresolved__funptr
    __init_symbol(&_LLVMCreateDIBuilderDisallowUnresolved__funptr,"LLVMCreateDIBuilderDisallowUnresolved")
    return (<LLVMDIBuilderRef (*)(LLVMModuleRef) nogil> _LLVMCreateDIBuilderDisallowUnresolved__funptr)(M)


cdef void* _LLVMCreateDIBuilder__funptr = NULL
# 
# Construct a builder for a module and collect unresolved nodes attached
# to the module in order to resolve cycles during a call to
# \c LLVMDIBuilderFinalize.
cdef LLVMDIBuilderRef LLVMCreateDIBuilder(LLVMModuleRef M) nogil:
    global _LLVMCreateDIBuilder__funptr
    __init_symbol(&_LLVMCreateDIBuilder__funptr,"LLVMCreateDIBuilder")
    return (<LLVMDIBuilderRef (*)(LLVMModuleRef) nogil> _LLVMCreateDIBuilder__funptr)(M)


cdef void* _LLVMDisposeDIBuilder__funptr = NULL
# 
# Deallocates the \c DIBuilder and everything it owns.
# @note You must call \c LLVMDIBuilderFinalize before this
cdef void LLVMDisposeDIBuilder(LLVMDIBuilderRef Builder) nogil:
    global _LLVMDisposeDIBuilder__funptr
    __init_symbol(&_LLVMDisposeDIBuilder__funptr,"LLVMDisposeDIBuilder")
    return (<void (*)(LLVMDIBuilderRef) nogil> _LLVMDisposeDIBuilder__funptr)(Builder)


cdef void* _LLVMDIBuilderFinalize__funptr = NULL
# 
# Construct any deferred debug info descriptors.
cdef void LLVMDIBuilderFinalize(LLVMDIBuilderRef Builder) nogil:
    global _LLVMDIBuilderFinalize__funptr
    __init_symbol(&_LLVMDIBuilderFinalize__funptr,"LLVMDIBuilderFinalize")
    return (<void (*)(LLVMDIBuilderRef) nogil> _LLVMDIBuilderFinalize__funptr)(Builder)


cdef void* _LLVMDIBuilderFinalizeSubprogram__funptr = NULL
# 
# Finalize a specific subprogram.
# No new variables may be added to this subprogram afterwards.
cdef void LLVMDIBuilderFinalizeSubprogram(LLVMDIBuilderRef Builder,LLVMMetadataRef Subprogram) nogil:
    global _LLVMDIBuilderFinalizeSubprogram__funptr
    __init_symbol(&_LLVMDIBuilderFinalizeSubprogram__funptr,"LLVMDIBuilderFinalizeSubprogram")
    return (<void (*)(LLVMDIBuilderRef,LLVMMetadataRef) nogil> _LLVMDIBuilderFinalizeSubprogram__funptr)(Builder,Subprogram)


cdef void* _LLVMDIBuilderCreateCompileUnit__funptr = NULL
# 
# A CompileUnit provides an anchor for all debugging
# information generated during this instance of compilation.
# \param Lang          Source programming language, eg.
#                      \c LLVMDWARFSourceLanguageC99
# \param FileRef       File info.
# \param Producer      Identify the producer of debugging information
#                      and code.  Usually this is a compiler
#                      version string.
# \param ProducerLen   The length of the C string passed to \c Producer.
# \param isOptimized   A boolean flag which indicates whether optimization
#                      is enabled or not.
# \param Flags         This string lists command line options. This
#                      string is directly embedded in debug info
#                      output which may be used by a tool
#                      analyzing generated debugging information.
# \param FlagsLen      The length of the C string passed to \c Flags.
# \param RuntimeVer    This indicates runtime version for languages like
#                      Objective-C.
# \param SplitName     The name of the file that we'll split debug info
#                      out into.
# \param SplitNameLen  The length of the C string passed to \c SplitName.
# \param Kind          The kind of debug information to generate.
# \param DWOId         The DWOId if this is a split skeleton compile unit.
# \param SplitDebugInlining    Whether to emit inline debug info.
# \param DebugInfoForProfiling Whether to emit extra debug info for
#                              profile collection.
# \param SysRoot         The Clang system root (value of -isysroot).
# \param SysRootLen      The length of the C string passed to \c SysRoot.
# \param SDK           The SDK. On Darwin, the last component of the sysroot.
# \param SDKLen        The length of the C string passed to \c SDK.
cdef LLVMMetadataRef LLVMDIBuilderCreateCompileUnit(LLVMDIBuilderRef Builder,LLVMDWARFSourceLanguage Lang,LLVMMetadataRef FileRef,const char * Producer,unsigned long ProducerLen,int isOptimized,const char * Flags,unsigned long FlagsLen,unsigned int RuntimeVer,const char * SplitName,unsigned long SplitNameLen,LLVMDWARFEmissionKind Kind,unsigned int DWOId,int SplitDebugInlining,int DebugInfoForProfiling,const char * SysRoot,unsigned long SysRootLen,const char * SDK,unsigned long SDKLen) nogil:
    global _LLVMDIBuilderCreateCompileUnit__funptr
    __init_symbol(&_LLVMDIBuilderCreateCompileUnit__funptr,"LLVMDIBuilderCreateCompileUnit")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMDWARFSourceLanguage,LLVMMetadataRef,const char *,unsigned long,int,const char *,unsigned long,unsigned int,const char *,unsigned long,LLVMDWARFEmissionKind,unsigned int,int,int,const char *,unsigned long,const char *,unsigned long) nogil> _LLVMDIBuilderCreateCompileUnit__funptr)(Builder,Lang,FileRef,Producer,ProducerLen,isOptimized,Flags,FlagsLen,RuntimeVer,SplitName,SplitNameLen,Kind,DWOId,SplitDebugInlining,DebugInfoForProfiling,SysRoot,SysRootLen,SDK,SDKLen)


cdef void* _LLVMDIBuilderCreateFile__funptr = NULL
# 
# Create a file descriptor to hold debugging information for a file.
# \param Builder      The \c DIBuilder.
# \param Filename     File name.
# \param FilenameLen  The length of the C string passed to \c Filename.
# \param Directory    Directory.
# \param DirectoryLen The length of the C string passed to \c Directory.
cdef LLVMMetadataRef LLVMDIBuilderCreateFile(LLVMDIBuilderRef Builder,const char * Filename,unsigned long FilenameLen,const char * Directory,unsigned long DirectoryLen) nogil:
    global _LLVMDIBuilderCreateFile__funptr
    __init_symbol(&_LLVMDIBuilderCreateFile__funptr,"LLVMDIBuilderCreateFile")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,const char *,unsigned long,const char *,unsigned long) nogil> _LLVMDIBuilderCreateFile__funptr)(Builder,Filename,FilenameLen,Directory,DirectoryLen)


cdef void* _LLVMDIBuilderCreateModule__funptr = NULL
# 
# Creates a new descriptor for a module with the specified parent scope.
# \param Builder         The \c DIBuilder.
# \param ParentScope     The parent scope containing this module declaration.
# \param Name            Module name.
# \param NameLen         The length of the C string passed to \c Name.
# \param ConfigMacros    A space-separated shell-quoted list of -D macro
#                        definitions as they would appear on a command line.
# \param ConfigMacrosLen The length of the C string passed to \c ConfigMacros.
# \param IncludePath     The path to the module map file.
# \param IncludePathLen  The length of the C string passed to \c IncludePath.
# \param APINotesFile    The path to an API notes file for the module.
# \param APINotesFileLen The length of the C string passed to \c APINotestFile.
cdef LLVMMetadataRef LLVMDIBuilderCreateModule(LLVMDIBuilderRef Builder,LLVMMetadataRef ParentScope,const char * Name,unsigned long NameLen,const char * ConfigMacros,unsigned long ConfigMacrosLen,const char * IncludePath,unsigned long IncludePathLen,const char * APINotesFile,unsigned long APINotesFileLen) nogil:
    global _LLVMDIBuilderCreateModule__funptr
    __init_symbol(&_LLVMDIBuilderCreateModule__funptr,"LLVMDIBuilderCreateModule")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,const char *,unsigned long,const char *,unsigned long,const char *,unsigned long,const char *,unsigned long) nogil> _LLVMDIBuilderCreateModule__funptr)(Builder,ParentScope,Name,NameLen,ConfigMacros,ConfigMacrosLen,IncludePath,IncludePathLen,APINotesFile,APINotesFileLen)


cdef void* _LLVMDIBuilderCreateNameSpace__funptr = NULL
# 
# Creates a new descriptor for a namespace with the specified parent scope.
# \param Builder          The \c DIBuilder.
# \param ParentScope      The parent scope containing this module declaration.
# \param Name             NameSpace name.
# \param NameLen          The length of the C string passed to \c Name.
# \param ExportSymbols    Whether or not the namespace exports symbols, e.g.
#                         this is true of C++ inline namespaces.
cdef LLVMMetadataRef LLVMDIBuilderCreateNameSpace(LLVMDIBuilderRef Builder,LLVMMetadataRef ParentScope,const char * Name,unsigned long NameLen,int ExportSymbols) nogil:
    global _LLVMDIBuilderCreateNameSpace__funptr
    __init_symbol(&_LLVMDIBuilderCreateNameSpace__funptr,"LLVMDIBuilderCreateNameSpace")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,const char *,unsigned long,int) nogil> _LLVMDIBuilderCreateNameSpace__funptr)(Builder,ParentScope,Name,NameLen,ExportSymbols)


cdef void* _LLVMDIBuilderCreateFunction__funptr = NULL
# 
# Create a new descriptor for the specified subprogram.
# \param Builder         The \c DIBuilder.
# \param Scope           Function scope.
# \param Name            Function name.
# \param NameLen         Length of enumeration name.
# \param LinkageName     Mangled function name.
# \param LinkageNameLen  Length of linkage name.
# \param File            File where this variable is defined.
# \param LineNo          Line number.
# \param Ty              Function type.
# \param IsLocalToUnit   True if this function is not externally visible.
# \param IsDefinition    True if this is a function definition.
# \param ScopeLine       Set to the beginning of the scope this starts
# \param Flags           E.g.: \c LLVMDIFlagLValueReference. These flags are
#                        used to emit dwarf attributes.
# \param IsOptimized     True if optimization is ON.
cdef LLVMMetadataRef LLVMDIBuilderCreateFunction(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,const char * Name,unsigned long NameLen,const char * LinkageName,unsigned long LinkageNameLen,LLVMMetadataRef File,unsigned int LineNo,LLVMMetadataRef Ty,int IsLocalToUnit,int IsDefinition,unsigned int ScopeLine,LLVMDIFlags Flags,int IsOptimized) nogil:
    global _LLVMDIBuilderCreateFunction__funptr
    __init_symbol(&_LLVMDIBuilderCreateFunction__funptr,"LLVMDIBuilderCreateFunction")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,const char *,unsigned long,const char *,unsigned long,LLVMMetadataRef,unsigned int,LLVMMetadataRef,int,int,unsigned int,LLVMDIFlags,int) nogil> _LLVMDIBuilderCreateFunction__funptr)(Builder,Scope,Name,NameLen,LinkageName,LinkageNameLen,File,LineNo,Ty,IsLocalToUnit,IsDefinition,ScopeLine,Flags,IsOptimized)


cdef void* _LLVMDIBuilderCreateLexicalBlock__funptr = NULL
# 
# Create a descriptor for a lexical block with the specified parent context.
# \param Builder      The \c DIBuilder.
# \param Scope        Parent lexical block.
# \param File         Source file.
# \param Line         The line in the source file.
# \param Column       The column in the source file.
cdef LLVMMetadataRef LLVMDIBuilderCreateLexicalBlock(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,LLVMMetadataRef File,unsigned int Line,unsigned int Column) nogil:
    global _LLVMDIBuilderCreateLexicalBlock__funptr
    __init_symbol(&_LLVMDIBuilderCreateLexicalBlock__funptr,"LLVMDIBuilderCreateLexicalBlock")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,LLVMMetadataRef,unsigned int,unsigned int) nogil> _LLVMDIBuilderCreateLexicalBlock__funptr)(Builder,Scope,File,Line,Column)


cdef void* _LLVMDIBuilderCreateLexicalBlockFile__funptr = NULL
# 
# Create a descriptor for a lexical block with a new file attached.
# \param Builder        The \c DIBuilder.
# \param Scope          Lexical block.
# \param File           Source file.
# \param Discriminator  DWARF path discriminator value.
cdef LLVMMetadataRef LLVMDIBuilderCreateLexicalBlockFile(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,LLVMMetadataRef File,unsigned int Discriminator) nogil:
    global _LLVMDIBuilderCreateLexicalBlockFile__funptr
    __init_symbol(&_LLVMDIBuilderCreateLexicalBlockFile__funptr,"LLVMDIBuilderCreateLexicalBlockFile")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,LLVMMetadataRef,unsigned int) nogil> _LLVMDIBuilderCreateLexicalBlockFile__funptr)(Builder,Scope,File,Discriminator)


cdef void* _LLVMDIBuilderCreateImportedModuleFromNamespace__funptr = NULL
# 
# Create a descriptor for an imported namespace. Suitable for e.g. C++
# using declarations.
# \param Builder    The \c DIBuilder.
# \param Scope      The scope this module is imported into
# \param File       File where the declaration is located.
# \param Line       Line number of the declaration.
cdef LLVMMetadataRef LLVMDIBuilderCreateImportedModuleFromNamespace(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,LLVMMetadataRef NS,LLVMMetadataRef File,unsigned int Line) nogil:
    global _LLVMDIBuilderCreateImportedModuleFromNamespace__funptr
    __init_symbol(&_LLVMDIBuilderCreateImportedModuleFromNamespace__funptr,"LLVMDIBuilderCreateImportedModuleFromNamespace")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,LLVMMetadataRef,LLVMMetadataRef,unsigned int) nogil> _LLVMDIBuilderCreateImportedModuleFromNamespace__funptr)(Builder,Scope,NS,File,Line)


cdef void* _LLVMDIBuilderCreateImportedModuleFromAlias__funptr = NULL
# 
# Create a descriptor for an imported module that aliases another
# imported entity descriptor.
# \param Builder        The \c DIBuilder.
# \param Scope          The scope this module is imported into
# \param ImportedEntity Previous imported entity to alias.
# \param File           File where the declaration is located.
# \param Line           Line number of the declaration.
# \param Elements       Renamed elements.
# \param NumElements    Number of renamed elements.
cdef LLVMMetadataRef LLVMDIBuilderCreateImportedModuleFromAlias(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,LLVMMetadataRef ImportedEntity,LLVMMetadataRef File,unsigned int Line,LLVMMetadataRef* Elements,unsigned int NumElements) nogil:
    global _LLVMDIBuilderCreateImportedModuleFromAlias__funptr
    __init_symbol(&_LLVMDIBuilderCreateImportedModuleFromAlias__funptr,"LLVMDIBuilderCreateImportedModuleFromAlias")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,LLVMMetadataRef,LLVMMetadataRef,unsigned int,LLVMMetadataRef*,unsigned int) nogil> _LLVMDIBuilderCreateImportedModuleFromAlias__funptr)(Builder,Scope,ImportedEntity,File,Line,Elements,NumElements)


cdef void* _LLVMDIBuilderCreateImportedModuleFromModule__funptr = NULL
# 
# Create a descriptor for an imported module.
# \param Builder        The \c DIBuilder.
# \param Scope          The scope this module is imported into
# \param M              The module being imported here
# \param File           File where the declaration is located.
# \param Line           Line number of the declaration.
# \param Elements       Renamed elements.
# \param NumElements    Number of renamed elements.
cdef LLVMMetadataRef LLVMDIBuilderCreateImportedModuleFromModule(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,LLVMMetadataRef M,LLVMMetadataRef File,unsigned int Line,LLVMMetadataRef* Elements,unsigned int NumElements) nogil:
    global _LLVMDIBuilderCreateImportedModuleFromModule__funptr
    __init_symbol(&_LLVMDIBuilderCreateImportedModuleFromModule__funptr,"LLVMDIBuilderCreateImportedModuleFromModule")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,LLVMMetadataRef,LLVMMetadataRef,unsigned int,LLVMMetadataRef*,unsigned int) nogil> _LLVMDIBuilderCreateImportedModuleFromModule__funptr)(Builder,Scope,M,File,Line,Elements,NumElements)


cdef void* _LLVMDIBuilderCreateImportedDeclaration__funptr = NULL
# 
#   Create a descriptor for an imported function, type, or variable.  Suitable
#   for e.g. FORTRAN-style USE declarations.
#   \param Builder        The DIBuilder.
#   \param Scope          The scope this module is imported into.
#   \param Decl           The declaration (or definition) of a function, type,
#                         or variable.
#   \param File           File where the declaration is located.
#   \param Line           Line number of the declaration.
#   \param Name           A name that uniquely identifies this imported
# declaration.
#   \param NameLen        The length of the C string passed to \c Name.
#   \param Elements       Renamed elements.
#   \param NumElements    Number of renamed elements.
cdef LLVMMetadataRef LLVMDIBuilderCreateImportedDeclaration(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,LLVMMetadataRef Decl,LLVMMetadataRef File,unsigned int Line,const char * Name,unsigned long NameLen,LLVMMetadataRef* Elements,unsigned int NumElements) nogil:
    global _LLVMDIBuilderCreateImportedDeclaration__funptr
    __init_symbol(&_LLVMDIBuilderCreateImportedDeclaration__funptr,"LLVMDIBuilderCreateImportedDeclaration")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,LLVMMetadataRef,LLVMMetadataRef,unsigned int,const char *,unsigned long,LLVMMetadataRef*,unsigned int) nogil> _LLVMDIBuilderCreateImportedDeclaration__funptr)(Builder,Scope,Decl,File,Line,Name,NameLen,Elements,NumElements)


cdef void* _LLVMDIBuilderCreateDebugLocation__funptr = NULL
# 
# Creates a new DebugLocation that describes a source location.
# \param Line The line in the source file.
# \param Column The column in the source file.
# \param Scope The scope in which the location resides.
# \param InlinedAt The scope where this location was inlined, if at all.
#                  (optional).
# \note If the item to which this location is attached cannot be
#       attributed to a source line, pass 0 for the line and column.
cdef LLVMMetadataRef LLVMDIBuilderCreateDebugLocation(LLVMContextRef Ctx,unsigned int Line,unsigned int Column,LLVMMetadataRef Scope,LLVMMetadataRef InlinedAt) nogil:
    global _LLVMDIBuilderCreateDebugLocation__funptr
    __init_symbol(&_LLVMDIBuilderCreateDebugLocation__funptr,"LLVMDIBuilderCreateDebugLocation")
    return (<LLVMMetadataRef (*)(LLVMContextRef,unsigned int,unsigned int,LLVMMetadataRef,LLVMMetadataRef) nogil> _LLVMDIBuilderCreateDebugLocation__funptr)(Ctx,Line,Column,Scope,InlinedAt)


cdef void* _LLVMDILocationGetLine__funptr = NULL
# 
# Get the line number of this debug location.
# \param Location     The debug location.
# 
# @see DILocation::getLine()
cdef unsigned int LLVMDILocationGetLine(LLVMMetadataRef Location) nogil:
    global _LLVMDILocationGetLine__funptr
    __init_symbol(&_LLVMDILocationGetLine__funptr,"LLVMDILocationGetLine")
    return (<unsigned int (*)(LLVMMetadataRef) nogil> _LLVMDILocationGetLine__funptr)(Location)


cdef void* _LLVMDILocationGetColumn__funptr = NULL
# 
# Get the column number of this debug location.
# \param Location     The debug location.
# 
# @see DILocation::getColumn()
cdef unsigned int LLVMDILocationGetColumn(LLVMMetadataRef Location) nogil:
    global _LLVMDILocationGetColumn__funptr
    __init_symbol(&_LLVMDILocationGetColumn__funptr,"LLVMDILocationGetColumn")
    return (<unsigned int (*)(LLVMMetadataRef) nogil> _LLVMDILocationGetColumn__funptr)(Location)


cdef void* _LLVMDILocationGetScope__funptr = NULL
# 
# Get the local scope associated with this debug location.
# \param Location     The debug location.
# 
# @see DILocation::getScope()
cdef LLVMMetadataRef LLVMDILocationGetScope(LLVMMetadataRef Location) nogil:
    global _LLVMDILocationGetScope__funptr
    __init_symbol(&_LLVMDILocationGetScope__funptr,"LLVMDILocationGetScope")
    return (<LLVMMetadataRef (*)(LLVMMetadataRef) nogil> _LLVMDILocationGetScope__funptr)(Location)


cdef void* _LLVMDILocationGetInlinedAt__funptr = NULL
# 
# Get the "inline at" location associated with this debug location.
# \param Location     The debug location.
# 
# @see DILocation::getInlinedAt()
cdef LLVMMetadataRef LLVMDILocationGetInlinedAt(LLVMMetadataRef Location) nogil:
    global _LLVMDILocationGetInlinedAt__funptr
    __init_symbol(&_LLVMDILocationGetInlinedAt__funptr,"LLVMDILocationGetInlinedAt")
    return (<LLVMMetadataRef (*)(LLVMMetadataRef) nogil> _LLVMDILocationGetInlinedAt__funptr)(Location)


cdef void* _LLVMDIScopeGetFile__funptr = NULL
# 
# Get the metadata of the file associated with a given scope.
# \param Scope     The scope object.
# 
# @see DIScope::getFile()
cdef LLVMMetadataRef LLVMDIScopeGetFile(LLVMMetadataRef Scope) nogil:
    global _LLVMDIScopeGetFile__funptr
    __init_symbol(&_LLVMDIScopeGetFile__funptr,"LLVMDIScopeGetFile")
    return (<LLVMMetadataRef (*)(LLVMMetadataRef) nogil> _LLVMDIScopeGetFile__funptr)(Scope)


cdef void* _LLVMDIFileGetDirectory__funptr = NULL
# 
# Get the directory of a given file.
# \param File     The file object.
# \param Len      The length of the returned string.
# 
# @see DIFile::getDirectory()
cdef const char * LLVMDIFileGetDirectory(LLVMMetadataRef File,unsigned int * Len) nogil:
    global _LLVMDIFileGetDirectory__funptr
    __init_symbol(&_LLVMDIFileGetDirectory__funptr,"LLVMDIFileGetDirectory")
    return (<const char * (*)(LLVMMetadataRef,unsigned int *) nogil> _LLVMDIFileGetDirectory__funptr)(File,Len)


cdef void* _LLVMDIFileGetFilename__funptr = NULL
# 
# Get the name of a given file.
# \param File     The file object.
# \param Len      The length of the returned string.
# 
# @see DIFile::getFilename()
cdef const char * LLVMDIFileGetFilename(LLVMMetadataRef File,unsigned int * Len) nogil:
    global _LLVMDIFileGetFilename__funptr
    __init_symbol(&_LLVMDIFileGetFilename__funptr,"LLVMDIFileGetFilename")
    return (<const char * (*)(LLVMMetadataRef,unsigned int *) nogil> _LLVMDIFileGetFilename__funptr)(File,Len)


cdef void* _LLVMDIFileGetSource__funptr = NULL
# 
# Get the source of a given file.
# \param File     The file object.
# \param Len      The length of the returned string.
# 
# @see DIFile::getSource()
cdef const char * LLVMDIFileGetSource(LLVMMetadataRef File,unsigned int * Len) nogil:
    global _LLVMDIFileGetSource__funptr
    __init_symbol(&_LLVMDIFileGetSource__funptr,"LLVMDIFileGetSource")
    return (<const char * (*)(LLVMMetadataRef,unsigned int *) nogil> _LLVMDIFileGetSource__funptr)(File,Len)


cdef void* _LLVMDIBuilderGetOrCreateTypeArray__funptr = NULL
# 
# Create a type array.
# \param Builder        The DIBuilder.
# \param Data           The type elements.
# \param NumElements    Number of type elements.
cdef LLVMMetadataRef LLVMDIBuilderGetOrCreateTypeArray(LLVMDIBuilderRef Builder,LLVMMetadataRef* Data,unsigned long NumElements) nogil:
    global _LLVMDIBuilderGetOrCreateTypeArray__funptr
    __init_symbol(&_LLVMDIBuilderGetOrCreateTypeArray__funptr,"LLVMDIBuilderGetOrCreateTypeArray")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef*,unsigned long) nogil> _LLVMDIBuilderGetOrCreateTypeArray__funptr)(Builder,Data,NumElements)


cdef void* _LLVMDIBuilderCreateSubroutineType__funptr = NULL
# 
# Create subroutine type.
# \param Builder        The DIBuilder.
# \param File            The file in which the subroutine resides.
# \param ParameterTypes  An array of subroutine parameter types. This
#                        includes return type at 0th index.
# \param NumParameterTypes The number of parameter types in \c ParameterTypes
# \param Flags           E.g.: \c LLVMDIFlagLValueReference.
#                        These flags are used to emit dwarf attributes.
cdef LLVMMetadataRef LLVMDIBuilderCreateSubroutineType(LLVMDIBuilderRef Builder,LLVMMetadataRef File,LLVMMetadataRef* ParameterTypes,unsigned int NumParameterTypes,LLVMDIFlags Flags) nogil:
    global _LLVMDIBuilderCreateSubroutineType__funptr
    __init_symbol(&_LLVMDIBuilderCreateSubroutineType__funptr,"LLVMDIBuilderCreateSubroutineType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,LLVMMetadataRef*,unsigned int,LLVMDIFlags) nogil> _LLVMDIBuilderCreateSubroutineType__funptr)(Builder,File,ParameterTypes,NumParameterTypes,Flags)


cdef void* _LLVMDIBuilderCreateMacro__funptr = NULL
# 
# Create debugging information entry for a macro.
# @param Builder         The DIBuilder.
# @param ParentMacroFile Macro parent (could be NULL).
# @param Line            Source line number where the macro is defined.
# @param RecordType      DW_MACINFO_define or DW_MACINFO_undef.
# @param Name            Macro name.
# @param NameLen         Macro name length.
# @param Value           Macro value.
# @param ValueLen        Macro value length.
cdef LLVMMetadataRef LLVMDIBuilderCreateMacro(LLVMDIBuilderRef Builder,LLVMMetadataRef ParentMacroFile,unsigned int Line,LLVMDWARFMacinfoRecordType RecordType,const char * Name,unsigned long NameLen,const char * Value,unsigned long ValueLen) nogil:
    global _LLVMDIBuilderCreateMacro__funptr
    __init_symbol(&_LLVMDIBuilderCreateMacro__funptr,"LLVMDIBuilderCreateMacro")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,unsigned int,LLVMDWARFMacinfoRecordType,const char *,unsigned long,const char *,unsigned long) nogil> _LLVMDIBuilderCreateMacro__funptr)(Builder,ParentMacroFile,Line,RecordType,Name,NameLen,Value,ValueLen)


cdef void* _LLVMDIBuilderCreateTempMacroFile__funptr = NULL
# 
# Create debugging information temporary entry for a macro file.
# List of macro node direct children will be calculated by DIBuilder,
# using the \p ParentMacroFile relationship.
# @param Builder         The DIBuilder.
# @param ParentMacroFile Macro parent (could be NULL).
# @param Line            Source line number where the macro file is included.
# @param File            File descriptor containing the name of the macro file.
cdef LLVMMetadataRef LLVMDIBuilderCreateTempMacroFile(LLVMDIBuilderRef Builder,LLVMMetadataRef ParentMacroFile,unsigned int Line,LLVMMetadataRef File) nogil:
    global _LLVMDIBuilderCreateTempMacroFile__funptr
    __init_symbol(&_LLVMDIBuilderCreateTempMacroFile__funptr,"LLVMDIBuilderCreateTempMacroFile")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,unsigned int,LLVMMetadataRef) nogil> _LLVMDIBuilderCreateTempMacroFile__funptr)(Builder,ParentMacroFile,Line,File)


cdef void* _LLVMDIBuilderCreateEnumerator__funptr = NULL
# 
# Create debugging information entry for an enumerator.
# @param Builder        The DIBuilder.
# @param Name           Enumerator name.
# @param NameLen        Length of enumerator name.
# @param Value          Enumerator value.
# @param IsUnsigned     True if the value is unsigned.
cdef LLVMMetadataRef LLVMDIBuilderCreateEnumerator(LLVMDIBuilderRef Builder,const char * Name,unsigned long NameLen,long Value,int IsUnsigned) nogil:
    global _LLVMDIBuilderCreateEnumerator__funptr
    __init_symbol(&_LLVMDIBuilderCreateEnumerator__funptr,"LLVMDIBuilderCreateEnumerator")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,const char *,unsigned long,long,int) nogil> _LLVMDIBuilderCreateEnumerator__funptr)(Builder,Name,NameLen,Value,IsUnsigned)


cdef void* _LLVMDIBuilderCreateEnumerationType__funptr = NULL
# 
# Create debugging information entry for an enumeration.
# \param Builder        The DIBuilder.
# \param Scope          Scope in which this enumeration is defined.
# \param Name           Enumeration name.
# \param NameLen        Length of enumeration name.
# \param File           File where this member is defined.
# \param LineNumber     Line number.
# \param SizeInBits     Member size.
# \param AlignInBits    Member alignment.
# \param Elements       Enumeration elements.
# \param NumElements    Number of enumeration elements.
# \param ClassTy        Underlying type of a C++11/ObjC fixed enum.
cdef LLVMMetadataRef LLVMDIBuilderCreateEnumerationType(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,const char * Name,unsigned long NameLen,LLVMMetadataRef File,unsigned int LineNumber,unsigned long SizeInBits,unsigned int AlignInBits,LLVMMetadataRef* Elements,unsigned int NumElements,LLVMMetadataRef ClassTy) nogil:
    global _LLVMDIBuilderCreateEnumerationType__funptr
    __init_symbol(&_LLVMDIBuilderCreateEnumerationType__funptr,"LLVMDIBuilderCreateEnumerationType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,const char *,unsigned long,LLVMMetadataRef,unsigned int,unsigned long,unsigned int,LLVMMetadataRef*,unsigned int,LLVMMetadataRef) nogil> _LLVMDIBuilderCreateEnumerationType__funptr)(Builder,Scope,Name,NameLen,File,LineNumber,SizeInBits,AlignInBits,Elements,NumElements,ClassTy)


cdef void* _LLVMDIBuilderCreateUnionType__funptr = NULL
# 
# Create debugging information entry for a union.
# \param Builder      The DIBuilder.
# \param Scope        Scope in which this union is defined.
# \param Name         Union name.
# \param NameLen      Length of union name.
# \param File         File where this member is defined.
# \param LineNumber   Line number.
# \param SizeInBits   Member size.
# \param AlignInBits  Member alignment.
# \param Flags        Flags to encode member attribute, e.g. private
# \param Elements     Union elements.
# \param NumElements  Number of union elements.
# \param RunTimeLang  Optional parameter, Objective-C runtime version.
# \param UniqueId     A unique identifier for the union.
# \param UniqueIdLen  Length of unique identifier.
cdef LLVMMetadataRef LLVMDIBuilderCreateUnionType(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,const char * Name,unsigned long NameLen,LLVMMetadataRef File,unsigned int LineNumber,unsigned long SizeInBits,unsigned int AlignInBits,LLVMDIFlags Flags,LLVMMetadataRef* Elements,unsigned int NumElements,unsigned int RunTimeLang,const char * UniqueId,unsigned long UniqueIdLen) nogil:
    global _LLVMDIBuilderCreateUnionType__funptr
    __init_symbol(&_LLVMDIBuilderCreateUnionType__funptr,"LLVMDIBuilderCreateUnionType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,const char *,unsigned long,LLVMMetadataRef,unsigned int,unsigned long,unsigned int,LLVMDIFlags,LLVMMetadataRef*,unsigned int,unsigned int,const char *,unsigned long) nogil> _LLVMDIBuilderCreateUnionType__funptr)(Builder,Scope,Name,NameLen,File,LineNumber,SizeInBits,AlignInBits,Flags,Elements,NumElements,RunTimeLang,UniqueId,UniqueIdLen)


cdef void* _LLVMDIBuilderCreateArrayType__funptr = NULL
# 
# Create debugging information entry for an array.
# \param Builder      The DIBuilder.
# \param Size         Array size.
# \param AlignInBits  Alignment.
# \param Ty           Element type.
# \param Subscripts   Subscripts.
# \param NumSubscripts Number of subscripts.
cdef LLVMMetadataRef LLVMDIBuilderCreateArrayType(LLVMDIBuilderRef Builder,unsigned long Size,unsigned int AlignInBits,LLVMMetadataRef Ty,LLVMMetadataRef* Subscripts,unsigned int NumSubscripts) nogil:
    global _LLVMDIBuilderCreateArrayType__funptr
    __init_symbol(&_LLVMDIBuilderCreateArrayType__funptr,"LLVMDIBuilderCreateArrayType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,unsigned long,unsigned int,LLVMMetadataRef,LLVMMetadataRef*,unsigned int) nogil> _LLVMDIBuilderCreateArrayType__funptr)(Builder,Size,AlignInBits,Ty,Subscripts,NumSubscripts)


cdef void* _LLVMDIBuilderCreateVectorType__funptr = NULL
# 
# Create debugging information entry for a vector type.
# \param Builder      The DIBuilder.
# \param Size         Vector size.
# \param AlignInBits  Alignment.
# \param Ty           Element type.
# \param Subscripts   Subscripts.
# \param NumSubscripts Number of subscripts.
cdef LLVMMetadataRef LLVMDIBuilderCreateVectorType(LLVMDIBuilderRef Builder,unsigned long Size,unsigned int AlignInBits,LLVMMetadataRef Ty,LLVMMetadataRef* Subscripts,unsigned int NumSubscripts) nogil:
    global _LLVMDIBuilderCreateVectorType__funptr
    __init_symbol(&_LLVMDIBuilderCreateVectorType__funptr,"LLVMDIBuilderCreateVectorType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,unsigned long,unsigned int,LLVMMetadataRef,LLVMMetadataRef*,unsigned int) nogil> _LLVMDIBuilderCreateVectorType__funptr)(Builder,Size,AlignInBits,Ty,Subscripts,NumSubscripts)


cdef void* _LLVMDIBuilderCreateUnspecifiedType__funptr = NULL
# 
# Create a DWARF unspecified type.
# \param Builder   The DIBuilder.
# \param Name      The unspecified type's name.
# \param NameLen   Length of type name.
cdef LLVMMetadataRef LLVMDIBuilderCreateUnspecifiedType(LLVMDIBuilderRef Builder,const char * Name,unsigned long NameLen) nogil:
    global _LLVMDIBuilderCreateUnspecifiedType__funptr
    __init_symbol(&_LLVMDIBuilderCreateUnspecifiedType__funptr,"LLVMDIBuilderCreateUnspecifiedType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,const char *,unsigned long) nogil> _LLVMDIBuilderCreateUnspecifiedType__funptr)(Builder,Name,NameLen)


cdef void* _LLVMDIBuilderCreateBasicType__funptr = NULL
# 
# Create debugging information entry for a basic
# type.
# \param Builder     The DIBuilder.
# \param Name        Type name.
# \param NameLen     Length of type name.
# \param SizeInBits  Size of the type.
# \param Encoding    DWARF encoding code, e.g. \c LLVMDWARFTypeEncoding_float.
# \param Flags       Flags to encode optional attribute like endianity
cdef LLVMMetadataRef LLVMDIBuilderCreateBasicType(LLVMDIBuilderRef Builder,const char * Name,unsigned long NameLen,unsigned long SizeInBits,unsigned int Encoding,LLVMDIFlags Flags) nogil:
    global _LLVMDIBuilderCreateBasicType__funptr
    __init_symbol(&_LLVMDIBuilderCreateBasicType__funptr,"LLVMDIBuilderCreateBasicType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,const char *,unsigned long,unsigned long,unsigned int,LLVMDIFlags) nogil> _LLVMDIBuilderCreateBasicType__funptr)(Builder,Name,NameLen,SizeInBits,Encoding,Flags)


cdef void* _LLVMDIBuilderCreatePointerType__funptr = NULL
# 
# Create debugging information entry for a pointer.
# \param Builder     The DIBuilder.
# \param PointeeTy         Type pointed by this pointer.
# \param SizeInBits        Size.
# \param AlignInBits       Alignment. (optional, pass 0 to ignore)
# \param AddressSpace      DWARF address space. (optional, pass 0 to ignore)
# \param Name              Pointer type name. (optional)
# \param NameLen           Length of pointer type name. (optional)
cdef LLVMMetadataRef LLVMDIBuilderCreatePointerType(LLVMDIBuilderRef Builder,LLVMMetadataRef PointeeTy,unsigned long SizeInBits,unsigned int AlignInBits,unsigned int AddressSpace,const char * Name,unsigned long NameLen) nogil:
    global _LLVMDIBuilderCreatePointerType__funptr
    __init_symbol(&_LLVMDIBuilderCreatePointerType__funptr,"LLVMDIBuilderCreatePointerType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,unsigned long,unsigned int,unsigned int,const char *,unsigned long) nogil> _LLVMDIBuilderCreatePointerType__funptr)(Builder,PointeeTy,SizeInBits,AlignInBits,AddressSpace,Name,NameLen)


cdef void* _LLVMDIBuilderCreateStructType__funptr = NULL
# 
# Create debugging information entry for a struct.
# \param Builder     The DIBuilder.
# \param Scope        Scope in which this struct is defined.
# \param Name         Struct name.
# \param NameLen      Struct name length.
# \param File         File where this member is defined.
# \param LineNumber   Line number.
# \param SizeInBits   Member size.
# \param AlignInBits  Member alignment.
# \param Flags        Flags to encode member attribute, e.g. private
# \param Elements     Struct elements.
# \param NumElements  Number of struct elements.
# \param RunTimeLang  Optional parameter, Objective-C runtime version.
# \param VTableHolder The object containing the vtable for the struct.
# \param UniqueId     A unique identifier for the struct.
# \param UniqueIdLen  Length of the unique identifier for the struct.
cdef LLVMMetadataRef LLVMDIBuilderCreateStructType(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,const char * Name,unsigned long NameLen,LLVMMetadataRef File,unsigned int LineNumber,unsigned long SizeInBits,unsigned int AlignInBits,LLVMDIFlags Flags,LLVMMetadataRef DerivedFrom,LLVMMetadataRef* Elements,unsigned int NumElements,unsigned int RunTimeLang,LLVMMetadataRef VTableHolder,const char * UniqueId,unsigned long UniqueIdLen) nogil:
    global _LLVMDIBuilderCreateStructType__funptr
    __init_symbol(&_LLVMDIBuilderCreateStructType__funptr,"LLVMDIBuilderCreateStructType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,const char *,unsigned long,LLVMMetadataRef,unsigned int,unsigned long,unsigned int,LLVMDIFlags,LLVMMetadataRef,LLVMMetadataRef*,unsigned int,unsigned int,LLVMMetadataRef,const char *,unsigned long) nogil> _LLVMDIBuilderCreateStructType__funptr)(Builder,Scope,Name,NameLen,File,LineNumber,SizeInBits,AlignInBits,Flags,DerivedFrom,Elements,NumElements,RunTimeLang,VTableHolder,UniqueId,UniqueIdLen)


cdef void* _LLVMDIBuilderCreateMemberType__funptr = NULL
# 
# Create debugging information entry for a member.
# \param Builder      The DIBuilder.
# \param Scope        Member scope.
# \param Name         Member name.
# \param NameLen      Length of member name.
# \param File         File where this member is defined.
# \param LineNo       Line number.
# \param SizeInBits   Member size.
# \param AlignInBits  Member alignment.
# \param OffsetInBits Member offset.
# \param Flags        Flags to encode member attribute, e.g. private
# \param Ty           Parent type.
cdef LLVMMetadataRef LLVMDIBuilderCreateMemberType(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,const char * Name,unsigned long NameLen,LLVMMetadataRef File,unsigned int LineNo,unsigned long SizeInBits,unsigned int AlignInBits,unsigned long OffsetInBits,LLVMDIFlags Flags,LLVMMetadataRef Ty) nogil:
    global _LLVMDIBuilderCreateMemberType__funptr
    __init_symbol(&_LLVMDIBuilderCreateMemberType__funptr,"LLVMDIBuilderCreateMemberType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,const char *,unsigned long,LLVMMetadataRef,unsigned int,unsigned long,unsigned int,unsigned long,LLVMDIFlags,LLVMMetadataRef) nogil> _LLVMDIBuilderCreateMemberType__funptr)(Builder,Scope,Name,NameLen,File,LineNo,SizeInBits,AlignInBits,OffsetInBits,Flags,Ty)


cdef void* _LLVMDIBuilderCreateStaticMemberType__funptr = NULL
# 
# Create debugging information entry for a
# C++ static data member.
# \param Builder      The DIBuilder.
# \param Scope        Member scope.
# \param Name         Member name.
# \param NameLen      Length of member name.
# \param File         File where this member is declared.
# \param LineNumber   Line number.
# \param Type         Type of the static member.
# \param Flags        Flags to encode member attribute, e.g. private.
# \param ConstantVal  Const initializer of the member.
# \param AlignInBits  Member alignment.
cdef LLVMMetadataRef LLVMDIBuilderCreateStaticMemberType(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,const char * Name,unsigned long NameLen,LLVMMetadataRef File,unsigned int LineNumber,LLVMMetadataRef Type,LLVMDIFlags Flags,LLVMValueRef ConstantVal,unsigned int AlignInBits) nogil:
    global _LLVMDIBuilderCreateStaticMemberType__funptr
    __init_symbol(&_LLVMDIBuilderCreateStaticMemberType__funptr,"LLVMDIBuilderCreateStaticMemberType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,const char *,unsigned long,LLVMMetadataRef,unsigned int,LLVMMetadataRef,LLVMDIFlags,LLVMValueRef,unsigned int) nogil> _LLVMDIBuilderCreateStaticMemberType__funptr)(Builder,Scope,Name,NameLen,File,LineNumber,Type,Flags,ConstantVal,AlignInBits)


cdef void* _LLVMDIBuilderCreateMemberPointerType__funptr = NULL
# 
# Create debugging information entry for a pointer to member.
# \param Builder      The DIBuilder.
# \param PointeeType  Type pointed to by this pointer.
# \param ClassType    Type for which this pointer points to members of.
# \param SizeInBits   Size.
# \param AlignInBits  Alignment.
# \param Flags        Flags.
cdef LLVMMetadataRef LLVMDIBuilderCreateMemberPointerType(LLVMDIBuilderRef Builder,LLVMMetadataRef PointeeType,LLVMMetadataRef ClassType,unsigned long SizeInBits,unsigned int AlignInBits,LLVMDIFlags Flags) nogil:
    global _LLVMDIBuilderCreateMemberPointerType__funptr
    __init_symbol(&_LLVMDIBuilderCreateMemberPointerType__funptr,"LLVMDIBuilderCreateMemberPointerType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,LLVMMetadataRef,unsigned long,unsigned int,LLVMDIFlags) nogil> _LLVMDIBuilderCreateMemberPointerType__funptr)(Builder,PointeeType,ClassType,SizeInBits,AlignInBits,Flags)


cdef void* _LLVMDIBuilderCreateObjCIVar__funptr = NULL
# 
# Create debugging information entry for Objective-C instance variable.
# \param Builder      The DIBuilder.
# \param Name         Member name.
# \param NameLen      The length of the C string passed to \c Name.
# \param File         File where this member is defined.
# \param LineNo       Line number.
# \param SizeInBits   Member size.
# \param AlignInBits  Member alignment.
# \param OffsetInBits Member offset.
# \param Flags        Flags to encode member attribute, e.g. private
# \param Ty           Parent type.
# \param PropertyNode Property associated with this ivar.
cdef LLVMMetadataRef LLVMDIBuilderCreateObjCIVar(LLVMDIBuilderRef Builder,const char * Name,unsigned long NameLen,LLVMMetadataRef File,unsigned int LineNo,unsigned long SizeInBits,unsigned int AlignInBits,unsigned long OffsetInBits,LLVMDIFlags Flags,LLVMMetadataRef Ty,LLVMMetadataRef PropertyNode) nogil:
    global _LLVMDIBuilderCreateObjCIVar__funptr
    __init_symbol(&_LLVMDIBuilderCreateObjCIVar__funptr,"LLVMDIBuilderCreateObjCIVar")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,const char *,unsigned long,LLVMMetadataRef,unsigned int,unsigned long,unsigned int,unsigned long,LLVMDIFlags,LLVMMetadataRef,LLVMMetadataRef) nogil> _LLVMDIBuilderCreateObjCIVar__funptr)(Builder,Name,NameLen,File,LineNo,SizeInBits,AlignInBits,OffsetInBits,Flags,Ty,PropertyNode)


cdef void* _LLVMDIBuilderCreateObjCProperty__funptr = NULL
# 
# Create debugging information entry for Objective-C property.
# \param Builder            The DIBuilder.
# \param Name               Property name.
# \param NameLen            The length of the C string passed to \c Name.
# \param File               File where this property is defined.
# \param LineNo             Line number.
# \param GetterName         Name of the Objective C property getter selector.
# \param GetterNameLen      The length of the C string passed to \c GetterName.
# \param SetterName         Name of the Objective C property setter selector.
# \param SetterNameLen      The length of the C string passed to \c SetterName.
# \param PropertyAttributes Objective C property attributes.
# \param Ty                 Type.
cdef LLVMMetadataRef LLVMDIBuilderCreateObjCProperty(LLVMDIBuilderRef Builder,const char * Name,unsigned long NameLen,LLVMMetadataRef File,unsigned int LineNo,const char * GetterName,unsigned long GetterNameLen,const char * SetterName,unsigned long SetterNameLen,unsigned int PropertyAttributes,LLVMMetadataRef Ty) nogil:
    global _LLVMDIBuilderCreateObjCProperty__funptr
    __init_symbol(&_LLVMDIBuilderCreateObjCProperty__funptr,"LLVMDIBuilderCreateObjCProperty")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,const char *,unsigned long,LLVMMetadataRef,unsigned int,const char *,unsigned long,const char *,unsigned long,unsigned int,LLVMMetadataRef) nogil> _LLVMDIBuilderCreateObjCProperty__funptr)(Builder,Name,NameLen,File,LineNo,GetterName,GetterNameLen,SetterName,SetterNameLen,PropertyAttributes,Ty)


cdef void* _LLVMDIBuilderCreateObjectPointerType__funptr = NULL
# 
# Create a uniqued DIType* clone with FlagObjectPointer and FlagArtificial set.
# \param Builder   The DIBuilder.
# \param Type      The underlying type to which this pointer points.
cdef LLVMMetadataRef LLVMDIBuilderCreateObjectPointerType(LLVMDIBuilderRef Builder,LLVMMetadataRef Type) nogil:
    global _LLVMDIBuilderCreateObjectPointerType__funptr
    __init_symbol(&_LLVMDIBuilderCreateObjectPointerType__funptr,"LLVMDIBuilderCreateObjectPointerType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef) nogil> _LLVMDIBuilderCreateObjectPointerType__funptr)(Builder,Type)


cdef void* _LLVMDIBuilderCreateQualifiedType__funptr = NULL
# 
# Create debugging information entry for a qualified
# type, e.g. 'const int'.
# \param Builder     The DIBuilder.
# \param Tag         Tag identifying type,
#                    e.g. LLVMDWARFTypeQualifier_volatile_type
# \param Type        Base Type.
cdef LLVMMetadataRef LLVMDIBuilderCreateQualifiedType(LLVMDIBuilderRef Builder,unsigned int Tag,LLVMMetadataRef Type) nogil:
    global _LLVMDIBuilderCreateQualifiedType__funptr
    __init_symbol(&_LLVMDIBuilderCreateQualifiedType__funptr,"LLVMDIBuilderCreateQualifiedType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,unsigned int,LLVMMetadataRef) nogil> _LLVMDIBuilderCreateQualifiedType__funptr)(Builder,Tag,Type)


cdef void* _LLVMDIBuilderCreateReferenceType__funptr = NULL
# 
# Create debugging information entry for a c++
# style reference or rvalue reference type.
# \param Builder   The DIBuilder.
# \param Tag       Tag identifying type,
# \param Type      Base Type.
cdef LLVMMetadataRef LLVMDIBuilderCreateReferenceType(LLVMDIBuilderRef Builder,unsigned int Tag,LLVMMetadataRef Type) nogil:
    global _LLVMDIBuilderCreateReferenceType__funptr
    __init_symbol(&_LLVMDIBuilderCreateReferenceType__funptr,"LLVMDIBuilderCreateReferenceType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,unsigned int,LLVMMetadataRef) nogil> _LLVMDIBuilderCreateReferenceType__funptr)(Builder,Tag,Type)


cdef void* _LLVMDIBuilderCreateNullPtrType__funptr = NULL
# 
# Create C++11 nullptr type.
# \param Builder   The DIBuilder.
cdef LLVMMetadataRef LLVMDIBuilderCreateNullPtrType(LLVMDIBuilderRef Builder) nogil:
    global _LLVMDIBuilderCreateNullPtrType__funptr
    __init_symbol(&_LLVMDIBuilderCreateNullPtrType__funptr,"LLVMDIBuilderCreateNullPtrType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef) nogil> _LLVMDIBuilderCreateNullPtrType__funptr)(Builder)


cdef void* _LLVMDIBuilderCreateTypedef__funptr = NULL
# 
# Create debugging information entry for a typedef.
# \param Builder    The DIBuilder.
# \param Type       Original type.
# \param Name       Typedef name.
# \param File       File where this type is defined.
# \param LineNo     Line number.
# \param Scope      The surrounding context for the typedef.
cdef LLVMMetadataRef LLVMDIBuilderCreateTypedef(LLVMDIBuilderRef Builder,LLVMMetadataRef Type,const char * Name,unsigned long NameLen,LLVMMetadataRef File,unsigned int LineNo,LLVMMetadataRef Scope,unsigned int AlignInBits) nogil:
    global _LLVMDIBuilderCreateTypedef__funptr
    __init_symbol(&_LLVMDIBuilderCreateTypedef__funptr,"LLVMDIBuilderCreateTypedef")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,const char *,unsigned long,LLVMMetadataRef,unsigned int,LLVMMetadataRef,unsigned int) nogil> _LLVMDIBuilderCreateTypedef__funptr)(Builder,Type,Name,NameLen,File,LineNo,Scope,AlignInBits)


cdef void* _LLVMDIBuilderCreateInheritance__funptr = NULL
# 
# Create debugging information entry to establish inheritance relationship
# between two types.
# \param Builder       The DIBuilder.
# \param Ty            Original type.
# \param BaseTy        Base type. Ty is inherits from base.
# \param BaseOffset    Base offset.
# \param VBPtrOffset  Virtual base pointer offset.
# \param Flags         Flags to describe inheritance attribute, e.g. private
cdef LLVMMetadataRef LLVMDIBuilderCreateInheritance(LLVMDIBuilderRef Builder,LLVMMetadataRef Ty,LLVMMetadataRef BaseTy,unsigned long BaseOffset,unsigned int VBPtrOffset,LLVMDIFlags Flags) nogil:
    global _LLVMDIBuilderCreateInheritance__funptr
    __init_symbol(&_LLVMDIBuilderCreateInheritance__funptr,"LLVMDIBuilderCreateInheritance")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,LLVMMetadataRef,unsigned long,unsigned int,LLVMDIFlags) nogil> _LLVMDIBuilderCreateInheritance__funptr)(Builder,Ty,BaseTy,BaseOffset,VBPtrOffset,Flags)


cdef void* _LLVMDIBuilderCreateForwardDecl__funptr = NULL
# 
# Create a permanent forward-declared type.
# \param Builder             The DIBuilder.
# \param Tag                 A unique tag for this type.
# \param Name                Type name.
# \param NameLen             Length of type name.
# \param Scope               Type scope.
# \param File                File where this type is defined.
# \param Line                Line number where this type is defined.
# \param RuntimeLang         Indicates runtime version for languages like
#                            Objective-C.
# \param SizeInBits          Member size.
# \param AlignInBits         Member alignment.
# \param UniqueIdentifier    A unique identifier for the type.
# \param UniqueIdentifierLen Length of the unique identifier.
cdef LLVMMetadataRef LLVMDIBuilderCreateForwardDecl(LLVMDIBuilderRef Builder,unsigned int Tag,const char * Name,unsigned long NameLen,LLVMMetadataRef Scope,LLVMMetadataRef File,unsigned int Line,unsigned int RuntimeLang,unsigned long SizeInBits,unsigned int AlignInBits,const char * UniqueIdentifier,unsigned long UniqueIdentifierLen) nogil:
    global _LLVMDIBuilderCreateForwardDecl__funptr
    __init_symbol(&_LLVMDIBuilderCreateForwardDecl__funptr,"LLVMDIBuilderCreateForwardDecl")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,unsigned int,const char *,unsigned long,LLVMMetadataRef,LLVMMetadataRef,unsigned int,unsigned int,unsigned long,unsigned int,const char *,unsigned long) nogil> _LLVMDIBuilderCreateForwardDecl__funptr)(Builder,Tag,Name,NameLen,Scope,File,Line,RuntimeLang,SizeInBits,AlignInBits,UniqueIdentifier,UniqueIdentifierLen)


cdef void* _LLVMDIBuilderCreateReplaceableCompositeType__funptr = NULL
# 
# Create a temporary forward-declared type.
# \param Builder             The DIBuilder.
# \param Tag                 A unique tag for this type.
# \param Name                Type name.
# \param NameLen             Length of type name.
# \param Scope               Type scope.
# \param File                File where this type is defined.
# \param Line                Line number where this type is defined.
# \param RuntimeLang         Indicates runtime version for languages like
#                            Objective-C.
# \param SizeInBits          Member size.
# \param AlignInBits         Member alignment.
# \param Flags               Flags.
# \param UniqueIdentifier    A unique identifier for the type.
# \param UniqueIdentifierLen Length of the unique identifier.
cdef LLVMMetadataRef LLVMDIBuilderCreateReplaceableCompositeType(LLVMDIBuilderRef Builder,unsigned int Tag,const char * Name,unsigned long NameLen,LLVMMetadataRef Scope,LLVMMetadataRef File,unsigned int Line,unsigned int RuntimeLang,unsigned long SizeInBits,unsigned int AlignInBits,LLVMDIFlags Flags,const char * UniqueIdentifier,unsigned long UniqueIdentifierLen) nogil:
    global _LLVMDIBuilderCreateReplaceableCompositeType__funptr
    __init_symbol(&_LLVMDIBuilderCreateReplaceableCompositeType__funptr,"LLVMDIBuilderCreateReplaceableCompositeType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,unsigned int,const char *,unsigned long,LLVMMetadataRef,LLVMMetadataRef,unsigned int,unsigned int,unsigned long,unsigned int,LLVMDIFlags,const char *,unsigned long) nogil> _LLVMDIBuilderCreateReplaceableCompositeType__funptr)(Builder,Tag,Name,NameLen,Scope,File,Line,RuntimeLang,SizeInBits,AlignInBits,Flags,UniqueIdentifier,UniqueIdentifierLen)


cdef void* _LLVMDIBuilderCreateBitFieldMemberType__funptr = NULL
# 
# Create debugging information entry for a bit field member.
# \param Builder             The DIBuilder.
# \param Scope               Member scope.
# \param Name                Member name.
# \param NameLen             Length of member name.
# \param File                File where this member is defined.
# \param LineNumber          Line number.
# \param SizeInBits          Member size.
# \param OffsetInBits        Member offset.
# \param StorageOffsetInBits Member storage offset.
# \param Flags               Flags to encode member attribute.
# \param Type                Parent type.
cdef LLVMMetadataRef LLVMDIBuilderCreateBitFieldMemberType(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,const char * Name,unsigned long NameLen,LLVMMetadataRef File,unsigned int LineNumber,unsigned long SizeInBits,unsigned long OffsetInBits,unsigned long StorageOffsetInBits,LLVMDIFlags Flags,LLVMMetadataRef Type) nogil:
    global _LLVMDIBuilderCreateBitFieldMemberType__funptr
    __init_symbol(&_LLVMDIBuilderCreateBitFieldMemberType__funptr,"LLVMDIBuilderCreateBitFieldMemberType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,const char *,unsigned long,LLVMMetadataRef,unsigned int,unsigned long,unsigned long,unsigned long,LLVMDIFlags,LLVMMetadataRef) nogil> _LLVMDIBuilderCreateBitFieldMemberType__funptr)(Builder,Scope,Name,NameLen,File,LineNumber,SizeInBits,OffsetInBits,StorageOffsetInBits,Flags,Type)


cdef void* _LLVMDIBuilderCreateClassType__funptr = NULL
# 
# Create debugging information entry for a class.
# \param Scope               Scope in which this class is defined.
# \param Name                Class name.
# \param NameLen             The length of the C string passed to \c Name.
# \param File                File where this member is defined.
# \param LineNumber          Line number.
# \param SizeInBits          Member size.
# \param AlignInBits         Member alignment.
# \param OffsetInBits        Member offset.
# \param Flags               Flags to encode member attribute, e.g. private.
# \param DerivedFrom         Debug info of the base class of this type.
# \param Elements            Class members.
# \param NumElements         Number of class elements.
# \param VTableHolder        Debug info of the base class that contains vtable
#                            for this type. This is used in
#                            DW_AT_containing_type. See DWARF documentation
#                            for more info.
# \param TemplateParamsNode  Template type parameters.
# \param UniqueIdentifier    A unique identifier for the type.
# \param UniqueIdentifierLen Length of the unique identifier.
cdef LLVMMetadataRef LLVMDIBuilderCreateClassType(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,const char * Name,unsigned long NameLen,LLVMMetadataRef File,unsigned int LineNumber,unsigned long SizeInBits,unsigned int AlignInBits,unsigned long OffsetInBits,LLVMDIFlags Flags,LLVMMetadataRef DerivedFrom,LLVMMetadataRef* Elements,unsigned int NumElements,LLVMMetadataRef VTableHolder,LLVMMetadataRef TemplateParamsNode,const char * UniqueIdentifier,unsigned long UniqueIdentifierLen) nogil:
    global _LLVMDIBuilderCreateClassType__funptr
    __init_symbol(&_LLVMDIBuilderCreateClassType__funptr,"LLVMDIBuilderCreateClassType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,const char *,unsigned long,LLVMMetadataRef,unsigned int,unsigned long,unsigned int,unsigned long,LLVMDIFlags,LLVMMetadataRef,LLVMMetadataRef*,unsigned int,LLVMMetadataRef,LLVMMetadataRef,const char *,unsigned long) nogil> _LLVMDIBuilderCreateClassType__funptr)(Builder,Scope,Name,NameLen,File,LineNumber,SizeInBits,AlignInBits,OffsetInBits,Flags,DerivedFrom,Elements,NumElements,VTableHolder,TemplateParamsNode,UniqueIdentifier,UniqueIdentifierLen)


cdef void* _LLVMDIBuilderCreateArtificialType__funptr = NULL
# 
# Create a uniqued DIType* clone with FlagArtificial set.
# \param Builder     The DIBuilder.
# \param Type        The underlying type.
cdef LLVMMetadataRef LLVMDIBuilderCreateArtificialType(LLVMDIBuilderRef Builder,LLVMMetadataRef Type) nogil:
    global _LLVMDIBuilderCreateArtificialType__funptr
    __init_symbol(&_LLVMDIBuilderCreateArtificialType__funptr,"LLVMDIBuilderCreateArtificialType")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef) nogil> _LLVMDIBuilderCreateArtificialType__funptr)(Builder,Type)


cdef void* _LLVMDITypeGetName__funptr = NULL
# 
# Get the name of this DIType.
# \param DType     The DIType.
# \param Length    The length of the returned string.
# 
# @see DIType::getName()
cdef const char * LLVMDITypeGetName(LLVMMetadataRef DType,unsigned long * Length) nogil:
    global _LLVMDITypeGetName__funptr
    __init_symbol(&_LLVMDITypeGetName__funptr,"LLVMDITypeGetName")
    return (<const char * (*)(LLVMMetadataRef,unsigned long *) nogil> _LLVMDITypeGetName__funptr)(DType,Length)


cdef void* _LLVMDITypeGetSizeInBits__funptr = NULL
# 
# Get the size of this DIType in bits.
# \param DType     The DIType.
# 
# @see DIType::getSizeInBits()
cdef unsigned long LLVMDITypeGetSizeInBits(LLVMMetadataRef DType) nogil:
    global _LLVMDITypeGetSizeInBits__funptr
    __init_symbol(&_LLVMDITypeGetSizeInBits__funptr,"LLVMDITypeGetSizeInBits")
    return (<unsigned long (*)(LLVMMetadataRef) nogil> _LLVMDITypeGetSizeInBits__funptr)(DType)


cdef void* _LLVMDITypeGetOffsetInBits__funptr = NULL
# 
# Get the offset of this DIType in bits.
# \param DType     The DIType.
# 
# @see DIType::getOffsetInBits()
cdef unsigned long LLVMDITypeGetOffsetInBits(LLVMMetadataRef DType) nogil:
    global _LLVMDITypeGetOffsetInBits__funptr
    __init_symbol(&_LLVMDITypeGetOffsetInBits__funptr,"LLVMDITypeGetOffsetInBits")
    return (<unsigned long (*)(LLVMMetadataRef) nogil> _LLVMDITypeGetOffsetInBits__funptr)(DType)


cdef void* _LLVMDITypeGetAlignInBits__funptr = NULL
# 
# Get the alignment of this DIType in bits.
# \param DType     The DIType.
# 
# @see DIType::getAlignInBits()
cdef unsigned int LLVMDITypeGetAlignInBits(LLVMMetadataRef DType) nogil:
    global _LLVMDITypeGetAlignInBits__funptr
    __init_symbol(&_LLVMDITypeGetAlignInBits__funptr,"LLVMDITypeGetAlignInBits")
    return (<unsigned int (*)(LLVMMetadataRef) nogil> _LLVMDITypeGetAlignInBits__funptr)(DType)


cdef void* _LLVMDITypeGetLine__funptr = NULL
# 
# Get the source line where this DIType is declared.
# \param DType     The DIType.
# 
# @see DIType::getLine()
cdef unsigned int LLVMDITypeGetLine(LLVMMetadataRef DType) nogil:
    global _LLVMDITypeGetLine__funptr
    __init_symbol(&_LLVMDITypeGetLine__funptr,"LLVMDITypeGetLine")
    return (<unsigned int (*)(LLVMMetadataRef) nogil> _LLVMDITypeGetLine__funptr)(DType)


cdef void* _LLVMDITypeGetFlags__funptr = NULL
# 
# Get the flags associated with this DIType.
# \param DType     The DIType.
# 
# @see DIType::getFlags()
cdef LLVMDIFlags LLVMDITypeGetFlags(LLVMMetadataRef DType) nogil:
    global _LLVMDITypeGetFlags__funptr
    __init_symbol(&_LLVMDITypeGetFlags__funptr,"LLVMDITypeGetFlags")
    return (<LLVMDIFlags (*)(LLVMMetadataRef) nogil> _LLVMDITypeGetFlags__funptr)(DType)


cdef void* _LLVMDIBuilderGetOrCreateSubrange__funptr = NULL
# 
# Create a descriptor for a value range.
# \param Builder    The DIBuilder.
# \param LowerBound Lower bound of the subrange, e.g. 0 for C, 1 for Fortran.
# \param Count      Count of elements in the subrange.
cdef LLVMMetadataRef LLVMDIBuilderGetOrCreateSubrange(LLVMDIBuilderRef Builder,long LowerBound,long Count) nogil:
    global _LLVMDIBuilderGetOrCreateSubrange__funptr
    __init_symbol(&_LLVMDIBuilderGetOrCreateSubrange__funptr,"LLVMDIBuilderGetOrCreateSubrange")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,long,long) nogil> _LLVMDIBuilderGetOrCreateSubrange__funptr)(Builder,LowerBound,Count)


cdef void* _LLVMDIBuilderGetOrCreateArray__funptr = NULL
# 
# Create an array of DI Nodes.
# \param Builder        The DIBuilder.
# \param Data           The DI Node elements.
# \param NumElements    Number of DI Node elements.
cdef LLVMMetadataRef LLVMDIBuilderGetOrCreateArray(LLVMDIBuilderRef Builder,LLVMMetadataRef* Data,unsigned long NumElements) nogil:
    global _LLVMDIBuilderGetOrCreateArray__funptr
    __init_symbol(&_LLVMDIBuilderGetOrCreateArray__funptr,"LLVMDIBuilderGetOrCreateArray")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef*,unsigned long) nogil> _LLVMDIBuilderGetOrCreateArray__funptr)(Builder,Data,NumElements)


cdef void* _LLVMDIBuilderCreateExpression__funptr = NULL
# 
# Create a new descriptor for the specified variable which has a complex
# address expression for its address.
# \param Builder     The DIBuilder.
# \param Addr        An array of complex address operations.
# \param Length      Length of the address operation array.
cdef LLVMMetadataRef LLVMDIBuilderCreateExpression(LLVMDIBuilderRef Builder,unsigned long * Addr,unsigned long Length) nogil:
    global _LLVMDIBuilderCreateExpression__funptr
    __init_symbol(&_LLVMDIBuilderCreateExpression__funptr,"LLVMDIBuilderCreateExpression")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,unsigned long *,unsigned long) nogil> _LLVMDIBuilderCreateExpression__funptr)(Builder,Addr,Length)


cdef void* _LLVMDIBuilderCreateConstantValueExpression__funptr = NULL
# 
# Create a new descriptor for the specified variable that does not have an
# address, but does have a constant value.
# \param Builder     The DIBuilder.
# \param Value       The constant value.
cdef LLVMMetadataRef LLVMDIBuilderCreateConstantValueExpression(LLVMDIBuilderRef Builder,unsigned long Value) nogil:
    global _LLVMDIBuilderCreateConstantValueExpression__funptr
    __init_symbol(&_LLVMDIBuilderCreateConstantValueExpression__funptr,"LLVMDIBuilderCreateConstantValueExpression")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,unsigned long) nogil> _LLVMDIBuilderCreateConstantValueExpression__funptr)(Builder,Value)


cdef void* _LLVMDIBuilderCreateGlobalVariableExpression__funptr = NULL
# 
# Create a new descriptor for the specified variable.
# \param Scope       Variable scope.
# \param Name        Name of the variable.
# \param NameLen     The length of the C string passed to \c Name.
# \param Linkage     Mangled  name of the variable.
# \param LinkLen     The length of the C string passed to \c Linkage.
# \param File        File where this variable is defined.
# \param LineNo      Line number.
# \param Ty          Variable Type.
# \param LocalToUnit Boolean flag indicate whether this variable is
#                    externally visible or not.
# \param Expr        The location of the global relative to the attached
#                    GlobalVariable.
# \param Decl        Reference to the corresponding declaration.
#                    variables.
# \param AlignInBits Variable alignment(or 0 if no alignment attr was
#                    specified)
cdef LLVMMetadataRef LLVMDIBuilderCreateGlobalVariableExpression(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,const char * Name,unsigned long NameLen,const char * Linkage,unsigned long LinkLen,LLVMMetadataRef File,unsigned int LineNo,LLVMMetadataRef Ty,int LocalToUnit,LLVMMetadataRef Expr,LLVMMetadataRef Decl,unsigned int AlignInBits) nogil:
    global _LLVMDIBuilderCreateGlobalVariableExpression__funptr
    __init_symbol(&_LLVMDIBuilderCreateGlobalVariableExpression__funptr,"LLVMDIBuilderCreateGlobalVariableExpression")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,const char *,unsigned long,const char *,unsigned long,LLVMMetadataRef,unsigned int,LLVMMetadataRef,int,LLVMMetadataRef,LLVMMetadataRef,unsigned int) nogil> _LLVMDIBuilderCreateGlobalVariableExpression__funptr)(Builder,Scope,Name,NameLen,Linkage,LinkLen,File,LineNo,Ty,LocalToUnit,Expr,Decl,AlignInBits)


cdef void* _LLVMDIGlobalVariableExpressionGetVariable__funptr = NULL
# 
# Retrieves the \c DIVariable associated with this global variable expression.
# \param GVE    The global variable expression.
# 
# @see llvm::DIGlobalVariableExpression::getVariable()
cdef LLVMMetadataRef LLVMDIGlobalVariableExpressionGetVariable(LLVMMetadataRef GVE) nogil:
    global _LLVMDIGlobalVariableExpressionGetVariable__funptr
    __init_symbol(&_LLVMDIGlobalVariableExpressionGetVariable__funptr,"LLVMDIGlobalVariableExpressionGetVariable")
    return (<LLVMMetadataRef (*)(LLVMMetadataRef) nogil> _LLVMDIGlobalVariableExpressionGetVariable__funptr)(GVE)


cdef void* _LLVMDIGlobalVariableExpressionGetExpression__funptr = NULL
# 
# Retrieves the \c DIExpression associated with this global variable expression.
# \param GVE    The global variable expression.
# 
# @see llvm::DIGlobalVariableExpression::getExpression()
cdef LLVMMetadataRef LLVMDIGlobalVariableExpressionGetExpression(LLVMMetadataRef GVE) nogil:
    global _LLVMDIGlobalVariableExpressionGetExpression__funptr
    __init_symbol(&_LLVMDIGlobalVariableExpressionGetExpression__funptr,"LLVMDIGlobalVariableExpressionGetExpression")
    return (<LLVMMetadataRef (*)(LLVMMetadataRef) nogil> _LLVMDIGlobalVariableExpressionGetExpression__funptr)(GVE)


cdef void* _LLVMDIVariableGetFile__funptr = NULL
# 
# Get the metadata of the file associated with a given variable.
# \param Var     The variable object.
# 
# @see DIVariable::getFile()
cdef LLVMMetadataRef LLVMDIVariableGetFile(LLVMMetadataRef Var) nogil:
    global _LLVMDIVariableGetFile__funptr
    __init_symbol(&_LLVMDIVariableGetFile__funptr,"LLVMDIVariableGetFile")
    return (<LLVMMetadataRef (*)(LLVMMetadataRef) nogil> _LLVMDIVariableGetFile__funptr)(Var)


cdef void* _LLVMDIVariableGetScope__funptr = NULL
# 
# Get the metadata of the scope associated with a given variable.
# \param Var     The variable object.
# 
# @see DIVariable::getScope()
cdef LLVMMetadataRef LLVMDIVariableGetScope(LLVMMetadataRef Var) nogil:
    global _LLVMDIVariableGetScope__funptr
    __init_symbol(&_LLVMDIVariableGetScope__funptr,"LLVMDIVariableGetScope")
    return (<LLVMMetadataRef (*)(LLVMMetadataRef) nogil> _LLVMDIVariableGetScope__funptr)(Var)


cdef void* _LLVMDIVariableGetLine__funptr = NULL
# 
# Get the source line where this \c DIVariable is declared.
# \param Var     The DIVariable.
# 
# @see DIVariable::getLine()
cdef unsigned int LLVMDIVariableGetLine(LLVMMetadataRef Var) nogil:
    global _LLVMDIVariableGetLine__funptr
    __init_symbol(&_LLVMDIVariableGetLine__funptr,"LLVMDIVariableGetLine")
    return (<unsigned int (*)(LLVMMetadataRef) nogil> _LLVMDIVariableGetLine__funptr)(Var)


cdef void* _LLVMTemporaryMDNode__funptr = NULL
# 
# Create a new temporary \c MDNode.  Suitable for use in constructing cyclic
# \c MDNode structures. A temporary \c MDNode is not uniqued, may be RAUW'd,
# and must be manually deleted with \c LLVMDisposeTemporaryMDNode.
# \param Ctx            The context in which to construct the temporary node.
# \param Data           The metadata elements.
# \param NumElements    Number of metadata elements.
cdef LLVMMetadataRef LLVMTemporaryMDNode(LLVMContextRef Ctx,LLVMMetadataRef* Data,unsigned long NumElements) nogil:
    global _LLVMTemporaryMDNode__funptr
    __init_symbol(&_LLVMTemporaryMDNode__funptr,"LLVMTemporaryMDNode")
    return (<LLVMMetadataRef (*)(LLVMContextRef,LLVMMetadataRef*,unsigned long) nogil> _LLVMTemporaryMDNode__funptr)(Ctx,Data,NumElements)


cdef void* _LLVMDisposeTemporaryMDNode__funptr = NULL
# 
# Deallocate a temporary node.
# 
# Calls \c replaceAllUsesWith(nullptr) before deleting, so any remaining
# references will be reset.
# \param TempNode    The temporary metadata node.
cdef void LLVMDisposeTemporaryMDNode(LLVMMetadataRef TempNode) nogil:
    global _LLVMDisposeTemporaryMDNode__funptr
    __init_symbol(&_LLVMDisposeTemporaryMDNode__funptr,"LLVMDisposeTemporaryMDNode")
    return (<void (*)(LLVMMetadataRef) nogil> _LLVMDisposeTemporaryMDNode__funptr)(TempNode)


cdef void* _LLVMMetadataReplaceAllUsesWith__funptr = NULL
# 
# Replace all uses of temporary metadata.
# \param TempTargetMetadata    The temporary metadata node.
# \param Replacement           The replacement metadata node.
cdef void LLVMMetadataReplaceAllUsesWith(LLVMMetadataRef TempTargetMetadata,LLVMMetadataRef Replacement) nogil:
    global _LLVMMetadataReplaceAllUsesWith__funptr
    __init_symbol(&_LLVMMetadataReplaceAllUsesWith__funptr,"LLVMMetadataReplaceAllUsesWith")
    return (<void (*)(LLVMMetadataRef,LLVMMetadataRef) nogil> _LLVMMetadataReplaceAllUsesWith__funptr)(TempTargetMetadata,Replacement)


cdef void* _LLVMDIBuilderCreateTempGlobalVariableFwdDecl__funptr = NULL
# 
# Create a new descriptor for the specified global variable that is temporary
# and meant to be RAUWed.
# \param Scope       Variable scope.
# \param Name        Name of the variable.
# \param NameLen     The length of the C string passed to \c Name.
# \param Linkage     Mangled  name of the variable.
# \param LnkLen      The length of the C string passed to \c Linkage.
# \param File        File where this variable is defined.
# \param LineNo      Line number.
# \param Ty          Variable Type.
# \param LocalToUnit Boolean flag indicate whether this variable is
#                    externally visible or not.
# \param Decl        Reference to the corresponding declaration.
# \param AlignInBits Variable alignment(or 0 if no alignment attr was
#                    specified)
cdef LLVMMetadataRef LLVMDIBuilderCreateTempGlobalVariableFwdDecl(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,const char * Name,unsigned long NameLen,const char * Linkage,unsigned long LnkLen,LLVMMetadataRef File,unsigned int LineNo,LLVMMetadataRef Ty,int LocalToUnit,LLVMMetadataRef Decl,unsigned int AlignInBits) nogil:
    global _LLVMDIBuilderCreateTempGlobalVariableFwdDecl__funptr
    __init_symbol(&_LLVMDIBuilderCreateTempGlobalVariableFwdDecl__funptr,"LLVMDIBuilderCreateTempGlobalVariableFwdDecl")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,const char *,unsigned long,const char *,unsigned long,LLVMMetadataRef,unsigned int,LLVMMetadataRef,int,LLVMMetadataRef,unsigned int) nogil> _LLVMDIBuilderCreateTempGlobalVariableFwdDecl__funptr)(Builder,Scope,Name,NameLen,Linkage,LnkLen,File,LineNo,Ty,LocalToUnit,Decl,AlignInBits)


cdef void* _LLVMDIBuilderInsertDeclareBefore__funptr = NULL
# 
# Insert a new llvm.dbg.declare intrinsic call before the given instruction.
# \param Builder     The DIBuilder.
# \param Storage     The storage of the variable to declare.
# \param VarInfo     The variable's debug info descriptor.
# \param Expr        A complex location expression for the variable.
# \param DebugLoc    Debug info location.
# \param Instr       Instruction acting as a location for the new intrinsic.
cdef LLVMValueRef LLVMDIBuilderInsertDeclareBefore(LLVMDIBuilderRef Builder,LLVMValueRef Storage,LLVMMetadataRef VarInfo,LLVMMetadataRef Expr,LLVMMetadataRef DebugLoc,LLVMValueRef Instr) nogil:
    global _LLVMDIBuilderInsertDeclareBefore__funptr
    __init_symbol(&_LLVMDIBuilderInsertDeclareBefore__funptr,"LLVMDIBuilderInsertDeclareBefore")
    return (<LLVMValueRef (*)(LLVMDIBuilderRef,LLVMValueRef,LLVMMetadataRef,LLVMMetadataRef,LLVMMetadataRef,LLVMValueRef) nogil> _LLVMDIBuilderInsertDeclareBefore__funptr)(Builder,Storage,VarInfo,Expr,DebugLoc,Instr)


cdef void* _LLVMDIBuilderInsertDeclareAtEnd__funptr = NULL
# 
# Insert a new llvm.dbg.declare intrinsic call at the end of the given basic
# block. If the basic block has a terminator instruction, the intrinsic is
# inserted before that terminator instruction.
# \param Builder     The DIBuilder.
# \param Storage     The storage of the variable to declare.
# \param VarInfo     The variable's debug info descriptor.
# \param Expr        A complex location expression for the variable.
# \param DebugLoc    Debug info location.
# \param Block       Basic block acting as a location for the new intrinsic.
cdef LLVMValueRef LLVMDIBuilderInsertDeclareAtEnd(LLVMDIBuilderRef Builder,LLVMValueRef Storage,LLVMMetadataRef VarInfo,LLVMMetadataRef Expr,LLVMMetadataRef DebugLoc,LLVMBasicBlockRef Block) nogil:
    global _LLVMDIBuilderInsertDeclareAtEnd__funptr
    __init_symbol(&_LLVMDIBuilderInsertDeclareAtEnd__funptr,"LLVMDIBuilderInsertDeclareAtEnd")
    return (<LLVMValueRef (*)(LLVMDIBuilderRef,LLVMValueRef,LLVMMetadataRef,LLVMMetadataRef,LLVMMetadataRef,LLVMBasicBlockRef) nogil> _LLVMDIBuilderInsertDeclareAtEnd__funptr)(Builder,Storage,VarInfo,Expr,DebugLoc,Block)


cdef void* _LLVMDIBuilderInsertDbgValueBefore__funptr = NULL
# 
# Insert a new llvm.dbg.value intrinsic call before the given instruction.
# \param Builder     The DIBuilder.
# \param Val         The value of the variable.
# \param VarInfo     The variable's debug info descriptor.
# \param Expr        A complex location expression for the variable.
# \param DebugLoc    Debug info location.
# \param Instr       Instruction acting as a location for the new intrinsic.
cdef LLVMValueRef LLVMDIBuilderInsertDbgValueBefore(LLVMDIBuilderRef Builder,LLVMValueRef Val,LLVMMetadataRef VarInfo,LLVMMetadataRef Expr,LLVMMetadataRef DebugLoc,LLVMValueRef Instr) nogil:
    global _LLVMDIBuilderInsertDbgValueBefore__funptr
    __init_symbol(&_LLVMDIBuilderInsertDbgValueBefore__funptr,"LLVMDIBuilderInsertDbgValueBefore")
    return (<LLVMValueRef (*)(LLVMDIBuilderRef,LLVMValueRef,LLVMMetadataRef,LLVMMetadataRef,LLVMMetadataRef,LLVMValueRef) nogil> _LLVMDIBuilderInsertDbgValueBefore__funptr)(Builder,Val,VarInfo,Expr,DebugLoc,Instr)


cdef void* _LLVMDIBuilderInsertDbgValueAtEnd__funptr = NULL
# 
# Insert a new llvm.dbg.value intrinsic call at the end of the given basic
# block. If the basic block has a terminator instruction, the intrinsic is
# inserted before that terminator instruction.
# \param Builder     The DIBuilder.
# \param Val         The value of the variable.
# \param VarInfo     The variable's debug info descriptor.
# \param Expr        A complex location expression for the variable.
# \param DebugLoc    Debug info location.
# \param Block       Basic block acting as a location for the new intrinsic.
cdef LLVMValueRef LLVMDIBuilderInsertDbgValueAtEnd(LLVMDIBuilderRef Builder,LLVMValueRef Val,LLVMMetadataRef VarInfo,LLVMMetadataRef Expr,LLVMMetadataRef DebugLoc,LLVMBasicBlockRef Block) nogil:
    global _LLVMDIBuilderInsertDbgValueAtEnd__funptr
    __init_symbol(&_LLVMDIBuilderInsertDbgValueAtEnd__funptr,"LLVMDIBuilderInsertDbgValueAtEnd")
    return (<LLVMValueRef (*)(LLVMDIBuilderRef,LLVMValueRef,LLVMMetadataRef,LLVMMetadataRef,LLVMMetadataRef,LLVMBasicBlockRef) nogil> _LLVMDIBuilderInsertDbgValueAtEnd__funptr)(Builder,Val,VarInfo,Expr,DebugLoc,Block)


cdef void* _LLVMDIBuilderCreateAutoVariable__funptr = NULL
# 
# Create a new descriptor for a local auto variable.
# \param Builder         The DIBuilder.
# \param Scope           The local scope the variable is declared in.
# \param Name            Variable name.
# \param NameLen         Length of variable name.
# \param File            File where this variable is defined.
# \param LineNo          Line number.
# \param Ty              Metadata describing the type of the variable.
# \param AlwaysPreserve  If true, this descriptor will survive optimizations.
# \param Flags           Flags.
# \param AlignInBits     Variable alignment.
cdef LLVMMetadataRef LLVMDIBuilderCreateAutoVariable(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,const char * Name,unsigned long NameLen,LLVMMetadataRef File,unsigned int LineNo,LLVMMetadataRef Ty,int AlwaysPreserve,LLVMDIFlags Flags,unsigned int AlignInBits) nogil:
    global _LLVMDIBuilderCreateAutoVariable__funptr
    __init_symbol(&_LLVMDIBuilderCreateAutoVariable__funptr,"LLVMDIBuilderCreateAutoVariable")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,const char *,unsigned long,LLVMMetadataRef,unsigned int,LLVMMetadataRef,int,LLVMDIFlags,unsigned int) nogil> _LLVMDIBuilderCreateAutoVariable__funptr)(Builder,Scope,Name,NameLen,File,LineNo,Ty,AlwaysPreserve,Flags,AlignInBits)


cdef void* _LLVMDIBuilderCreateParameterVariable__funptr = NULL
# 
# Create a new descriptor for a function parameter variable.
# \param Builder         The DIBuilder.
# \param Scope           The local scope the variable is declared in.
# \param Name            Variable name.
# \param NameLen         Length of variable name.
# \param ArgNo           Unique argument number for this variable; starts at 1.
# \param File            File where this variable is defined.
# \param LineNo          Line number.
# \param Ty              Metadata describing the type of the variable.
# \param AlwaysPreserve  If true, this descriptor will survive optimizations.
# \param Flags           Flags.
cdef LLVMMetadataRef LLVMDIBuilderCreateParameterVariable(LLVMDIBuilderRef Builder,LLVMMetadataRef Scope,const char * Name,unsigned long NameLen,unsigned int ArgNo,LLVMMetadataRef File,unsigned int LineNo,LLVMMetadataRef Ty,int AlwaysPreserve,LLVMDIFlags Flags) nogil:
    global _LLVMDIBuilderCreateParameterVariable__funptr
    __init_symbol(&_LLVMDIBuilderCreateParameterVariable__funptr,"LLVMDIBuilderCreateParameterVariable")
    return (<LLVMMetadataRef (*)(LLVMDIBuilderRef,LLVMMetadataRef,const char *,unsigned long,unsigned int,LLVMMetadataRef,unsigned int,LLVMMetadataRef,int,LLVMDIFlags) nogil> _LLVMDIBuilderCreateParameterVariable__funptr)(Builder,Scope,Name,NameLen,ArgNo,File,LineNo,Ty,AlwaysPreserve,Flags)


cdef void* _LLVMGetSubprogram__funptr = NULL
# 
# Get the metadata of the subprogram attached to a function.
# 
# @see llvm::Function::getSubprogram()
cdef LLVMMetadataRef LLVMGetSubprogram(LLVMValueRef Func) nogil:
    global _LLVMGetSubprogram__funptr
    __init_symbol(&_LLVMGetSubprogram__funptr,"LLVMGetSubprogram")
    return (<LLVMMetadataRef (*)(LLVMValueRef) nogil> _LLVMGetSubprogram__funptr)(Func)


cdef void* _LLVMSetSubprogram__funptr = NULL
# 
# Set the subprogram attached to a function.
# 
# @see llvm::Function::setSubprogram()
cdef void LLVMSetSubprogram(LLVMValueRef Func,LLVMMetadataRef SP) nogil:
    global _LLVMSetSubprogram__funptr
    __init_symbol(&_LLVMSetSubprogram__funptr,"LLVMSetSubprogram")
    return (<void (*)(LLVMValueRef,LLVMMetadataRef) nogil> _LLVMSetSubprogram__funptr)(Func,SP)


cdef void* _LLVMDISubprogramGetLine__funptr = NULL
# 
# Get the line associated with a given subprogram.
# \param Subprogram     The subprogram object.
# 
# @see DISubprogram::getLine()
cdef unsigned int LLVMDISubprogramGetLine(LLVMMetadataRef Subprogram) nogil:
    global _LLVMDISubprogramGetLine__funptr
    __init_symbol(&_LLVMDISubprogramGetLine__funptr,"LLVMDISubprogramGetLine")
    return (<unsigned int (*)(LLVMMetadataRef) nogil> _LLVMDISubprogramGetLine__funptr)(Subprogram)


cdef void* _LLVMInstructionGetDebugLoc__funptr = NULL
# 
# Get the debug location for the given instruction.
# 
# @see llvm::Instruction::getDebugLoc()
cdef LLVMMetadataRef LLVMInstructionGetDebugLoc(LLVMValueRef Inst) nogil:
    global _LLVMInstructionGetDebugLoc__funptr
    __init_symbol(&_LLVMInstructionGetDebugLoc__funptr,"LLVMInstructionGetDebugLoc")
    return (<LLVMMetadataRef (*)(LLVMValueRef) nogil> _LLVMInstructionGetDebugLoc__funptr)(Inst)


cdef void* _LLVMInstructionSetDebugLoc__funptr = NULL
# 
# Set the debug location for the given instruction.
# 
# To clear the location metadata of the given instruction, pass NULL to \p Loc.
# 
# @see llvm::Instruction::setDebugLoc()
cdef void LLVMInstructionSetDebugLoc(LLVMValueRef Inst,LLVMMetadataRef Loc) nogil:
    global _LLVMInstructionSetDebugLoc__funptr
    __init_symbol(&_LLVMInstructionSetDebugLoc__funptr,"LLVMInstructionSetDebugLoc")
    return (<void (*)(LLVMValueRef,LLVMMetadataRef) nogil> _LLVMInstructionSetDebugLoc__funptr)(Inst,Loc)


cdef void* _LLVMGetMetadataKind__funptr = NULL
# 
# Obtain the enumerated type of a Metadata instance.
# 
# @see llvm::Metadata::getMetadataID()
cdef unsigned int LLVMGetMetadataKind(LLVMMetadataRef Metadata) nogil:
    global _LLVMGetMetadataKind__funptr
    __init_symbol(&_LLVMGetMetadataKind__funptr,"LLVMGetMetadataKind")
    return (<unsigned int (*)(LLVMMetadataRef) nogil> _LLVMGetMetadataKind__funptr)(Metadata)
