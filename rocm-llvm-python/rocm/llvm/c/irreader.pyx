# MIT License
#
# Copyright (c) 2023-2024 Advanced Micro Devices, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.


"""
(No short description)


"""

import cython
import ctypes
import enum

from rocm.llvm.c.types import LLVMMemoryBufferRef
from rocm.llvm.c.types import LLVMContextRef
from rocm.llvm.c.types import LLVMModuleRef
from rocm.llvm.c.types import LLVMTypeRef
from rocm.llvm.c.types import LLVMValueRef
from rocm.llvm.c.types import LLVMBasicBlockRef
from rocm.llvm.c.types import LLVMMetadataRef
from rocm.llvm.c.types import LLVMNamedMDNodeRef
from rocm.llvm.c.types import LLVMValueMetadataEntry
from rocm.llvm.c.types import LLVMBuilderRef
from rocm.llvm.c.types import LLVMDIBuilderRef
from rocm.llvm.c.types import LLVMModuleProviderRef
from rocm.llvm.c.types import LLVMPassManagerRef
from rocm.llvm.c.types import LLVMUseRef
from rocm.llvm.c.types import LLVMOperandBundleRef
from rocm.llvm.c.types import LLVMAttributeRef
from rocm.llvm.c.types import LLVMDiagnosticInfoRef
from rocm.llvm.c.types import LLVMComdatRef
from rocm.llvm.c.types import LLVMModuleFlagEntry
from rocm.llvm.c.types import LLVMJITEventListenerRef
from rocm.llvm.c.types import LLVMBinaryRef

@cython.embedsignature(True)
def LLVMParseIRInContext(object ContextRef, object MemBuf):
    r"""(No short description, might be part of a group.)

    Read LLVM IR from a memory buffer and convert it into an in-memory Module
    object. Returns 0 on success.
    Optionally returns a human-readable description of any errors that
    occurred during parsing IR. OutMessage must be disposed with
    LLVMDisposeMessage.

    See:
        `~.llvm``~.`~.ParseIR``()

    Args:
        ContextRef (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        MemBuf (`~.LLVMOpaqueMemoryBuffer`/`~.object`):
            (undocumented)

    Returns:
        A `~.tuple` of size 2 that contains (in that order):

        * OutM (`~.LLVMOpaqueModule`):
            (undocumented)
        * OutMessage (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    OutM = LLVMOpaqueModule.fromPtr(NULL)
    OutMessage = rocm.llvm._util.types.CStr.fromPtr(NULL)
    cdef int _LLVMParseIRInContext__retval = cirreader.LLVMParseIRInContext(
        LLVMOpaqueContext.fromPyobj(ContextRef).getElementPtr(),
        LLVMOpaqueMemoryBuffer.fromPyobj(MemBuf).getElementPtr(),<cirreader.LLVMOpaqueModule**>&OutM._ptr,
        <char **>&OutMessage._ptr)
    return (_LLVMParseIRInContext__retval,None if OutM._ptr == NULL else OutM,None if OutMessage._ptr == NULL else OutMessage)

__all__ = [
    "LLVMParseIRInContext",
]