# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

cimport hip._util.posixloader as loader
cdef void* _lib_handle = NULL

cdef void __init() nogil:
    global _lib_handle
    if _lib_handle == NULL:
        with gil:
            _lib_handle = loader.open_library("librocmllvm.so")

cdef void __init_symbol(void** result, const char* name) nogil:
    global _lib_handle
    if _lib_handle == NULL:
        __init()
    if result[0] == NULL:
        with gil:
            result[0] = loader.load_symbol(_lib_handle, name) 


cdef void* _LLVMParseBitcode__funptr = NULL
# 
# @defgroup LLVMCBitReader Bit Reader
# @ingroup LLVMC
# 
# @{
cdef int LLVMParseBitcode(LLVMMemoryBufferRef MemBuf,LLVMModuleRef* OutModule,char ** OutMessage) nogil:
    global _LLVMParseBitcode__funptr
    __init_symbol(&_LLVMParseBitcode__funptr,"LLVMParseBitcode")
    return (<int (*)(LLVMMemoryBufferRef,LLVMModuleRef*,char **) nogil> _LLVMParseBitcode__funptr)(MemBuf,OutModule,OutMessage)


cdef void* _LLVMParseBitcode2__funptr = NULL
cdef int LLVMParseBitcode2(LLVMMemoryBufferRef MemBuf,LLVMModuleRef* OutModule) nogil:
    global _LLVMParseBitcode2__funptr
    __init_symbol(&_LLVMParseBitcode2__funptr,"LLVMParseBitcode2")
    return (<int (*)(LLVMMemoryBufferRef,LLVMModuleRef*) nogil> _LLVMParseBitcode2__funptr)(MemBuf,OutModule)


cdef void* _LLVMParseBitcodeInContext__funptr = NULL
cdef int LLVMParseBitcodeInContext(LLVMContextRef ContextRef,LLVMMemoryBufferRef MemBuf,LLVMModuleRef* OutModule,char ** OutMessage) nogil:
    global _LLVMParseBitcodeInContext__funptr
    __init_symbol(&_LLVMParseBitcodeInContext__funptr,"LLVMParseBitcodeInContext")
    return (<int (*)(LLVMContextRef,LLVMMemoryBufferRef,LLVMModuleRef*,char **) nogil> _LLVMParseBitcodeInContext__funptr)(ContextRef,MemBuf,OutModule,OutMessage)


cdef void* _LLVMParseBitcodeInContext2__funptr = NULL
cdef int LLVMParseBitcodeInContext2(LLVMContextRef ContextRef,LLVMMemoryBufferRef MemBuf,LLVMModuleRef* OutModule) nogil:
    global _LLVMParseBitcodeInContext2__funptr
    __init_symbol(&_LLVMParseBitcodeInContext2__funptr,"LLVMParseBitcodeInContext2")
    return (<int (*)(LLVMContextRef,LLVMMemoryBufferRef,LLVMModuleRef*) nogil> _LLVMParseBitcodeInContext2__funptr)(ContextRef,MemBuf,OutModule)


cdef void* _LLVMGetBitcodeModuleInContext__funptr = NULL
# Reads a module from the specified path, returning via the OutMP parameter
# a module provider which performs lazy deserialization. Returns 0 on success.
# Optionally returns a human-readable error message via OutMessage.
# This is deprecated. Use LLVMGetBitcodeModuleInContext2.
cdef int LLVMGetBitcodeModuleInContext(LLVMContextRef ContextRef,LLVMMemoryBufferRef MemBuf,LLVMModuleRef* OutM,char ** OutMessage) nogil:
    global _LLVMGetBitcodeModuleInContext__funptr
    __init_symbol(&_LLVMGetBitcodeModuleInContext__funptr,"LLVMGetBitcodeModuleInContext")
    return (<int (*)(LLVMContextRef,LLVMMemoryBufferRef,LLVMModuleRef*,char **) nogil> _LLVMGetBitcodeModuleInContext__funptr)(ContextRef,MemBuf,OutM,OutMessage)


cdef void* _LLVMGetBitcodeModuleInContext2__funptr = NULL
#  Reads a module from the given memory buffer, returning via the OutMP
# parameter a module provider which performs lazy deserialization.
# 
# Returns 0 on success.
# 
# Takes ownership of \p MemBuf if (and only if) the module was read
# successfully.
cdef int LLVMGetBitcodeModuleInContext2(LLVMContextRef ContextRef,LLVMMemoryBufferRef MemBuf,LLVMModuleRef* OutM) nogil:
    global _LLVMGetBitcodeModuleInContext2__funptr
    __init_symbol(&_LLVMGetBitcodeModuleInContext2__funptr,"LLVMGetBitcodeModuleInContext2")
    return (<int (*)(LLVMContextRef,LLVMMemoryBufferRef,LLVMModuleRef*) nogil> _LLVMGetBitcodeModuleInContext2__funptr)(ContextRef,MemBuf,OutM)


cdef void* _LLVMGetBitcodeModule__funptr = NULL
cdef int LLVMGetBitcodeModule(LLVMMemoryBufferRef MemBuf,LLVMModuleRef* OutM,char ** OutMessage) nogil:
    global _LLVMGetBitcodeModule__funptr
    __init_symbol(&_LLVMGetBitcodeModule__funptr,"LLVMGetBitcodeModule")
    return (<int (*)(LLVMMemoryBufferRef,LLVMModuleRef*,char **) nogil> _LLVMGetBitcodeModule__funptr)(MemBuf,OutM,OutMessage)


cdef void* _LLVMGetBitcodeModule2__funptr = NULL
cdef int LLVMGetBitcodeModule2(LLVMMemoryBufferRef MemBuf,LLVMModuleRef* OutM) nogil:
    global _LLVMGetBitcodeModule2__funptr
    __init_symbol(&_LLVMGetBitcodeModule2__funptr,"LLVMGetBitcodeModule2")
    return (<int (*)(LLVMMemoryBufferRef,LLVMModuleRef*) nogil> _LLVMGetBitcodeModule2__funptr)(MemBuf,OutM)
