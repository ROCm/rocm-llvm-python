# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

cimport rocm.llvm._util.posixloader as loader
cdef void* _lib_handle = NULL

DLL = "librocmllvm.so"

cdef void __init():
    global DLL
    global _lib_handle
    if not isinstance(DLL,str):
        raise RuntimeError(f"'DLL' must be of type `str`")
    if _lib_handle == NULL:
        _lib_handle = loader.open_library(DLL.encode("utf-8"))

cdef void __init_symbol(void** result, const char* name):
    global _lib_handle
    if _lib_handle == NULL:
        __init()
    if result[0] == NULL:
        result[0] = loader.load_symbol(_lib_handle, name)


cdef void* _LLVMAddLoopVectorizePass__funptr = NULL
# See llvm::createLoopVectorizePass function. */
cdef void LLVMAddLoopVectorizePass(LLVMPassManagerRef PM):
    global _LLVMAddLoopVectorizePass__funptr
    __init_symbol(&_LLVMAddLoopVectorizePass__funptr,"LLVMAddLoopVectorizePass")
    with nogil:
        (<void (*)(LLVMPassManagerRef) noexcept nogil> _LLVMAddLoopVectorizePass__funptr)(PM)


cdef void* _LLVMAddSLPVectorizePass__funptr = NULL
# See llvm::createSLPVectorizerPass function. */
cdef void LLVMAddSLPVectorizePass(LLVMPassManagerRef PM):
    global _LLVMAddSLPVectorizePass__funptr
    __init_symbol(&_LLVMAddSLPVectorizePass__funptr,"LLVMAddSLPVectorizePass")
    with nogil:
        (<void (*)(LLVMPassManagerRef) noexcept nogil> _LLVMAddSLPVectorizePass__funptr)(PM)
