# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

cimport rocm.llvm._util.posixloader as loader
cdef void* _lib_handle = NULL

cdef void __init() nogil:
    global _lib_handle
    if _lib_handle == NULL:
        with gil:
            _lib_handle = loader.open_library("librocmllvm.so")

cdef void __init_symbol(void** result, const char* name) nogil:
    global _lib_handle
    if _lib_handle == NULL:
        __init()
    if result[0] == NULL:
        with gil:
            result[0] = loader.load_symbol(_lib_handle, name) 


cdef void* _LLVMAddConstantMergePass__funptr = NULL
# See llvm::createConstantMergePass function. */
cdef void LLVMAddConstantMergePass(LLVMPassManagerRef PM) nogil:
    global _LLVMAddConstantMergePass__funptr
    __init_symbol(&_LLVMAddConstantMergePass__funptr,"LLVMAddConstantMergePass")
    (<void (*)(LLVMPassManagerRef) nogil> _LLVMAddConstantMergePass__funptr)(PM)


cdef void* _LLVMAddMergeFunctionsPass__funptr = NULL
# See llvm::createMergeFunctionsPass function. */
cdef void LLVMAddMergeFunctionsPass(LLVMPassManagerRef PM) nogil:
    global _LLVMAddMergeFunctionsPass__funptr
    __init_symbol(&_LLVMAddMergeFunctionsPass__funptr,"LLVMAddMergeFunctionsPass")
    (<void (*)(LLVMPassManagerRef) nogil> _LLVMAddMergeFunctionsPass__funptr)(PM)


cdef void* _LLVMAddCalledValuePropagationPass__funptr = NULL
# See llvm::createCalledValuePropagationPass function. */
cdef void LLVMAddCalledValuePropagationPass(LLVMPassManagerRef PM) nogil:
    global _LLVMAddCalledValuePropagationPass__funptr
    __init_symbol(&_LLVMAddCalledValuePropagationPass__funptr,"LLVMAddCalledValuePropagationPass")
    (<void (*)(LLVMPassManagerRef) nogil> _LLVMAddCalledValuePropagationPass__funptr)(PM)


cdef void* _LLVMAddDeadArgEliminationPass__funptr = NULL
# See llvm::createDeadArgEliminationPass function. */
cdef void LLVMAddDeadArgEliminationPass(LLVMPassManagerRef PM) nogil:
    global _LLVMAddDeadArgEliminationPass__funptr
    __init_symbol(&_LLVMAddDeadArgEliminationPass__funptr,"LLVMAddDeadArgEliminationPass")
    (<void (*)(LLVMPassManagerRef) nogil> _LLVMAddDeadArgEliminationPass__funptr)(PM)


cdef void* _LLVMAddFunctionAttrsPass__funptr = NULL
# See llvm::createFunctionAttrsPass function. */
cdef void LLVMAddFunctionAttrsPass(LLVMPassManagerRef PM) nogil:
    global _LLVMAddFunctionAttrsPass__funptr
    __init_symbol(&_LLVMAddFunctionAttrsPass__funptr,"LLVMAddFunctionAttrsPass")
    (<void (*)(LLVMPassManagerRef) nogil> _LLVMAddFunctionAttrsPass__funptr)(PM)


cdef void* _LLVMAddFunctionInliningPass__funptr = NULL
# See llvm::createFunctionInliningPass function. */
cdef void LLVMAddFunctionInliningPass(LLVMPassManagerRef PM) nogil:
    global _LLVMAddFunctionInliningPass__funptr
    __init_symbol(&_LLVMAddFunctionInliningPass__funptr,"LLVMAddFunctionInliningPass")
    (<void (*)(LLVMPassManagerRef) nogil> _LLVMAddFunctionInliningPass__funptr)(PM)


cdef void* _LLVMAddAlwaysInlinerPass__funptr = NULL
# See llvm::createAlwaysInlinerPass function. */
cdef void LLVMAddAlwaysInlinerPass(LLVMPassManagerRef PM) nogil:
    global _LLVMAddAlwaysInlinerPass__funptr
    __init_symbol(&_LLVMAddAlwaysInlinerPass__funptr,"LLVMAddAlwaysInlinerPass")
    (<void (*)(LLVMPassManagerRef) nogil> _LLVMAddAlwaysInlinerPass__funptr)(PM)


cdef void* _LLVMAddGlobalDCEPass__funptr = NULL
# See llvm::createGlobalDCEPass function. */
cdef void LLVMAddGlobalDCEPass(LLVMPassManagerRef PM) nogil:
    global _LLVMAddGlobalDCEPass__funptr
    __init_symbol(&_LLVMAddGlobalDCEPass__funptr,"LLVMAddGlobalDCEPass")
    (<void (*)(LLVMPassManagerRef) nogil> _LLVMAddGlobalDCEPass__funptr)(PM)


cdef void* _LLVMAddGlobalOptimizerPass__funptr = NULL
# See llvm::createGlobalOptimizerPass function. */
cdef void LLVMAddGlobalOptimizerPass(LLVMPassManagerRef PM) nogil:
    global _LLVMAddGlobalOptimizerPass__funptr
    __init_symbol(&_LLVMAddGlobalOptimizerPass__funptr,"LLVMAddGlobalOptimizerPass")
    (<void (*)(LLVMPassManagerRef) nogil> _LLVMAddGlobalOptimizerPass__funptr)(PM)


cdef void* _LLVMAddIPSCCPPass__funptr = NULL
# See llvm::createIPSCCPPass function. */
cdef void LLVMAddIPSCCPPass(LLVMPassManagerRef PM) nogil:
    global _LLVMAddIPSCCPPass__funptr
    __init_symbol(&_LLVMAddIPSCCPPass__funptr,"LLVMAddIPSCCPPass")
    (<void (*)(LLVMPassManagerRef) nogil> _LLVMAddIPSCCPPass__funptr)(PM)


cdef void* _LLVMAddInternalizePass__funptr = NULL
# See llvm::createInternalizePass function. */
cdef void LLVMAddInternalizePass(LLVMPassManagerRef arg0,unsigned int AllButMain) nogil:
    global _LLVMAddInternalizePass__funptr
    __init_symbol(&_LLVMAddInternalizePass__funptr,"LLVMAddInternalizePass")
    (<void (*)(LLVMPassManagerRef,unsigned int) nogil> _LLVMAddInternalizePass__funptr)(arg0,AllButMain)


cdef void* _LLVMAddInternalizePassWithMustPreservePredicate__funptr = NULL
# 
# Create and add the internalize pass to the given pass manager with the
# provided preservation callback.
# 
# The context parameter is forwarded to the callback on each invocation.
# As such, it is the responsibility of the caller to extend its lifetime
# until execution of this pass has finished.
# 
# @see llvm::createInternalizePass function.
cdef void LLVMAddInternalizePassWithMustPreservePredicate(LLVMPassManagerRef PM,void * Context,LLVMAddInternalizePassWithMustPreservePredicate_anon_funptr_0 MustPreserve):
    global _LLVMAddInternalizePassWithMustPreservePredicate__funptr
    __init_symbol(&_LLVMAddInternalizePassWithMustPreservePredicate__funptr,"LLVMAddInternalizePassWithMustPreservePredicate")
    (<void (*)(LLVMPassManagerRef,void *,LLVMAddInternalizePassWithMustPreservePredicate_anon_funptr_0)> _LLVMAddInternalizePassWithMustPreservePredicate__funptr)(PM,Context,MustPreserve)


cdef void* _LLVMAddStripDeadPrototypesPass__funptr = NULL
# See llvm::createStripDeadPrototypesPass function. */
cdef void LLVMAddStripDeadPrototypesPass(LLVMPassManagerRef PM) nogil:
    global _LLVMAddStripDeadPrototypesPass__funptr
    __init_symbol(&_LLVMAddStripDeadPrototypesPass__funptr,"LLVMAddStripDeadPrototypesPass")
    (<void (*)(LLVMPassManagerRef) nogil> _LLVMAddStripDeadPrototypesPass__funptr)(PM)


cdef void* _LLVMAddStripSymbolsPass__funptr = NULL
# See llvm::createStripSymbolsPass function. */
cdef void LLVMAddStripSymbolsPass(LLVMPassManagerRef PM) nogil:
    global _LLVMAddStripSymbolsPass__funptr
    __init_symbol(&_LLVMAddStripSymbolsPass__funptr,"LLVMAddStripSymbolsPass")
    (<void (*)(LLVMPassManagerRef) nogil> _LLVMAddStripSymbolsPass__funptr)(PM)
