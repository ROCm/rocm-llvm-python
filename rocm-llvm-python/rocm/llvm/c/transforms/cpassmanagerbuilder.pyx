# MIT License
#
# Copyright (c) 2023-2024 Advanced Micro Devices, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

cimport rocm.llvm._util.posixloader as loader
cdef void* _lib_handle = NULL

DLL = b"librocmllvm.so"

cdef int __init() except 1 nogil:
    global DLL
    global _lib_handle
    cdef char* dll = NULL
    if _lib_handle == NULL:
        with gil:
            dll = DLL
        return loader.open_library(&_lib_handle,dll)
    return 0

cdef int __init_symbol(void** result, const char* name) except 1 nogil:
    global _lib_handle
    cdef int init_result = 0
    if _lib_handle == NULL:
        init_result = __init()
        if init_result > 0:
            return init_result
    if result[0] == NULL:
        return loader.load_symbol(result,_lib_handle, name)
    return 0


cdef void* _LLVMPassManagerBuilderCreate__funptr = NULL
# See llvm::PassManagerBuilder. */
cdef LLVMPassManagerBuilderRef LLVMPassManagerBuilderCreate():
    global _LLVMPassManagerBuilderCreate__funptr
    if __init_symbol(&_LLVMPassManagerBuilderCreate__funptr,"LLVMPassManagerBuilderCreate") > 0:
        pass
    return (<LLVMPassManagerBuilderRef (*)() noexcept nogil> _LLVMPassManagerBuilderCreate__funptr)()


cdef void* _LLVMPassManagerBuilderDispose__funptr = NULL
cdef void LLVMPassManagerBuilderDispose(LLVMPassManagerBuilderRef PMB):
    global _LLVMPassManagerBuilderDispose__funptr
    if __init_symbol(&_LLVMPassManagerBuilderDispose__funptr,"LLVMPassManagerBuilderDispose") > 0:
        pass
    (<void (*)(LLVMPassManagerBuilderRef) noexcept nogil> _LLVMPassManagerBuilderDispose__funptr)(PMB)


cdef void* _LLVMPassManagerBuilderSetOptLevel__funptr = NULL
# See llvm::PassManagerBuilder::OptLevel. */
cdef void LLVMPassManagerBuilderSetOptLevel(LLVMPassManagerBuilderRef PMB,unsigned int OptLevel):
    global _LLVMPassManagerBuilderSetOptLevel__funptr
    if __init_symbol(&_LLVMPassManagerBuilderSetOptLevel__funptr,"LLVMPassManagerBuilderSetOptLevel") > 0:
        pass
    (<void (*)(LLVMPassManagerBuilderRef,unsigned int) noexcept nogil> _LLVMPassManagerBuilderSetOptLevel__funptr)(PMB,OptLevel)


cdef void* _LLVMPassManagerBuilderSetSizeLevel__funptr = NULL
# See llvm::PassManagerBuilder::SizeLevel. */
cdef void LLVMPassManagerBuilderSetSizeLevel(LLVMPassManagerBuilderRef PMB,unsigned int SizeLevel):
    global _LLVMPassManagerBuilderSetSizeLevel__funptr
    if __init_symbol(&_LLVMPassManagerBuilderSetSizeLevel__funptr,"LLVMPassManagerBuilderSetSizeLevel") > 0:
        pass
    (<void (*)(LLVMPassManagerBuilderRef,unsigned int) noexcept nogil> _LLVMPassManagerBuilderSetSizeLevel__funptr)(PMB,SizeLevel)


cdef void* _LLVMPassManagerBuilderSetDisableUnitAtATime__funptr = NULL
# See llvm::PassManagerBuilder::DisableUnitAtATime. */
cdef void LLVMPassManagerBuilderSetDisableUnitAtATime(LLVMPassManagerBuilderRef PMB,int Value):
    global _LLVMPassManagerBuilderSetDisableUnitAtATime__funptr
    if __init_symbol(&_LLVMPassManagerBuilderSetDisableUnitAtATime__funptr,"LLVMPassManagerBuilderSetDisableUnitAtATime") > 0:
        pass
    (<void (*)(LLVMPassManagerBuilderRef,int) noexcept nogil> _LLVMPassManagerBuilderSetDisableUnitAtATime__funptr)(PMB,Value)


cdef void* _LLVMPassManagerBuilderSetDisableUnrollLoops__funptr = NULL
# See llvm::PassManagerBuilder::DisableUnrollLoops. */
cdef void LLVMPassManagerBuilderSetDisableUnrollLoops(LLVMPassManagerBuilderRef PMB,int Value):
    global _LLVMPassManagerBuilderSetDisableUnrollLoops__funptr
    if __init_symbol(&_LLVMPassManagerBuilderSetDisableUnrollLoops__funptr,"LLVMPassManagerBuilderSetDisableUnrollLoops") > 0:
        pass
    (<void (*)(LLVMPassManagerBuilderRef,int) noexcept nogil> _LLVMPassManagerBuilderSetDisableUnrollLoops__funptr)(PMB,Value)


cdef void* _LLVMPassManagerBuilderSetDisableSimplifyLibCalls__funptr = NULL
# See llvm::PassManagerBuilder::DisableSimplifyLibCalls */
cdef void LLVMPassManagerBuilderSetDisableSimplifyLibCalls(LLVMPassManagerBuilderRef PMB,int Value):
    global _LLVMPassManagerBuilderSetDisableSimplifyLibCalls__funptr
    if __init_symbol(&_LLVMPassManagerBuilderSetDisableSimplifyLibCalls__funptr,"LLVMPassManagerBuilderSetDisableSimplifyLibCalls") > 0:
        pass
    (<void (*)(LLVMPassManagerBuilderRef,int) noexcept nogil> _LLVMPassManagerBuilderSetDisableSimplifyLibCalls__funptr)(PMB,Value)


cdef void* _LLVMPassManagerBuilderUseInlinerWithThreshold__funptr = NULL
# See llvm::PassManagerBuilder::Inliner. */
cdef void LLVMPassManagerBuilderUseInlinerWithThreshold(LLVMPassManagerBuilderRef PMB,unsigned int Threshold):
    global _LLVMPassManagerBuilderUseInlinerWithThreshold__funptr
    if __init_symbol(&_LLVMPassManagerBuilderUseInlinerWithThreshold__funptr,"LLVMPassManagerBuilderUseInlinerWithThreshold") > 0:
        pass
    (<void (*)(LLVMPassManagerBuilderRef,unsigned int) noexcept nogil> _LLVMPassManagerBuilderUseInlinerWithThreshold__funptr)(PMB,Threshold)


cdef void* _LLVMPassManagerBuilderPopulateFunctionPassManager__funptr = NULL
# See llvm::PassManagerBuilder::populateFunctionPassManager. */
cdef void LLVMPassManagerBuilderPopulateFunctionPassManager(LLVMPassManagerBuilderRef PMB,LLVMPassManagerRef PM):
    global _LLVMPassManagerBuilderPopulateFunctionPassManager__funptr
    if __init_symbol(&_LLVMPassManagerBuilderPopulateFunctionPassManager__funptr,"LLVMPassManagerBuilderPopulateFunctionPassManager") > 0:
        pass
    (<void (*)(LLVMPassManagerBuilderRef,LLVMPassManagerRef) noexcept nogil> _LLVMPassManagerBuilderPopulateFunctionPassManager__funptr)(PMB,PM)


cdef void* _LLVMPassManagerBuilderPopulateModulePassManager__funptr = NULL
# See llvm::PassManagerBuilder::populateModulePassManager. */
cdef void LLVMPassManagerBuilderPopulateModulePassManager(LLVMPassManagerBuilderRef PMB,LLVMPassManagerRef PM):
    global _LLVMPassManagerBuilderPopulateModulePassManager__funptr
    if __init_symbol(&_LLVMPassManagerBuilderPopulateModulePassManager__funptr,"LLVMPassManagerBuilderPopulateModulePassManager") > 0:
        pass
    (<void (*)(LLVMPassManagerBuilderRef,LLVMPassManagerRef) noexcept nogil> _LLVMPassManagerBuilderPopulateModulePassManager__funptr)(PMB,PM)
