# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

from libc.stdint cimport *
ctypedef bint _Bool # bool is not a reserved keyword in C, _Bool is
from rocm.llvm.c.ctypes cimport *
# See llvm::createConstantMergePass function. */
cdef void LLVMAddConstantMergePass(LLVMPassManagerRef PM)


# See llvm::createMergeFunctionsPass function. */
cdef void LLVMAddMergeFunctionsPass(LLVMPassManagerRef PM)


# See llvm::createCalledValuePropagationPass function. */
cdef void LLVMAddCalledValuePropagationPass(LLVMPassManagerRef PM)


# See llvm::createDeadArgEliminationPass function. */
cdef void LLVMAddDeadArgEliminationPass(LLVMPassManagerRef PM)


# See llvm::createFunctionAttrsPass function. */
cdef void LLVMAddFunctionAttrsPass(LLVMPassManagerRef PM)


# See llvm::createFunctionInliningPass function. */
cdef void LLVMAddFunctionInliningPass(LLVMPassManagerRef PM)


# See llvm::createAlwaysInlinerPass function. */
cdef void LLVMAddAlwaysInlinerPass(LLVMPassManagerRef PM)


# See llvm::createGlobalDCEPass function. */
cdef void LLVMAddGlobalDCEPass(LLVMPassManagerRef PM)


# See llvm::createGlobalOptimizerPass function. */
cdef void LLVMAddGlobalOptimizerPass(LLVMPassManagerRef PM)


# See llvm::createIPSCCPPass function. */
cdef void LLVMAddIPSCCPPass(LLVMPassManagerRef PM)


# See llvm::createInternalizePass function. */
cdef void LLVMAddInternalizePass(LLVMPassManagerRef arg0,unsigned int AllButMain)


ctypedef LLVMBool (*LLVMAddInternalizePassWithMustPreservePredicate_anon_funptr_0) (LLVMValueRef,void *)

# 
# Create and add the internalize pass to the given pass manager with the
# provided preservation callback.
# 
# The context parameter is forwarded to the callback on each invocation.
# As such, it is the responsibility of the caller to extend its lifetime
# until execution of this pass has finished.
# 
# @see llvm::createInternalizePass function.
cdef void LLVMAddInternalizePassWithMustPreservePredicate(LLVMPassManagerRef PM,void * Context,LLVMAddInternalizePassWithMustPreservePredicate_anon_funptr_0 MustPreserve)


# See llvm::createStripDeadPrototypesPass function. */
cdef void LLVMAddStripDeadPrototypesPass(LLVMPassManagerRef PM)


# See llvm::createStripSymbolsPass function. */
cdef void LLVMAddStripSymbolsPass(LLVMPassManagerRef PM)
