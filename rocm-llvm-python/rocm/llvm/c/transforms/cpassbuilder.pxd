# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

from libc.stdint cimport *
ctypedef bint _Bool # bool is not a reserved keyword in C, _Bool is
from rocm.llvm.c.cerror cimport *
from rocm.llvm.c.ctargetmachine cimport *
from rocm.llvm.c.ctypes cimport *
cdef extern from "llvm-c/Transforms/PassBuilder.h":

    cdef struct LLVMOpaquePassBuilderOptions:
        pass

    ctypedef LLVMOpaquePassBuilderOptions * LLVMPassBuilderOptionsRef

# 
# Construct and run a set of passes over a module
# 
# This function takes a string with the passes that should be used. The format
# of this string is the same as opt's -passes argument for the new pass
# manager. Individual passes may be specified, separated by commas. Full
# pipelines may also be invoked using `default<O3>` and friends. See opt for
# full reference of the Passes format.
cdef LLVMErrorRef LLVMRunPasses(LLVMModuleRef M,const char * Passes,LLVMTargetMachineRef TM,LLVMPassBuilderOptionsRef Options)


# 
# Create a new set of options for a PassBuilder
# 
# Ownership of the returned instance is given to the client, and they are
# responsible for it. The client should call LLVMDisposePassBuilderOptions
# to free the pass builder options.
cdef LLVMPassBuilderOptionsRef LLVMCreatePassBuilderOptions()


# 
# Toggle adding the VerifierPass for the PassBuilder, ensuring all functions
# inside the module is valid.
cdef void LLVMPassBuilderOptionsSetVerifyEach(LLVMPassBuilderOptionsRef Options,int VerifyEach)


# 
# Toggle debug logging when running the PassBuilder
cdef void LLVMPassBuilderOptionsSetDebugLogging(LLVMPassBuilderOptionsRef Options,int DebugLogging)



cdef void LLVMPassBuilderOptionsSetLoopInterleaving(LLVMPassBuilderOptionsRef Options,int LoopInterleaving)



cdef void LLVMPassBuilderOptionsSetLoopVectorization(LLVMPassBuilderOptionsRef Options,int LoopVectorization)



cdef void LLVMPassBuilderOptionsSetSLPVectorization(LLVMPassBuilderOptionsRef Options,int SLPVectorization)



cdef void LLVMPassBuilderOptionsSetLoopUnrolling(LLVMPassBuilderOptionsRef Options,int LoopUnrolling)



cdef void LLVMPassBuilderOptionsSetForgetAllSCEVInLoopUnroll(LLVMPassBuilderOptionsRef Options,int ForgetAllSCEVInLoopUnroll)



cdef void LLVMPassBuilderOptionsSetLicmMssaOptCap(LLVMPassBuilderOptionsRef Options,unsigned int LicmMssaOptCap)



cdef void LLVMPassBuilderOptionsSetLicmMssaNoAccForPromotionCap(LLVMPassBuilderOptionsRef Options,unsigned int LicmMssaNoAccForPromotionCap)



cdef void LLVMPassBuilderOptionsSetCallGraphProfile(LLVMPassBuilderOptionsRef Options,int CallGraphProfile)



cdef void LLVMPassBuilderOptionsSetMergeFunctions(LLVMPassBuilderOptionsRef Options,int MergeFunctions)


# 
# Dispose of a heap-allocated PassBuilderOptions instance
cdef void LLVMDisposePassBuilderOptions(LLVMPassBuilderOptionsRef Options)
