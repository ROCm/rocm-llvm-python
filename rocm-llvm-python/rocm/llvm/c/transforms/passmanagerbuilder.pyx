# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.


"""
(No short description)

Attributes:
    LLVMPassManagerBuilderRef:
        alias of `~.LLVMOpaquePassManagerBuilder`

"""

import cython
import ctypes
import enum

from rocm.llvm.c.types import LLVMMemoryBufferRef
from rocm.llvm.c.types import LLVMContextRef
from rocm.llvm.c.types import LLVMModuleRef
from rocm.llvm.c.types import LLVMTypeRef
from rocm.llvm.c.types import LLVMValueRef
from rocm.llvm.c.types import LLVMBasicBlockRef
from rocm.llvm.c.types import LLVMMetadataRef
from rocm.llvm.c.types import LLVMNamedMDNodeRef
from rocm.llvm.c.types import LLVMValueMetadataEntry
from rocm.llvm.c.types import LLVMBuilderRef
from rocm.llvm.c.types import LLVMDIBuilderRef
from rocm.llvm.c.types import LLVMModuleProviderRef
from rocm.llvm.c.types import LLVMPassManagerRef
from rocm.llvm.c.types import LLVMPassRegistryRef
from rocm.llvm.c.types import LLVMUseRef
from rocm.llvm.c.types import LLVMAttributeRef
from rocm.llvm.c.types import LLVMDiagnosticInfoRef
from rocm.llvm.c.types import LLVMComdatRef
from rocm.llvm.c.types import LLVMModuleFlagEntry
from rocm.llvm.c.types import LLVMJITEventListenerRef
from rocm.llvm.c.types import LLVMBinaryRef

cdef class LLVMOpaquePassManagerBuilder(rocm.llvm._util.types.Pointer):
    """Python wrapper for cdef class cpassmanagerbuilder.LLVMOpaquePassManagerBuilder.
    
    Python wrapper for cdef class cpassmanagerbuilder.LLVMOpaquePassManagerBuilder.

    If this type is initialized via its `__init__` method, it allocates a member of the underlying C type and
    destroys it again if the wrapper type is deallocted.

    This type also serves as adapter when appearing as argument type in a function signature.
    In this case, the type can further be initialized from the following Python objects
    that you can pass as argument instead:
    
    * `None`:

      This will set the ``self._ptr`` attribute to ``NULL``.

    * `int`:
      
      Interprets the integer value as pointer address and writes it to ``self._ptr``.
      No ownership is transferred.
      
    * `ctypes.c_void_p`:
      
      Takes the pointer address ``pyobj.value`` and writes it to ``self._ptr``.
      No ownership is transferred.
    
    
    Type checks are performed in the above order.

    C Attributes:
        _ptr (C type ``void *``, protected):
            Stores a pointer to the data of the original Python object.
        _ptr_owner (C type ``bint``, protected):
            If this wrapper is the owner of the underlying data.
        _py_buffer (C type ``Py_buffer`, protected):
            Stores a pointer to the data of the original Python object.
        _py_buffer_acquired (C type ``bint``, protected):
            Stores a pointer to the data of the original Python object.
    """
    # members declared in pxd file

    def __cinit__(self):
        self._ptr = NULL
        self.ptr_owner = False
        self._py_buffer_acquired = False

    cdef cpassmanagerbuilder.LLVMOpaquePassManagerBuilder* get_element_ptr(self):
        return <cpassmanagerbuilder.LLVMOpaquePassManagerBuilder*>self._ptr
        
    @staticmethod
    cdef LLVMOpaquePassManagerBuilder from_ptr(void* ptr, bint owner=False):
        """Factory function to create ``LLVMOpaquePassManagerBuilder`` objects from
        given ``cpassmanagerbuilder.LLVMOpaquePassManagerBuilder`` pointer.
        """
        # Fast call to __new__() that bypasses the __init__() constructor.
        cdef LLVMOpaquePassManagerBuilder wrapper = LLVMOpaquePassManagerBuilder.__new__(LLVMOpaquePassManagerBuilder)
        wrapper._ptr = ptr
        wrapper.ptr_owner = owner
        return wrapper

    @staticmethod
    cdef LLVMOpaquePassManagerBuilder from_pyobj(object pyobj):
        """Derives a LLVMOpaquePassManagerBuilder from a Python object.

        Derives a LLVMOpaquePassManagerBuilder from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMOpaquePassManagerBuilder`` reference, this method
        returns it directly. No new ``LLVMOpaquePassManagerBuilder`` is created in this case.

        Args:
            pyobj (object): Must be either `None`; a `rocm.llvm._util.types.Pointer`; a simple, contiguous buffer according to the buffer protocol;
                            or of type `LLVMOpaquePassManagerBuilder`; `int`; or `ctypes.c_void_p`.

        Note:
            This routine does not perform a copy but returns the original ``pyobj``
            if ``pyobj`` is an instance of LLVMOpaquePassManagerBuilder!
        """
        cdef LLVMOpaquePassManagerBuilder wrapper = LLVMOpaquePassManagerBuilder.__new__(LLVMOpaquePassManagerBuilder)
        cdef dict cuda_array_interface = getattr(pyobj, "__cuda_array_interface__", None)

        if pyobj is None:
            wrapper._ptr = NULL
        elif isinstance(pyobj,LLVMOpaquePassManagerBuilder):
            return pyobj
        elif isinstance(pyobj,int):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj)
        elif isinstance(pyobj,ctypes.c_void_p):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj.value) if pyobj.value != None else NULL
        elif cpython.buffer.PyObject_CheckBuffer(pyobj):
            err = cpython.buffer.PyObject_GetBuffer( 
                pyobj,
                &wrapper._py_buffer, 
                cpython.buffer.PyBUF_SIMPLE | cpython.buffer.PyBUF_ANY_CONTIGUOUS
            )
            if err == -1:
                raise RuntimeError("failed to create simple, contiguous Py_buffer from Python object")
            wrapper._py_buffer_acquired = True
            wrapper._ptr = wrapper._py_buffer.buf
        elif isinstance(pyobj,rocm.llvm._util.types.Pointer):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(int(pyobj))
        else:
            raise TypeError(f"unsupported input type: '{str(type(pyobj))}'")
        return wrapper
    def __dealloc__(self):
        # Release the buffer handle
        if self._py_buffer_acquired is True:
            cpython.buffer.PyBuffer_Release(&self._py_buffer)
    
    def __int__(self):
        """Returns the data's address as long integer.
        """
        return cpython.long.PyLong_FromVoidPtr(self._ptr)
    def __repr__(self):
        return f"<LLVMOpaquePassManagerBuilder object, self.ptr={int(self)}>"
    def as_c_void_p(self):
        """Returns the data's address as `ctypes.c_void_p`
        Note:
            Implemented as function to not collide with 
            autogenerated property names.
        """
        return ctypes.c_void_p(int(self))
    @staticmethod
    def PROPERTIES():
        return []

    def __contains__(self,item):
        properties = self.PROPERTIES()
        return item in properties

    def __getitem__(self,item):
        properties = self.PROPERTIES()
        if isinstance(item,int):
            if item < 0 or item >= len(properties):
                raise IndexError()
            return getattr(self,properties[item])
        raise ValueError("'item' type must be 'int'")


LLVMPassManagerBuilderRef = LLVMOpaquePassManagerBuilder

@cython.embedsignature(True)
def LLVMPassManagerBuilderCreate():
    r"""(No short description, might be part of a group.)

    See llvm`~.PassManagerBuilder`. */
    """
    _LLVMPassManagerBuilderCreate__retval = LLVMOpaquePassManagerBuilder.from_ptr(cpassmanagerbuilder.LLVMPassManagerBuilderCreate())
    return None if _LLVMPassManagerBuilderCreate__retval._ptr == NULL else _LLVMPassManagerBuilderCreate__retval


@cython.embedsignature(True)
def LLVMPassManagerBuilderDispose(object PMB):
    r"""(No short description, might be part of a group.)

    Args:
        PMB (`~.LLVMOpaquePassManagerBuilder`/`~.object`):
            (undocumented)
    """
    cpassmanagerbuilder.LLVMPassManagerBuilderDispose(
        LLVMOpaquePassManagerBuilder.from_pyobj(PMB).get_element_ptr())


@cython.embedsignature(True)
def LLVMPassManagerBuilderSetOptLevel(object PMB, unsigned int OptLevel):
    r"""(No short description, might be part of a group.)

    See llvm`~.PassManagerBuilder.OptLevel`. */

    Args:
        PMB (`~.LLVMOpaquePassManagerBuilder`/`~.object`):
            (undocumented)

        OptLevel (`~.int`):
            (undocumented)
    """
    cpassmanagerbuilder.LLVMPassManagerBuilderSetOptLevel(
        LLVMOpaquePassManagerBuilder.from_pyobj(PMB).get_element_ptr(),OptLevel)


@cython.embedsignature(True)
def LLVMPassManagerBuilderSetSizeLevel(object PMB, unsigned int SizeLevel):
    r"""(No short description, might be part of a group.)

    See llvm`~.PassManagerBuilder.SizeLevel`. */

    Args:
        PMB (`~.LLVMOpaquePassManagerBuilder`/`~.object`):
            (undocumented)

        SizeLevel (`~.int`):
            (undocumented)
    """
    cpassmanagerbuilder.LLVMPassManagerBuilderSetSizeLevel(
        LLVMOpaquePassManagerBuilder.from_pyobj(PMB).get_element_ptr(),SizeLevel)


@cython.embedsignature(True)
def LLVMPassManagerBuilderSetDisableUnitAtATime(object PMB, int Value):
    r"""(No short description, might be part of a group.)

    See llvm`~.PassManagerBuilder.DisableUnitAtATime`. */

    Args:
        PMB (`~.LLVMOpaquePassManagerBuilder`/`~.object`):
            (undocumented)

        Value (`~.int`):
            (undocumented)
    """
    cpassmanagerbuilder.LLVMPassManagerBuilderSetDisableUnitAtATime(
        LLVMOpaquePassManagerBuilder.from_pyobj(PMB).get_element_ptr(),Value)


@cython.embedsignature(True)
def LLVMPassManagerBuilderSetDisableUnrollLoops(object PMB, int Value):
    r"""(No short description, might be part of a group.)

    See llvm`~.PassManagerBuilder.DisableUnrollLoops`. */

    Args:
        PMB (`~.LLVMOpaquePassManagerBuilder`/`~.object`):
            (undocumented)

        Value (`~.int`):
            (undocumented)
    """
    cpassmanagerbuilder.LLVMPassManagerBuilderSetDisableUnrollLoops(
        LLVMOpaquePassManagerBuilder.from_pyobj(PMB).get_element_ptr(),Value)


@cython.embedsignature(True)
def LLVMPassManagerBuilderSetDisableSimplifyLibCalls(object PMB, int Value):
    r"""(No short description, might be part of a group.)

    See llvm`~.PassManagerBuilder.DisableSimplifyLibCalls` */

    Args:
        PMB (`~.LLVMOpaquePassManagerBuilder`/`~.object`):
            (undocumented)

        Value (`~.int`):
            (undocumented)
    """
    cpassmanagerbuilder.LLVMPassManagerBuilderSetDisableSimplifyLibCalls(
        LLVMOpaquePassManagerBuilder.from_pyobj(PMB).get_element_ptr(),Value)


@cython.embedsignature(True)
def LLVMPassManagerBuilderUseInlinerWithThreshold(object PMB, unsigned int Threshold):
    r"""(No short description, might be part of a group.)

    See llvm`~.PassManagerBuilder.Inliner`. */

    Args:
        PMB (`~.LLVMOpaquePassManagerBuilder`/`~.object`):
            (undocumented)

        Threshold (`~.int`):
            (undocumented)
    """
    cpassmanagerbuilder.LLVMPassManagerBuilderUseInlinerWithThreshold(
        LLVMOpaquePassManagerBuilder.from_pyobj(PMB).get_element_ptr(),Threshold)


@cython.embedsignature(True)
def LLVMPassManagerBuilderPopulateFunctionPassManager(object PMB, object PM):
    r"""(No short description, might be part of a group.)

    See llvm`~.PassManagerBuilder.populateFunctionPassManager`. */

    Args:
        PMB (`~.LLVMOpaquePassManagerBuilder`/`~.object`):
            (undocumented)

        PM (`~.LLVMOpaquePassManager`/`~.object`):
            (undocumented)
    """
    cpassmanagerbuilder.LLVMPassManagerBuilderPopulateFunctionPassManager(
        LLVMOpaquePassManagerBuilder.from_pyobj(PMB).get_element_ptr(),
        LLVMOpaquePassManager.from_pyobj(PM).get_element_ptr())


@cython.embedsignature(True)
def LLVMPassManagerBuilderPopulateModulePassManager(object PMB, object PM):
    r"""(No short description, might be part of a group.)

    See llvm`~.PassManagerBuilder.populateModulePassManager`. */

    Args:
        PMB (`~.LLVMOpaquePassManagerBuilder`/`~.object`):
            (undocumented)

        PM (`~.LLVMOpaquePassManager`/`~.object`):
            (undocumented)
    """
    cpassmanagerbuilder.LLVMPassManagerBuilderPopulateModulePassManager(
        LLVMOpaquePassManagerBuilder.from_pyobj(PMB).get_element_ptr(),
        LLVMOpaquePassManager.from_pyobj(PM).get_element_ptr())

__all__ = [
    "LLVMOpaquePassManagerBuilder",
    "LLVMPassManagerBuilderRef",
    "LLVMPassManagerBuilderCreate",
    "LLVMPassManagerBuilderDispose",
    "LLVMPassManagerBuilderSetOptLevel",
    "LLVMPassManagerBuilderSetSizeLevel",
    "LLVMPassManagerBuilderSetDisableUnitAtATime",
    "LLVMPassManagerBuilderSetDisableUnrollLoops",
    "LLVMPassManagerBuilderSetDisableSimplifyLibCalls",
    "LLVMPassManagerBuilderUseInlinerWithThreshold",
    "LLVMPassManagerBuilderPopulateFunctionPassManager",
    "LLVMPassManagerBuilderPopulateModulePassManager",
]