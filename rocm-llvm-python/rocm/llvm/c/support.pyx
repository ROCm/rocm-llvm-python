# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.


"""
(No short description)


"""

import cython
import ctypes
import enum



from rocm.llvm.c.types import LLVMBool
from rocm.llvm.c.types import LLVMMemoryBufferRef
from rocm.llvm.c.types import LLVMContextRef
from rocm.llvm.c.types import LLVMModuleRef
from rocm.llvm.c.types import LLVMTypeRef
from rocm.llvm.c.types import LLVMValueRef
from rocm.llvm.c.types import LLVMBasicBlockRef
from rocm.llvm.c.types import LLVMMetadataRef
from rocm.llvm.c.types import LLVMNamedMDNodeRef
from rocm.llvm.c.types import LLVMValueMetadataEntry
from rocm.llvm.c.types import LLVMBuilderRef
from rocm.llvm.c.types import LLVMDIBuilderRef
from rocm.llvm.c.types import LLVMModuleProviderRef
from rocm.llvm.c.types import LLVMPassManagerRef
from rocm.llvm.c.types import LLVMPassRegistryRef
from rocm.llvm.c.types import LLVMUseRef
from rocm.llvm.c.types import LLVMAttributeRef
from rocm.llvm.c.types import LLVMDiagnosticInfoRef
from rocm.llvm.c.types import LLVMComdatRef
from rocm.llvm.c.types import LLVMModuleFlagEntry
from rocm.llvm.c.types import LLVMJITEventListenerRef
from rocm.llvm.c.types import LLVMBinaryRef

@cython.embedsignature(True)
def LLVMLoadLibraryPermanently(const char * Filename):
    r"""(No short description, might be part of a group.)

    This function permanently loads the dynamic library at the given path.
    It is safe to call this function multiple times for the same library.

    See:
        `~.sys``~.`~.DynamicLibrary`.`~.LoadLibraryPermanently``()

    Args:
        Filename (`~.bytes`):
            (undocumented)

    Returns:
        A `~.tuple` of size 1 that contains (in that order):

        * `~.int`
    """
    cdef int _LLVMLoadLibraryPermanently__retval = csupport.LLVMLoadLibraryPermanently(Filename)    # fully specified
    return (_LLVMLoadLibraryPermanently__retval,)


@cython.embedsignature(True)
def LLVMParseCommandLineOptions(int argc, object argv, const char * Overview):
    r"""(No short description, might be part of a group.)

    This function parses the given arguments using the LLVM command line parser.
    Note that the only stable thing about this function is its signature; you
    cannot rely on any particular set of command line arguments being interpreted
    the same way across LLVM versions.

    See:
        `~.llvm``~.`~.cl`.`~.ParseCommandLineOptions``()

    Args:
        argc (`~.int`):
            (undocumented)

        argv (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        Overview (`~.bytes`):
            (undocumented)
    """
    csupport.LLVMParseCommandLineOptions(argc,
        <const char *const *>rocm.llvm._util.types.Pointer.from_pyobj(argv)._ptr,Overview)    # fully specified


@cython.embedsignature(True)
def LLVMSearchForAddressOfSymbol(const char * symbolName):
    r"""(No short description, might be part of a group.)

    This function will search through all previously loaded dynamic
    libraries for the symbol ``symbolName.`` If it is found, the address of
    that symbol is returned. If not, null is returned.

    See:
        `~.sys``~.`~.DynamicLibrary`.`~.SearchForAddressOfSymbol``()

    Args:
        symbolName (`~.bytes`):
            (undocumented)
    """
    _LLVMSearchForAddressOfSymbol__retval = rocm.llvm._util.types.Pointer.from_ptr(csupport.LLVMSearchForAddressOfSymbol(symbolName))    # fully specified
    return (_LLVMSearchForAddressOfSymbol__retval,)


@cython.embedsignature(True)
def LLVMAddSymbol(const char * symbolName, object symbolValue):
    r"""(No short description, might be part of a group.)

    This functions permanently adds the symbol ``symbolName`` with the
    value ``symbolValue.``  These symbols are searched before any
    libraries.

    See:
        `~.sys``~.`~.DynamicLibrary`.`~.AddSymbol``()

    Args:
        symbolName (`~.bytes`):
            (undocumented)

        symbolValue (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    csupport.LLVMAddSymbol(symbolName,
        <void *>rocm.llvm._util.types.Pointer.from_pyobj(symbolValue)._ptr)    # fully specified

__all__ = [
    "LLVMLoadLibraryPermanently",
    "LLVMParseCommandLineOptions",
    "LLVMSearchForAddressOfSymbol",
    "LLVMAddSymbol",
]