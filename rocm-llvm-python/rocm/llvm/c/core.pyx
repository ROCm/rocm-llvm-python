# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.


"""
(No short description)

Attributes:
    LLVMAttributeReturnIndex:
        (undocumented)
    LLVMAttributeFunctionIndex:
        (undocumented)
    LLVMAttributeReturnIndex:
        (undocumented)
    LLVMAttributeFunctionIndex:
        (undocumented)
"""

import cython
import ctypes
import enum

from rocm.llvm.c.errorhandling import LLVMInstallFatalErrorHandler
from rocm.llvm.c.errorhandling import LLVMResetFatalErrorHandler
from rocm.llvm.c.errorhandling import LLVMEnablePrettyStackTrace


from rocm.llvm.c.types import LLVMMemoryBufferRef
from rocm.llvm.c.types import LLVMContextRef
from rocm.llvm.c.types import LLVMModuleRef
from rocm.llvm.c.types import LLVMTypeRef
from rocm.llvm.c.types import LLVMValueRef
from rocm.llvm.c.types import LLVMBasicBlockRef
from rocm.llvm.c.types import LLVMMetadataRef
from rocm.llvm.c.types import LLVMNamedMDNodeRef
from rocm.llvm.c.types import LLVMValueMetadataEntry
from rocm.llvm.c.types import LLVMBuilderRef
from rocm.llvm.c.types import LLVMDIBuilderRef
from rocm.llvm.c.types import LLVMModuleProviderRef
from rocm.llvm.c.types import LLVMPassManagerRef
from rocm.llvm.c.types import LLVMPassRegistryRef
from rocm.llvm.c.types import LLVMUseRef
from rocm.llvm.c.types import LLVMAttributeRef
from rocm.llvm.c.types import LLVMDiagnosticInfoRef
from rocm.llvm.c.types import LLVMComdatRef
from rocm.llvm.c.types import LLVMModuleFlagEntry
from rocm.llvm.c.types import LLVMJITEventListenerRef
from rocm.llvm.c.types import LLVMBinaryRef

class _LLVMOpcode__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMOpcode(_LLVMOpcode__Base):
    """External users depend on the following values being stable. It is not safe to reorder them.

    Attributes:
        LLVMRet:
            (undocumented)
        LLVMBr:
            (undocumented)
        LLVMSwitch:
            (undocumented)
        LLVMIndirectBr:
            (undocumented)
        LLVMInvoke:
            (undocumented)
        LLVMUnreachable:
            (undocumented)
        LLVMCallBr:
            (undocumented)
        LLVMFNeg:
            (undocumented)
        LLVMAdd:
            (undocumented)
        LLVMFAdd:
            (undocumented)
        LLVMSub:
            (undocumented)
        LLVMFSub:
            (undocumented)
        LLVMMul:
            (undocumented)
        LLVMFMul:
            (undocumented)
        LLVMUDiv:
            (undocumented)
        LLVMSDiv:
            (undocumented)
        LLVMFDiv:
            (undocumented)
        LLVMURem:
            (undocumented)
        LLVMSRem:
            (undocumented)
        LLVMFRem:
            (undocumented)
        LLVMShl:
            (undocumented)
        LLVMLShr:
            (undocumented)
        LLVMAShr:
            (undocumented)
        LLVMAnd:
            (undocumented)
        LLVMOr:
            (undocumented)
        LLVMXor:
            (undocumented)
        LLVMAlloca:
            (undocumented)
        LLVMLoad:
            (undocumented)
        LLVMStore:
            (undocumented)
        LLVMGetElementPtr:
            (undocumented)
        LLVMTrunc:
            (undocumented)
        LLVMZExt:
            (undocumented)
        LLVMSExt:
            (undocumented)
        LLVMFPToUI:
            (undocumented)
        LLVMFPToSI:
            (undocumented)
        LLVMUIToFP:
            (undocumented)
        LLVMSIToFP:
            (undocumented)
        LLVMFPTrunc:
            (undocumented)
        LLVMFPExt:
            (undocumented)
        LLVMPtrToInt:
            (undocumented)
        LLVMIntToPtr:
            (undocumented)
        LLVMBitCast:
            (undocumented)
        LLVMAddrSpaceCast:
            (undocumented)
        LLVMICmp:
            (undocumented)
        LLVMFCmp:
            (undocumented)
        LLVMPHI:
            (undocumented)
        LLVMCall:
            (undocumented)
        LLVMSelect:
            (undocumented)
        LLVMUserOp1:
            (undocumented)
        LLVMUserOp2:
            (undocumented)
        LLVMVAArg:
            (undocumented)
        LLVMExtractElement:
            (undocumented)
        LLVMInsertElement:
            (undocumented)
        LLVMShuffleVector:
            (undocumented)
        LLVMExtractValue:
            (undocumented)
        LLVMInsertValue:
            (undocumented)
        LLVMFreeze:
            (undocumented)
        LLVMFence:
            (undocumented)
        LLVMAtomicCmpXchg:
            (undocumented)
        LLVMAtomicRMW:
            (undocumented)
        LLVMResume:
            (undocumented)
        LLVMLandingPad:
            (undocumented)
        LLVMCleanupRet:
            (undocumented)
        LLVMCatchRet:
            (undocumented)
        LLVMCatchPad:
            (undocumented)
        LLVMCleanupPad:
            (undocumented)
        LLVMCatchSwitch:
            (undocumented)
    """
    LLVMRet = ccore.LLVMRet
    LLVMBr = ccore.LLVMBr
    LLVMSwitch = ccore.LLVMSwitch
    LLVMIndirectBr = ccore.LLVMIndirectBr
    LLVMInvoke = ccore.LLVMInvoke
    LLVMUnreachable = ccore.LLVMUnreachable
    LLVMCallBr = ccore.LLVMCallBr
    LLVMFNeg = ccore.LLVMFNeg
    LLVMAdd = ccore.LLVMAdd
    LLVMFAdd = ccore.LLVMFAdd
    LLVMSub = ccore.LLVMSub
    LLVMFSub = ccore.LLVMFSub
    LLVMMul = ccore.LLVMMul
    LLVMFMul = ccore.LLVMFMul
    LLVMUDiv = ccore.LLVMUDiv
    LLVMSDiv = ccore.LLVMSDiv
    LLVMFDiv = ccore.LLVMFDiv
    LLVMURem = ccore.LLVMURem
    LLVMSRem = ccore.LLVMSRem
    LLVMFRem = ccore.LLVMFRem
    LLVMShl = ccore.LLVMShl
    LLVMLShr = ccore.LLVMLShr
    LLVMAShr = ccore.LLVMAShr
    LLVMAnd = ccore.LLVMAnd
    LLVMOr = ccore.LLVMOr
    LLVMXor = ccore.LLVMXor
    LLVMAlloca = ccore.LLVMAlloca
    LLVMLoad = ccore.LLVMLoad
    LLVMStore = ccore.LLVMStore
    LLVMGetElementPtr = ccore.LLVMGetElementPtr
    LLVMTrunc = ccore.LLVMTrunc
    LLVMZExt = ccore.LLVMZExt
    LLVMSExt = ccore.LLVMSExt
    LLVMFPToUI = ccore.LLVMFPToUI
    LLVMFPToSI = ccore.LLVMFPToSI
    LLVMUIToFP = ccore.LLVMUIToFP
    LLVMSIToFP = ccore.LLVMSIToFP
    LLVMFPTrunc = ccore.LLVMFPTrunc
    LLVMFPExt = ccore.LLVMFPExt
    LLVMPtrToInt = ccore.LLVMPtrToInt
    LLVMIntToPtr = ccore.LLVMIntToPtr
    LLVMBitCast = ccore.LLVMBitCast
    LLVMAddrSpaceCast = ccore.LLVMAddrSpaceCast
    LLVMICmp = ccore.LLVMICmp
    LLVMFCmp = ccore.LLVMFCmp
    LLVMPHI = ccore.LLVMPHI
    LLVMCall = ccore.LLVMCall
    LLVMSelect = ccore.LLVMSelect
    LLVMUserOp1 = ccore.LLVMUserOp1
    LLVMUserOp2 = ccore.LLVMUserOp2
    LLVMVAArg = ccore.LLVMVAArg
    LLVMExtractElement = ccore.LLVMExtractElement
    LLVMInsertElement = ccore.LLVMInsertElement
    LLVMShuffleVector = ccore.LLVMShuffleVector
    LLVMExtractValue = ccore.LLVMExtractValue
    LLVMInsertValue = ccore.LLVMInsertValue
    LLVMFreeze = ccore.LLVMFreeze
    LLVMFence = ccore.LLVMFence
    LLVMAtomicCmpXchg = ccore.LLVMAtomicCmpXchg
    LLVMAtomicRMW = ccore.LLVMAtomicRMW
    LLVMResume = ccore.LLVMResume
    LLVMLandingPad = ccore.LLVMLandingPad
    LLVMCleanupRet = ccore.LLVMCleanupRet
    LLVMCatchRet = ccore.LLVMCatchRet
    LLVMCatchPad = ccore.LLVMCatchPad
    LLVMCleanupPad = ccore.LLVMCleanupPad
    LLVMCatchSwitch = ccore.LLVMCatchSwitch
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMTypeKind__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMTypeKind(_LLVMTypeKind__Base):
    """LLVMTypeKind

    Attributes:
        LLVMVoidTypeKind:
            type with no size
        LLVMHalfTypeKind:
            16 bit floating point type
        LLVMFloatTypeKind:
            32 bit floating point type
        LLVMDoubleTypeKind:
            64 bit floating point type
        LLVMX86_FP80TypeKind:
            80 bit floating point type (X87)
        LLVMFP128TypeKind:
            128 bit floating point type (112-bit mantissa)
        LLVMPPC_FP128TypeKind:
            128 bit floating point type (two 64-bits)
        LLVMLabelTypeKind:
            Labels
        LLVMIntegerTypeKind:
            Arbitrary bit width integers
        LLVMFunctionTypeKind:
            Functions
        LLVMStructTypeKind:
            Structures
        LLVMArrayTypeKind:
            Arrays
        LLVMPointerTypeKind:
            Pointers
        LLVMVectorTypeKind:
            Fixed width SIMD vector type
        LLVMMetadataTypeKind:
            Metadata
        LLVMX86_MMXTypeKind:
            X86 MMX
        LLVMTokenTypeKind:
            Tokens
        LLVMScalableVectorTypeKind:
            Scalable SIMD vector type
        LLVMBFloatTypeKind:
            16 bit brain floating point type
        LLVMX86_AMXTypeKind:
            X86 AMX
        LLVMTargetExtTypeKind:
            Target extension type
    """
    LLVMVoidTypeKind = ccore.LLVMVoidTypeKind
    LLVMHalfTypeKind = ccore.LLVMHalfTypeKind
    LLVMFloatTypeKind = ccore.LLVMFloatTypeKind
    LLVMDoubleTypeKind = ccore.LLVMDoubleTypeKind
    LLVMX86_FP80TypeKind = ccore.LLVMX86_FP80TypeKind
    LLVMFP128TypeKind = ccore.LLVMFP128TypeKind
    LLVMPPC_FP128TypeKind = ccore.LLVMPPC_FP128TypeKind
    LLVMLabelTypeKind = ccore.LLVMLabelTypeKind
    LLVMIntegerTypeKind = ccore.LLVMIntegerTypeKind
    LLVMFunctionTypeKind = ccore.LLVMFunctionTypeKind
    LLVMStructTypeKind = ccore.LLVMStructTypeKind
    LLVMArrayTypeKind = ccore.LLVMArrayTypeKind
    LLVMPointerTypeKind = ccore.LLVMPointerTypeKind
    LLVMVectorTypeKind = ccore.LLVMVectorTypeKind
    LLVMMetadataTypeKind = ccore.LLVMMetadataTypeKind
    LLVMX86_MMXTypeKind = ccore.LLVMX86_MMXTypeKind
    LLVMTokenTypeKind = ccore.LLVMTokenTypeKind
    LLVMScalableVectorTypeKind = ccore.LLVMScalableVectorTypeKind
    LLVMBFloatTypeKind = ccore.LLVMBFloatTypeKind
    LLVMX86_AMXTypeKind = ccore.LLVMX86_AMXTypeKind
    LLVMTargetExtTypeKind = ccore.LLVMTargetExtTypeKind
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMLinkage__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMLinkage(_LLVMLinkage__Base):
    """LLVMLinkage

    Attributes:
        LLVMExternalLinkage:
            Externally visible function
        LLVMAvailableExternallyLinkage:
            (undocumented)
        LLVMLinkOnceAnyLinkage:
            Keep one copy of function when linking (inline)
        LLVMLinkOnceODRLinkage:
            Same, but only replaced by something equivalent.
        LLVMLinkOnceODRAutoHideLinkage:
            Obsolete
        LLVMWeakAnyLinkage:
            Keep one copy of function when linking (weak)
        LLVMWeakODRLinkage:
            Same, but only replaced by something equivalent.
        LLVMAppendingLinkage:
            Special purpose, only applies to global arrays
        LLVMInternalLinkage:
            Rename collisions when linking (static functions)
        LLVMPrivateLinkage:
            Like Internal, but omit from symbol table
        LLVMDLLImportLinkage:
            Obsolete
        LLVMDLLExportLinkage:
            Obsolete
        LLVMExternalWeakLinkage:
            ExternalWeak linkage description
        LLVMGhostLinkage:
            Obsolete
        LLVMCommonLinkage:
            Tentative definitions
        LLVMLinkerPrivateLinkage:
            Like Private, but linker removes.
        LLVMLinkerPrivateWeakLinkage:
            Like LinkerPrivate, but is weak.
    """
    LLVMExternalLinkage = ccore.LLVMExternalLinkage
    LLVMAvailableExternallyLinkage = ccore.LLVMAvailableExternallyLinkage
    LLVMLinkOnceAnyLinkage = ccore.LLVMLinkOnceAnyLinkage
    LLVMLinkOnceODRLinkage = ccore.LLVMLinkOnceODRLinkage
    LLVMLinkOnceODRAutoHideLinkage = ccore.LLVMLinkOnceODRAutoHideLinkage
    LLVMWeakAnyLinkage = ccore.LLVMWeakAnyLinkage
    LLVMWeakODRLinkage = ccore.LLVMWeakODRLinkage
    LLVMAppendingLinkage = ccore.LLVMAppendingLinkage
    LLVMInternalLinkage = ccore.LLVMInternalLinkage
    LLVMPrivateLinkage = ccore.LLVMPrivateLinkage
    LLVMDLLImportLinkage = ccore.LLVMDLLImportLinkage
    LLVMDLLExportLinkage = ccore.LLVMDLLExportLinkage
    LLVMExternalWeakLinkage = ccore.LLVMExternalWeakLinkage
    LLVMGhostLinkage = ccore.LLVMGhostLinkage
    LLVMCommonLinkage = ccore.LLVMCommonLinkage
    LLVMLinkerPrivateLinkage = ccore.LLVMLinkerPrivateLinkage
    LLVMLinkerPrivateWeakLinkage = ccore.LLVMLinkerPrivateWeakLinkage
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMVisibility__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMVisibility(_LLVMVisibility__Base):
    """LLVMVisibility

    Attributes:
        LLVMDefaultVisibility:
            The GV is visible
        LLVMHiddenVisibility:
            The GV is hidden
        LLVMProtectedVisibility:
            The GV is protected
    """
    LLVMDefaultVisibility = ccore.LLVMDefaultVisibility
    LLVMHiddenVisibility = ccore.LLVMHiddenVisibility
    LLVMProtectedVisibility = ccore.LLVMProtectedVisibility
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMUnnamedAddr__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMUnnamedAddr(_LLVMUnnamedAddr__Base):
    """LLVMUnnamedAddr

    Attributes:
        LLVMNoUnnamedAddr:
            Address of the GV is significant.
        LLVMLocalUnnamedAddr:
            Address of the GV is locally insignificant.
        LLVMGlobalUnnamedAddr:
            Address of the GV is globally insignificant.
    """
    LLVMNoUnnamedAddr = ccore.LLVMNoUnnamedAddr
    LLVMLocalUnnamedAddr = ccore.LLVMLocalUnnamedAddr
    LLVMGlobalUnnamedAddr = ccore.LLVMGlobalUnnamedAddr
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMDLLStorageClass__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMDLLStorageClass(_LLVMDLLStorageClass__Base):
    """LLVMDLLStorageClass

    Attributes:
        LLVMDefaultStorageClass:
            (undocumented)
        LLVMDLLImportStorageClass:
            Function to be imported from DLL.
        LLVMDLLExportStorageClass:
            Function to be accessible from DLL.
    """
    LLVMDefaultStorageClass = ccore.LLVMDefaultStorageClass
    LLVMDLLImportStorageClass = ccore.LLVMDLLImportStorageClass
    LLVMDLLExportStorageClass = ccore.LLVMDLLExportStorageClass
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMCallConv__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMCallConv(_LLVMCallConv__Base):
    """LLVMCallConv

    Attributes:
        LLVMCCallConv:
            (undocumented)
        LLVMFastCallConv:
            (undocumented)
        LLVMColdCallConv:
            (undocumented)
        LLVMGHCCallConv:
            (undocumented)
        LLVMHiPECallConv:
            (undocumented)
        LLVMWebKitJSCallConv:
            (undocumented)
        LLVMAnyRegCallConv:
            (undocumented)
        LLVMPreserveMostCallConv:
            (undocumented)
        LLVMPreserveAllCallConv:
            (undocumented)
        LLVMSwiftCallConv:
            (undocumented)
        LLVMCXXFASTTLSCallConv:
            (undocumented)
        LLVMX86StdcallCallConv:
            (undocumented)
        LLVMX86FastcallCallConv:
            (undocumented)
        LLVMARMAPCSCallConv:
            (undocumented)
        LLVMARMAAPCSCallConv:
            (undocumented)
        LLVMARMAAPCSVFPCallConv:
            (undocumented)
        LLVMMSP430INTRCallConv:
            (undocumented)
        LLVMX86ThisCallCallConv:
            (undocumented)
        LLVMPTXKernelCallConv:
            (undocumented)
        LLVMPTXDeviceCallConv:
            (undocumented)
        LLVMSPIRFUNCCallConv:
            (undocumented)
        LLVMSPIRKERNELCallConv:
            (undocumented)
        LLVMIntelOCLBICallConv:
            (undocumented)
        LLVMX8664SysVCallConv:
            (undocumented)
        LLVMWin64CallConv:
            (undocumented)
        LLVMX86VectorCallCallConv:
            (undocumented)
        LLVMHHVMCallConv:
            (undocumented)
        LLVMHHVMCCallConv:
            (undocumented)
        LLVMX86INTRCallConv:
            (undocumented)
        LLVMAVRINTRCallConv:
            (undocumented)
        LLVMAVRSIGNALCallConv:
            (undocumented)
        LLVMAVRBUILTINCallConv:
            (undocumented)
        LLVMAMDGPUVSCallConv:
            (undocumented)
        LLVMAMDGPUGSCallConv:
            (undocumented)
        LLVMAMDGPUPSCallConv:
            (undocumented)
        LLVMAMDGPUCSCallConv:
            (undocumented)
        LLVMAMDGPUKERNELCallConv:
            (undocumented)
        LLVMX86RegCallCallConv:
            (undocumented)
        LLVMAMDGPUHSCallConv:
            (undocumented)
        LLVMMSP430BUILTINCallConv:
            (undocumented)
        LLVMAMDGPULSCallConv:
            (undocumented)
        LLVMAMDGPUESCallConv:
            (undocumented)
    """
    LLVMCCallConv = ccore.LLVMCCallConv
    LLVMFastCallConv = ccore.LLVMFastCallConv
    LLVMColdCallConv = ccore.LLVMColdCallConv
    LLVMGHCCallConv = ccore.LLVMGHCCallConv
    LLVMHiPECallConv = ccore.LLVMHiPECallConv
    LLVMWebKitJSCallConv = ccore.LLVMWebKitJSCallConv
    LLVMAnyRegCallConv = ccore.LLVMAnyRegCallConv
    LLVMPreserveMostCallConv = ccore.LLVMPreserveMostCallConv
    LLVMPreserveAllCallConv = ccore.LLVMPreserveAllCallConv
    LLVMSwiftCallConv = ccore.LLVMSwiftCallConv
    LLVMCXXFASTTLSCallConv = ccore.LLVMCXXFASTTLSCallConv
    LLVMX86StdcallCallConv = ccore.LLVMX86StdcallCallConv
    LLVMX86FastcallCallConv = ccore.LLVMX86FastcallCallConv
    LLVMARMAPCSCallConv = ccore.LLVMARMAPCSCallConv
    LLVMARMAAPCSCallConv = ccore.LLVMARMAAPCSCallConv
    LLVMARMAAPCSVFPCallConv = ccore.LLVMARMAAPCSVFPCallConv
    LLVMMSP430INTRCallConv = ccore.LLVMMSP430INTRCallConv
    LLVMX86ThisCallCallConv = ccore.LLVMX86ThisCallCallConv
    LLVMPTXKernelCallConv = ccore.LLVMPTXKernelCallConv
    LLVMPTXDeviceCallConv = ccore.LLVMPTXDeviceCallConv
    LLVMSPIRFUNCCallConv = ccore.LLVMSPIRFUNCCallConv
    LLVMSPIRKERNELCallConv = ccore.LLVMSPIRKERNELCallConv
    LLVMIntelOCLBICallConv = ccore.LLVMIntelOCLBICallConv
    LLVMX8664SysVCallConv = ccore.LLVMX8664SysVCallConv
    LLVMWin64CallConv = ccore.LLVMWin64CallConv
    LLVMX86VectorCallCallConv = ccore.LLVMX86VectorCallCallConv
    LLVMHHVMCallConv = ccore.LLVMHHVMCallConv
    LLVMHHVMCCallConv = ccore.LLVMHHVMCCallConv
    LLVMX86INTRCallConv = ccore.LLVMX86INTRCallConv
    LLVMAVRINTRCallConv = ccore.LLVMAVRINTRCallConv
    LLVMAVRSIGNALCallConv = ccore.LLVMAVRSIGNALCallConv
    LLVMAVRBUILTINCallConv = ccore.LLVMAVRBUILTINCallConv
    LLVMAMDGPUVSCallConv = ccore.LLVMAMDGPUVSCallConv
    LLVMAMDGPUGSCallConv = ccore.LLVMAMDGPUGSCallConv
    LLVMAMDGPUPSCallConv = ccore.LLVMAMDGPUPSCallConv
    LLVMAMDGPUCSCallConv = ccore.LLVMAMDGPUCSCallConv
    LLVMAMDGPUKERNELCallConv = ccore.LLVMAMDGPUKERNELCallConv
    LLVMX86RegCallCallConv = ccore.LLVMX86RegCallCallConv
    LLVMAMDGPUHSCallConv = ccore.LLVMAMDGPUHSCallConv
    LLVMMSP430BUILTINCallConv = ccore.LLVMMSP430BUILTINCallConv
    LLVMAMDGPULSCallConv = ccore.LLVMAMDGPULSCallConv
    LLVMAMDGPUESCallConv = ccore.LLVMAMDGPUESCallConv
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMValueKind__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMValueKind(_LLVMValueKind__Base):
    """LLVMValueKind

    Attributes:
        LLVMArgumentValueKind:
            (undocumented)
        LLVMBasicBlockValueKind:
            (undocumented)
        LLVMMemoryUseValueKind:
            (undocumented)
        LLVMMemoryDefValueKind:
            (undocumented)
        LLVMMemoryPhiValueKind:
            (undocumented)
        LLVMFunctionValueKind:
            (undocumented)
        LLVMGlobalAliasValueKind:
            (undocumented)
        LLVMGlobalIFuncValueKind:
            (undocumented)
        LLVMGlobalVariableValueKind:
            (undocumented)
        LLVMBlockAddressValueKind:
            (undocumented)
        LLVMConstantExprValueKind:
            (undocumented)
        LLVMConstantArrayValueKind:
            (undocumented)
        LLVMConstantStructValueKind:
            (undocumented)
        LLVMConstantVectorValueKind:
            (undocumented)
        LLVMUndefValueValueKind:
            (undocumented)
        LLVMConstantAggregateZeroValueKind:
            (undocumented)
        LLVMConstantDataArrayValueKind:
            (undocumented)
        LLVMConstantDataVectorValueKind:
            (undocumented)
        LLVMConstantIntValueKind:
            (undocumented)
        LLVMConstantFPValueKind:
            (undocumented)
        LLVMConstantPointerNullValueKind:
            (undocumented)
        LLVMConstantTokenNoneValueKind:
            (undocumented)
        LLVMMetadataAsValueValueKind:
            (undocumented)
        LLVMInlineAsmValueKind:
            (undocumented)
        LLVMInstructionValueKind:
            (undocumented)
        LLVMPoisonValueValueKind:
            (undocumented)
        LLVMConstantTargetNoneValueKind:
            (undocumented)
    """
    LLVMArgumentValueKind = ccore.LLVMArgumentValueKind
    LLVMBasicBlockValueKind = ccore.LLVMBasicBlockValueKind
    LLVMMemoryUseValueKind = ccore.LLVMMemoryUseValueKind
    LLVMMemoryDefValueKind = ccore.LLVMMemoryDefValueKind
    LLVMMemoryPhiValueKind = ccore.LLVMMemoryPhiValueKind
    LLVMFunctionValueKind = ccore.LLVMFunctionValueKind
    LLVMGlobalAliasValueKind = ccore.LLVMGlobalAliasValueKind
    LLVMGlobalIFuncValueKind = ccore.LLVMGlobalIFuncValueKind
    LLVMGlobalVariableValueKind = ccore.LLVMGlobalVariableValueKind
    LLVMBlockAddressValueKind = ccore.LLVMBlockAddressValueKind
    LLVMConstantExprValueKind = ccore.LLVMConstantExprValueKind
    LLVMConstantArrayValueKind = ccore.LLVMConstantArrayValueKind
    LLVMConstantStructValueKind = ccore.LLVMConstantStructValueKind
    LLVMConstantVectorValueKind = ccore.LLVMConstantVectorValueKind
    LLVMUndefValueValueKind = ccore.LLVMUndefValueValueKind
    LLVMConstantAggregateZeroValueKind = ccore.LLVMConstantAggregateZeroValueKind
    LLVMConstantDataArrayValueKind = ccore.LLVMConstantDataArrayValueKind
    LLVMConstantDataVectorValueKind = ccore.LLVMConstantDataVectorValueKind
    LLVMConstantIntValueKind = ccore.LLVMConstantIntValueKind
    LLVMConstantFPValueKind = ccore.LLVMConstantFPValueKind
    LLVMConstantPointerNullValueKind = ccore.LLVMConstantPointerNullValueKind
    LLVMConstantTokenNoneValueKind = ccore.LLVMConstantTokenNoneValueKind
    LLVMMetadataAsValueValueKind = ccore.LLVMMetadataAsValueValueKind
    LLVMInlineAsmValueKind = ccore.LLVMInlineAsmValueKind
    LLVMInstructionValueKind = ccore.LLVMInstructionValueKind
    LLVMPoisonValueValueKind = ccore.LLVMPoisonValueValueKind
    LLVMConstantTargetNoneValueKind = ccore.LLVMConstantTargetNoneValueKind
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMIntPredicate__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMIntPredicate(_LLVMIntPredicate__Base):
    """LLVMIntPredicate

    Attributes:
        LLVMIntEQ:
            equal
        LLVMIntNE:
            not equal
        LLVMIntUGT:
            unsigned greater than
        LLVMIntUGE:
            unsigned greater or equal
        LLVMIntULT:
            unsigned less than
        LLVMIntULE:
            unsigned less or equal
        LLVMIntSGT:
            signed greater than
        LLVMIntSGE:
            signed greater or equal
        LLVMIntSLT:
            signed less than
        LLVMIntSLE:
            signed less or equal
    """
    LLVMIntEQ = ccore.LLVMIntEQ
    LLVMIntNE = ccore.LLVMIntNE
    LLVMIntUGT = ccore.LLVMIntUGT
    LLVMIntUGE = ccore.LLVMIntUGE
    LLVMIntULT = ccore.LLVMIntULT
    LLVMIntULE = ccore.LLVMIntULE
    LLVMIntSGT = ccore.LLVMIntSGT
    LLVMIntSGE = ccore.LLVMIntSGE
    LLVMIntSLT = ccore.LLVMIntSLT
    LLVMIntSLE = ccore.LLVMIntSLE
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMRealPredicate__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMRealPredicate(_LLVMRealPredicate__Base):
    """LLVMRealPredicate

    Attributes:
        LLVMRealPredicateFalse:
            Always false (always folded)
        LLVMRealOEQ:
            True if ordered and equal
        LLVMRealOGT:
            True if ordered and greater than
        LLVMRealOGE:
            True if ordered and greater than or equal
        LLVMRealOLT:
            True if ordered and less than
        LLVMRealOLE:
            True if ordered and less than or equal
        LLVMRealONE:
            True if ordered and operands are unequal
        LLVMRealORD:
            True if ordered (no nans)
        LLVMRealUNO:
            True if unordered: isnan(X) | isnan(Y)
        LLVMRealUEQ:
            True if unordered or equal
        LLVMRealUGT:
            True if unordered or greater than
        LLVMRealUGE:
            True if unordered, greater than, or equal
        LLVMRealULT:
            True if unordered or less than
        LLVMRealULE:
            True if unordered, less than, or equal
        LLVMRealUNE:
            True if unordered or not equal
        LLVMRealPredicateTrue:
            Always true (always folded)
    """
    LLVMRealPredicateFalse = ccore.LLVMRealPredicateFalse
    LLVMRealOEQ = ccore.LLVMRealOEQ
    LLVMRealOGT = ccore.LLVMRealOGT
    LLVMRealOGE = ccore.LLVMRealOGE
    LLVMRealOLT = ccore.LLVMRealOLT
    LLVMRealOLE = ccore.LLVMRealOLE
    LLVMRealONE = ccore.LLVMRealONE
    LLVMRealORD = ccore.LLVMRealORD
    LLVMRealUNO = ccore.LLVMRealUNO
    LLVMRealUEQ = ccore.LLVMRealUEQ
    LLVMRealUGT = ccore.LLVMRealUGT
    LLVMRealUGE = ccore.LLVMRealUGE
    LLVMRealULT = ccore.LLVMRealULT
    LLVMRealULE = ccore.LLVMRealULE
    LLVMRealUNE = ccore.LLVMRealUNE
    LLVMRealPredicateTrue = ccore.LLVMRealPredicateTrue
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMLandingPadClauseTy__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMLandingPadClauseTy(_LLVMLandingPadClauseTy__Base):
    """LLVMLandingPadClauseTy

    Attributes:
        LLVMLandingPadCatch:
            A catch clause
        LLVMLandingPadFilter:
            A filter clause
    """
    LLVMLandingPadCatch = ccore.LLVMLandingPadCatch
    LLVMLandingPadFilter = ccore.LLVMLandingPadFilter
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMThreadLocalMode__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMThreadLocalMode(_LLVMThreadLocalMode__Base):
    """LLVMThreadLocalMode

    Attributes:
        LLVMNotThreadLocal:
            (undocumented)
        LLVMGeneralDynamicTLSModel:
            (undocumented)
        LLVMLocalDynamicTLSModel:
            (undocumented)
        LLVMInitialExecTLSModel:
            (undocumented)
        LLVMLocalExecTLSModel:
            (undocumented)
    """
    LLVMNotThreadLocal = ccore.LLVMNotThreadLocal
    LLVMGeneralDynamicTLSModel = ccore.LLVMGeneralDynamicTLSModel
    LLVMLocalDynamicTLSModel = ccore.LLVMLocalDynamicTLSModel
    LLVMInitialExecTLSModel = ccore.LLVMInitialExecTLSModel
    LLVMLocalExecTLSModel = ccore.LLVMLocalExecTLSModel
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMAtomicOrdering__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMAtomicOrdering(_LLVMAtomicOrdering__Base):
    """LLVMAtomicOrdering

    Attributes:
        LLVMAtomicOrderingNotAtomic:
            A load or store which is not atomic
        LLVMAtomicOrderingUnordered:
            Lowest level of atomicity, guarantees somewhat sane results, lock free.
        LLVMAtomicOrderingMonotonic:
            guarantees that if you take all the operations affecting a specific address, a consistent ordering exists
        LLVMAtomicOrderingAcquire:
            Acquire provides a barrier of the sort necessary to acquire a lock to access other memory with normal loads and stores.
        LLVMAtomicOrderingRelease:
            Release is similar to Acquire, but with a barrier of the sort necessary to release a lock.
        LLVMAtomicOrderingAcquireRelease:
            provides both an Acquire and a Release barrier (for fences and operations which both read and write memory).
        LLVMAtomicOrderingSequentiallyConsistent:
            provides Acquire semantics for loads and Release semantics for stores. Additionally, it guarantees that a total ordering exists between all SequentiallyConsistent operations.
    """
    LLVMAtomicOrderingNotAtomic = ccore.LLVMAtomicOrderingNotAtomic
    LLVMAtomicOrderingUnordered = ccore.LLVMAtomicOrderingUnordered
    LLVMAtomicOrderingMonotonic = ccore.LLVMAtomicOrderingMonotonic
    LLVMAtomicOrderingAcquire = ccore.LLVMAtomicOrderingAcquire
    LLVMAtomicOrderingRelease = ccore.LLVMAtomicOrderingRelease
    LLVMAtomicOrderingAcquireRelease = ccore.LLVMAtomicOrderingAcquireRelease
    LLVMAtomicOrderingSequentiallyConsistent = ccore.LLVMAtomicOrderingSequentiallyConsistent
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMAtomicRMWBinOp__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMAtomicRMWBinOp(_LLVMAtomicRMWBinOp__Base):
    """LLVMAtomicRMWBinOp

    Attributes:
        LLVMAtomicRMWBinOpXchg:
            Set the new value and return the one old
        LLVMAtomicRMWBinOpAdd:
            Add a value and return the old one
        LLVMAtomicRMWBinOpSub:
            Subtract a value and return the old one
        LLVMAtomicRMWBinOpAnd:
            And a value and return the old one
        LLVMAtomicRMWBinOpNand:
            Not-And a value and return the old one
        LLVMAtomicRMWBinOpOr:
            OR a value and return the old one
        LLVMAtomicRMWBinOpXor:
            Xor a value and return the old one
        LLVMAtomicRMWBinOpMax:
            Sets the value if it's greater than the original using a signed comparison and return the old one
        LLVMAtomicRMWBinOpMin:
            Sets the value if it's Smaller than the original using a signed comparison and return the old one
        LLVMAtomicRMWBinOpUMax:
            Sets the value if it's greater than the original using an unsigned comparison and return the old one
        LLVMAtomicRMWBinOpUMin:
            Sets the value if it's greater than the original using an unsigned comparison and return the old one
        LLVMAtomicRMWBinOpFAdd:
            Add a floating point value and return the old one
        LLVMAtomicRMWBinOpFSub:
            Subtract a floating point value and return the old one
        LLVMAtomicRMWBinOpFMax:
            Sets the value if it's greater than the original using an floating point comparison and return the old one
        LLVMAtomicRMWBinOpFMin:
            Sets the value if it's smaller than the original using an floating point comparison and return the old one
    """
    LLVMAtomicRMWBinOpXchg = ccore.LLVMAtomicRMWBinOpXchg
    LLVMAtomicRMWBinOpAdd = ccore.LLVMAtomicRMWBinOpAdd
    LLVMAtomicRMWBinOpSub = ccore.LLVMAtomicRMWBinOpSub
    LLVMAtomicRMWBinOpAnd = ccore.LLVMAtomicRMWBinOpAnd
    LLVMAtomicRMWBinOpNand = ccore.LLVMAtomicRMWBinOpNand
    LLVMAtomicRMWBinOpOr = ccore.LLVMAtomicRMWBinOpOr
    LLVMAtomicRMWBinOpXor = ccore.LLVMAtomicRMWBinOpXor
    LLVMAtomicRMWBinOpMax = ccore.LLVMAtomicRMWBinOpMax
    LLVMAtomicRMWBinOpMin = ccore.LLVMAtomicRMWBinOpMin
    LLVMAtomicRMWBinOpUMax = ccore.LLVMAtomicRMWBinOpUMax
    LLVMAtomicRMWBinOpUMin = ccore.LLVMAtomicRMWBinOpUMin
    LLVMAtomicRMWBinOpFAdd = ccore.LLVMAtomicRMWBinOpFAdd
    LLVMAtomicRMWBinOpFSub = ccore.LLVMAtomicRMWBinOpFSub
    LLVMAtomicRMWBinOpFMax = ccore.LLVMAtomicRMWBinOpFMax
    LLVMAtomicRMWBinOpFMin = ccore.LLVMAtomicRMWBinOpFMin
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMDiagnosticSeverity__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMDiagnosticSeverity(_LLVMDiagnosticSeverity__Base):
    """LLVMDiagnosticSeverity

    Attributes:
        LLVMDSError:
            (undocumented)
        LLVMDSWarning:
            (undocumented)
        LLVMDSRemark:
            (undocumented)
        LLVMDSNote:
            (undocumented)
    """
    LLVMDSError = ccore.LLVMDSError
    LLVMDSWarning = ccore.LLVMDSWarning
    LLVMDSRemark = ccore.LLVMDSRemark
    LLVMDSNote = ccore.LLVMDSNote
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMInlineAsmDialect__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMInlineAsmDialect(_LLVMInlineAsmDialect__Base):
    """LLVMInlineAsmDialect

    Attributes:
        LLVMInlineAsmDialectATT:
            (undocumented)
        LLVMInlineAsmDialectIntel:
            (undocumented)
    """
    LLVMInlineAsmDialectATT = ccore.LLVMInlineAsmDialectATT
    LLVMInlineAsmDialectIntel = ccore.LLVMInlineAsmDialectIntel
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


class _LLVMModuleFlagBehavior__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMModuleFlagBehavior(_LLVMModuleFlagBehavior__Base):
    """LLVMModuleFlagBehavior

    Attributes:
        LLVMModuleFlagBehaviorError:
            Emits an error if two values disagree, otherwise the resulting value is that of the operands.
        LLVMModuleFlagBehaviorWarning:
            Emits a warning if two values disagree. The result value will be the operand for the flag from the first module being linked.
        LLVMModuleFlagBehaviorRequire:
            Adds a requirement that another module flag be present and have a specified value after linking is performed. The value must be a metadata pair, where the first element of the pair is the ID of the module flag to be restricted, and the second element of the pair is the value the module flag should be restricted to. This behavior can be used to restrict the allowable results (via triggering of an error) of linking IDs with the **Override** behavior.
        LLVMModuleFlagBehaviorOverride:
            Uses the specified value, regardless of the behavior or value of the other module. If both modules specify **Override**, but the values differ, an error will be emitted.
        LLVMModuleFlagBehaviorAppend:
            Appends the two values, which are required to be metadata nodes.
        LLVMModuleFlagBehaviorAppendUnique:
            Appends the two values, which are required to be metadata nodes. However, duplicate entries in the second list are dropped during the append operation.
    """
    LLVMModuleFlagBehaviorError = ccore.LLVMModuleFlagBehaviorError
    LLVMModuleFlagBehaviorWarning = ccore.LLVMModuleFlagBehaviorWarning
    LLVMModuleFlagBehaviorRequire = ccore.LLVMModuleFlagBehaviorRequire
    LLVMModuleFlagBehaviorOverride = ccore.LLVMModuleFlagBehaviorOverride
    LLVMModuleFlagBehaviorAppend = ccore.LLVMModuleFlagBehaviorAppend
    LLVMModuleFlagBehaviorAppendUnique = ccore.LLVMModuleFlagBehaviorAppendUnique
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


LLVMAttributeReturnIndex = ccore.LLVMAttributeReturnIndex
LLVMAttributeFunctionIndex = ccore.LLVMAttributeFunctionIndex

@cython.embedsignature(True)
def LLVMInitializeCore(object R):
    r"""(No short description, might be part of a group.)

    @}

    Args:
        R (`~.LLVMOpaquePassRegistry`/`~.object`):
            (undocumented)
    """
    ccore.LLVMInitializeCore(
        LLVMOpaquePassRegistry.from_pyobj(R).get_element_ptr())


@cython.embedsignature(True)
def LLVMShutdown():
    r"""(No short description, might be part of a group.)

    Deallocate and destroy all ManagedStatic variables.

    See:
        `~.llvm``~.`~.llvm_shutdown``

    See:
        `~.ManagedStatic`
    """
    ccore.LLVMShutdown()


@cython.embedsignature(True)
def LLVMGetVersion():
    r"""(No short description, might be part of a group.)

    Return the major, minor, and patch version of LLVM

    The version components are returned via the function's three output
    parameters or skipped if a NULL pointer was supplied.

    Returns:
        A `~.tuple` of size 3 that contains (in that order):

        * Major (`~.int`):
            (undocumented)
        * Minor (`~.int`):
            (undocumented)
        * Patch (`~.int`):
            (undocumented)
    """
    cdef unsigned int Major
    cdef unsigned int Minor
    cdef unsigned int Patch
    ccore.LLVMGetVersion(&Major,&Minor,&Patch)
    return (Major,Minor,Patch)


@cython.embedsignature(True)
def LLVMCreateMessage(object Message):
    r"""(No short description, might be part of a group.)

    Args:
        Message (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMCreateMessage__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMCreateMessage(
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Message)._ptr))
    return None if _LLVMCreateMessage__retval._ptr == NULL else _LLVMCreateMessage__retval


@cython.embedsignature(True)
def LLVMDisposeMessage(object Message):
    r"""(No short description, might be part of a group.)

    Args:
        Message (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    ccore.LLVMDisposeMessage(
        <char *>rocm.llvm._util.types.CStr.from_pyobj(Message)._ptr)


cdef class LLVMDiagnosticHandler(rocm.llvm._util.types.Pointer):
    """Python wrapper for cdef class ccore.LLVMDiagnosticHandler.
    
    Python wrapper for cdef class ccore.LLVMDiagnosticHandler.

    If this type is initialized via its `__init__` method, it allocates a member of the underlying C type and
    destroys it again if the wrapper type is deallocted.

    This type also serves as adapter when appearing as argument type in a function signature.
    In this case, the type can further be initialized from the following Python objects
    that you can pass as argument instead:
    
    * `None`:

      This will set the ``self._ptr`` attribute to ``NULL``.

    * `int`:
      
      Interprets the integer value as pointer address and writes it to ``self._ptr``.
      No ownership is transferred.
      
    * `ctypes.c_void_p`:
      
      Takes the pointer address ``pyobj.value`` and writes it to ``self._ptr``.
      No ownership is transferred.
    
    
    Type checks are performed in the above order.

    C Attributes:
        _ptr (C type ``void *``, protected):
            Stores a pointer to the data of the original Python object.
        _ptr_owner (C type ``bint``, protected):
            If this wrapper is the owner of the underlying data.
        _py_buffer (C type ``Py_buffer`, protected):
            Stores a pointer to the data of the original Python object.
        _py_buffer_acquired (C type ``bint``, protected):
            Stores a pointer to the data of the original Python object.
    """
    # members declared in pxd file

    def __cinit__(self):
        self._ptr = NULL
        self.ptr_owner = False
        self._py_buffer_acquired = False

    cdef ccore.LLVMDiagnosticHandler get_element_ptr(self):
        return <ccore.LLVMDiagnosticHandler>self._ptr
        
    @staticmethod
    cdef LLVMDiagnosticHandler from_ptr(void* ptr, bint owner=False):
        """Factory function to create ``LLVMDiagnosticHandler`` objects from
        given ``ccore.LLVMDiagnosticHandler`` pointer.
        """
        # Fast call to __new__() that bypasses the __init__() constructor.
        cdef LLVMDiagnosticHandler wrapper = LLVMDiagnosticHandler.__new__(LLVMDiagnosticHandler)
        wrapper._ptr = ptr
        wrapper.ptr_owner = owner
        return wrapper

    @staticmethod
    cdef LLVMDiagnosticHandler from_pyobj(object pyobj):
        """Derives a LLVMDiagnosticHandler from a Python object.

        Derives a LLVMDiagnosticHandler from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMDiagnosticHandler`` reference, this method
        returns it directly. No new ``LLVMDiagnosticHandler`` is created in this case.

        Args:
            pyobj (object): Must be either `None`; a `rocm.llvm._util.types.Pointer`; a simple, contiguous buffer according to the buffer protocol;
                            or of type `LLVMDiagnosticHandler`; `int`; or `ctypes.c_void_p`.

        Note:
            This routine does not perform a copy but returns the original ``pyobj``
            if ``pyobj`` is an instance of LLVMDiagnosticHandler!
        """
        cdef LLVMDiagnosticHandler wrapper = LLVMDiagnosticHandler.__new__(LLVMDiagnosticHandler)
        cdef dict cuda_array_interface = getattr(pyobj, "__cuda_array_interface__", None)

        if pyobj is None:
            wrapper._ptr = NULL
        elif isinstance(pyobj,LLVMDiagnosticHandler):
            return pyobj
        elif isinstance(pyobj,int):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj)
        elif isinstance(pyobj,ctypes.c_void_p):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj.value) if pyobj.value != None else NULL
        elif str(type(pyobj)).startswith("<class 'ctypes.CFUNCTYPE.") and str(type(pyobj)).endswith(".CFunctionType'>" ):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(ctypes.cast(pyobj, ctypes.c_void_p).value)
        elif isinstance(pyobj,rocm.llvm._util.types.Pointer):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(int(pyobj))
        else:
            raise TypeError(f"unsupported input type: '{str(type(pyobj))}'")
        return wrapper
    def __dealloc__(self):
        # Release the buffer handle
        if self._py_buffer_acquired is True:
            cpython.buffer.PyBuffer_Release(&self._py_buffer)
    
    def __int__(self):
        """Returns the data's address as long integer.
        """
        return cpython.long.PyLong_FromVoidPtr(self._ptr)
    def __repr__(self):
        return f"<LLVMDiagnosticHandler object, self.ptr={int(self)}>"
    def as_c_void_p(self):
        """Returns the data's address as `ctypes.c_void_p`
        Note:
            Implemented as function to not collide with 
            autogenerated property names.
        """
        return ctypes.c_void_p(int(self))


cdef class LLVMYieldCallback(rocm.llvm._util.types.Pointer):
    """Python wrapper for cdef class ccore.LLVMYieldCallback.
    
    Python wrapper for cdef class ccore.LLVMYieldCallback.

    If this type is initialized via its `__init__` method, it allocates a member of the underlying C type and
    destroys it again if the wrapper type is deallocted.

    This type also serves as adapter when appearing as argument type in a function signature.
    In this case, the type can further be initialized from the following Python objects
    that you can pass as argument instead:
    
    * `None`:

      This will set the ``self._ptr`` attribute to ``NULL``.

    * `int`:
      
      Interprets the integer value as pointer address and writes it to ``self._ptr``.
      No ownership is transferred.
      
    * `ctypes.c_void_p`:
      
      Takes the pointer address ``pyobj.value`` and writes it to ``self._ptr``.
      No ownership is transferred.
    
    
    Type checks are performed in the above order.

    C Attributes:
        _ptr (C type ``void *``, protected):
            Stores a pointer to the data of the original Python object.
        _ptr_owner (C type ``bint``, protected):
            If this wrapper is the owner of the underlying data.
        _py_buffer (C type ``Py_buffer`, protected):
            Stores a pointer to the data of the original Python object.
        _py_buffer_acquired (C type ``bint``, protected):
            Stores a pointer to the data of the original Python object.
    """
    # members declared in pxd file

    def __cinit__(self):
        self._ptr = NULL
        self.ptr_owner = False
        self._py_buffer_acquired = False

    cdef ccore.LLVMYieldCallback get_element_ptr(self):
        return <ccore.LLVMYieldCallback>self._ptr
        
    @staticmethod
    cdef LLVMYieldCallback from_ptr(void* ptr, bint owner=False):
        """Factory function to create ``LLVMYieldCallback`` objects from
        given ``ccore.LLVMYieldCallback`` pointer.
        """
        # Fast call to __new__() that bypasses the __init__() constructor.
        cdef LLVMYieldCallback wrapper = LLVMYieldCallback.__new__(LLVMYieldCallback)
        wrapper._ptr = ptr
        wrapper.ptr_owner = owner
        return wrapper

    @staticmethod
    cdef LLVMYieldCallback from_pyobj(object pyobj):
        """Derives a LLVMYieldCallback from a Python object.

        Derives a LLVMYieldCallback from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMYieldCallback`` reference, this method
        returns it directly. No new ``LLVMYieldCallback`` is created in this case.

        Args:
            pyobj (object): Must be either `None`; a `rocm.llvm._util.types.Pointer`; a simple, contiguous buffer according to the buffer protocol;
                            or of type `LLVMYieldCallback`; `int`; or `ctypes.c_void_p`.

        Note:
            This routine does not perform a copy but returns the original ``pyobj``
            if ``pyobj`` is an instance of LLVMYieldCallback!
        """
        cdef LLVMYieldCallback wrapper = LLVMYieldCallback.__new__(LLVMYieldCallback)
        cdef dict cuda_array_interface = getattr(pyobj, "__cuda_array_interface__", None)

        if pyobj is None:
            wrapper._ptr = NULL
        elif isinstance(pyobj,LLVMYieldCallback):
            return pyobj
        elif isinstance(pyobj,int):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj)
        elif isinstance(pyobj,ctypes.c_void_p):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj.value) if pyobj.value != None else NULL
        elif str(type(pyobj)).startswith("<class 'ctypes.CFUNCTYPE.") and str(type(pyobj)).endswith(".CFunctionType'>" ):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(ctypes.cast(pyobj, ctypes.c_void_p).value)
        elif isinstance(pyobj,rocm.llvm._util.types.Pointer):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(int(pyobj))
        else:
            raise TypeError(f"unsupported input type: '{str(type(pyobj))}'")
        return wrapper
    def __dealloc__(self):
        # Release the buffer handle
        if self._py_buffer_acquired is True:
            cpython.buffer.PyBuffer_Release(&self._py_buffer)
    
    def __int__(self):
        """Returns the data's address as long integer.
        """
        return cpython.long.PyLong_FromVoidPtr(self._ptr)
    def __repr__(self):
        return f"<LLVMYieldCallback object, self.ptr={int(self)}>"
    def as_c_void_p(self):
        """Returns the data's address as `ctypes.c_void_p`
        Note:
            Implemented as function to not collide with 
            autogenerated property names.
        """
        return ctypes.c_void_p(int(self))


@cython.embedsignature(True)
def LLVMContextCreate():
    r"""(No short description, might be part of a group.)

    Create a new context.

    Every call to this function should be paired with a call to
    LLVMContextDispose() or the context will leak memory.
    """
    _LLVMContextCreate__retval = LLVMOpaqueContext.from_ptr(ccore.LLVMContextCreate())
    return None if _LLVMContextCreate__retval._ptr == NULL else _LLVMContextCreate__retval


@cython.embedsignature(True)
def LLVMGetGlobalContext():
    r"""(No short description, might be part of a group.)

    Obtain the global context instance.
    """
    _LLVMGetGlobalContext__retval = LLVMOpaqueContext.from_ptr(ccore.LLVMGetGlobalContext())
    return None if _LLVMGetGlobalContext__retval._ptr == NULL else _LLVMGetGlobalContext__retval


@cython.embedsignature(True)
def LLVMContextSetDiagnosticHandler(object C, object Handler, object DiagnosticContext):
    r"""(No short description, might be part of a group.)

    Set the diagnostic handler for this context.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        Handler (`~.LLVMDiagnosticHandler`/`~.object`):
            (undocumented)

        DiagnosticContext (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    ccore.LLVMContextSetDiagnosticHandler(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        LLVMDiagnosticHandler.from_pyobj(Handler).get_element_ptr(),
        <void *>rocm.llvm._util.types.Pointer.from_pyobj(DiagnosticContext)._ptr)


@cython.embedsignature(True)
def LLVMContextGetDiagnosticHandler(object C):
    r"""(No short description, might be part of a group.)

    Get the diagnostic handler of this context.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMContextGetDiagnosticHandler__retval = rocm.llvm._util.types.Pointer.from_ptr(<void*>ccore.LLVMContextGetDiagnosticHandler(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMContextGetDiagnosticHandler__retval._ptr == NULL else _LLVMContextGetDiagnosticHandler__retval


@cython.embedsignature(True)
def LLVMContextGetDiagnosticContext(object C):
    r"""(No short description, might be part of a group.)

    Get the diagnostic context of this context.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMContextGetDiagnosticContext__retval = rocm.llvm._util.types.Pointer.from_ptr(<void*>ccore.LLVMContextGetDiagnosticContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMContextGetDiagnosticContext__retval._ptr == NULL else _LLVMContextGetDiagnosticContext__retval


@cython.embedsignature(True)
def LLVMContextSetYieldCallback(object C, object Callback, object OpaqueHandle):
    r"""(No short description, might be part of a group.)

    Set the yield callback function for this context.

    See:
        `~.LLVMContext``~.`~.setYieldCallback``()

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        Callback (`~.LLVMYieldCallback`/`~.object`):
            (undocumented)

        OpaqueHandle (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    ccore.LLVMContextSetYieldCallback(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        LLVMYieldCallback.from_pyobj(Callback).get_element_ptr(),
        <void *>rocm.llvm._util.types.Pointer.from_pyobj(OpaqueHandle)._ptr)


@cython.embedsignature(True)
def LLVMContextShouldDiscardValueNames(object C):
    r"""(No short description, might be part of a group.)

    Retrieve whether the given context is set to discard all value names.

    See:
        `~.LLVMContext``~.`~.shouldDiscardValueNames``()

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMContextShouldDiscardValueNames__retval = ccore.LLVMContextShouldDiscardValueNames(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr())
    return _LLVMContextShouldDiscardValueNames__retval


@cython.embedsignature(True)
def LLVMContextSetDiscardValueNames(object C, int Discard):
    r"""(No short description, might be part of a group.)

    Set whether the given context discards all value names.

    If true, only the names of GlobalValue objects will be available in the IR.
    This can be used to save memory and runtime, especially in release mode.

    See:
        `~.LLVMContext``~.`~.setDiscardValueNames``()

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        Discard (`~.int`):
            (undocumented)
    """
    ccore.LLVMContextSetDiscardValueNames(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),Discard)


@cython.embedsignature(True)
def LLVMContextSetOpaquePointers(object C, int OpaquePointers):
    r"""(No short description, might be part of a group.)

    Set whether the given context is in opaque pointer mode.

    See:
        `~.LLVMContext``~.`~.setOpaquePointers``()

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        OpaquePointers (`~.int`):
            (undocumented)
    """
    ccore.LLVMContextSetOpaquePointers(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),OpaquePointers)


@cython.embedsignature(True)
def LLVMContextDispose(object C):
    r"""(No short description, might be part of a group.)

    Destroy a context instance.

    This should be called for every call to LLVMContextCreate() or memory
    will be leaked.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    ccore.LLVMContextDispose(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetDiagInfoDescription(object DI):
    r"""(No short description, might be part of a group.)

    Return a string representation of the DiagnosticInfo. Use
    LLVMDisposeMessage to free the string.

    See:
        `~.DiagnosticInfo``~.`~.print``()

    Args:
        DI (`~.LLVMOpaqueDiagnosticInfo`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMGetDiagInfoDescription__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetDiagInfoDescription(
        LLVMOpaqueDiagnosticInfo.from_pyobj(DI).get_element_ptr()))
    return None if _LLVMGetDiagInfoDescription__retval._ptr == NULL else _LLVMGetDiagInfoDescription__retval


@cython.embedsignature(True)
def LLVMGetDiagInfoSeverity(object DI):
    r"""(No short description, might be part of a group.)

    Return an enum LLVMDiagnosticSeverity.

    See:
        `~.DiagnosticInfo``~.`~.getSeverity``()

    Args:
        DI (`~.LLVMOpaqueDiagnosticInfo`/`~.object`):
            (undocumented)

    Returns:
        `~.LLVMDiagnosticSeverity`
    """
    _LLVMGetDiagInfoSeverity__retval = LLVMDiagnosticSeverity(ccore.LLVMGetDiagInfoSeverity(
        LLVMOpaqueDiagnosticInfo.from_pyobj(DI).get_element_ptr()))
    return _LLVMGetDiagInfoSeverity__retval


@cython.embedsignature(True)
def LLVMGetMDKindIDInContext(object C, object Name, unsigned int SLen):
    r"""(No short description, might be part of a group.)

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        SLen (`~.int`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetMDKindIDInContext__retval = ccore.LLVMGetMDKindIDInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr,SLen)
    return _LLVMGetMDKindIDInContext__retval


@cython.embedsignature(True)
def LLVMGetMDKindID(object Name, unsigned int SLen):
    r"""(No short description, might be part of a group.)

    Args:
        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        SLen (`~.int`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetMDKindID__retval = ccore.LLVMGetMDKindID(
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr,SLen)
    return _LLVMGetMDKindID__retval


@cython.embedsignature(True)
def LLVMGetEnumAttributeKindForName(object Name, unsigned long SLen):
    r"""(No short description, might be part of a group.)

    Return an unique id given the name of a enum attribute,
    or 0 if no attribute by that name exists.

    See http://llvm.org/docs/LangRef.html`~.parameter`-attributes
    and http://llvm.org/docs/LangRef.html`~.function`-attributes
    for the list of available attributes.

    NB: Attribute names and/or id are subject to change without
    going through the C API deprecation cycle.

    Args:
        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        SLen (`~.int`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetEnumAttributeKindForName__retval = ccore.LLVMGetEnumAttributeKindForName(
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr,SLen)
    return _LLVMGetEnumAttributeKindForName__retval


@cython.embedsignature(True)
def LLVMGetLastEnumAttributeKind():
    r"""(No short description, might be part of a group.)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetLastEnumAttributeKind__retval = ccore.LLVMGetLastEnumAttributeKind()
    return _LLVMGetLastEnumAttributeKind__retval


@cython.embedsignature(True)
def LLVMCreateEnumAttribute(object C, unsigned int KindID, unsigned long Val):
    r"""(No short description, might be part of a group.)

    Create an enum attribute.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        KindID (`~.int`):
            (undocumented)

        Val (`~.int`):
            (undocumented)
    """
    _LLVMCreateEnumAttribute__retval = LLVMOpaqueAttributeRef.from_ptr(ccore.LLVMCreateEnumAttribute(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),KindID,Val))
    return None if _LLVMCreateEnumAttribute__retval._ptr == NULL else _LLVMCreateEnumAttribute__retval


@cython.embedsignature(True)
def LLVMGetEnumAttributeKind(object A):
    r"""(No short description, might be part of a group.)

    Get the unique id corresponding to the enum attribute
    passed as argument.

    Args:
        A (`~.LLVMOpaqueAttributeRef`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetEnumAttributeKind__retval = ccore.LLVMGetEnumAttributeKind(
        LLVMOpaqueAttributeRef.from_pyobj(A).get_element_ptr())
    return _LLVMGetEnumAttributeKind__retval


@cython.embedsignature(True)
def LLVMGetEnumAttributeValue(object A):
    r"""(No short description, might be part of a group.)

    Get the enum attribute's value. 0 is returned if none exists.

    Args:
        A (`~.LLVMOpaqueAttributeRef`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned long _LLVMGetEnumAttributeValue__retval = ccore.LLVMGetEnumAttributeValue(
        LLVMOpaqueAttributeRef.from_pyobj(A).get_element_ptr())
    return _LLVMGetEnumAttributeValue__retval


@cython.embedsignature(True)
def LLVMCreateTypeAttribute(object C, unsigned int KindID, object type_ref):
    r"""(No short description, might be part of a group.)

    Create a type attribute

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        KindID (`~.int`):
            (undocumented)

        type_ref (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMCreateTypeAttribute__retval = LLVMOpaqueAttributeRef.from_ptr(ccore.LLVMCreateTypeAttribute(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),KindID,
        LLVMOpaqueType.from_pyobj(type_ref).get_element_ptr()))
    return None if _LLVMCreateTypeAttribute__retval._ptr == NULL else _LLVMCreateTypeAttribute__retval


@cython.embedsignature(True)
def LLVMGetTypeAttributeValue(object A):
    r"""(No short description, might be part of a group.)

    Get the type attribute's value.

    Args:
        A (`~.LLVMOpaqueAttributeRef`/`~.object`):
            (undocumented)
    """
    _LLVMGetTypeAttributeValue__retval = LLVMOpaqueType.from_ptr(ccore.LLVMGetTypeAttributeValue(
        LLVMOpaqueAttributeRef.from_pyobj(A).get_element_ptr()))
    return None if _LLVMGetTypeAttributeValue__retval._ptr == NULL else _LLVMGetTypeAttributeValue__retval


@cython.embedsignature(True)
def LLVMCreateStringAttribute(object C, object K, unsigned int KLength, object V, unsigned int VLength):
    r"""(No short description, might be part of a group.)

    Create a string attribute.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        K (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        KLength (`~.int`):
            (undocumented)

        V (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        VLength (`~.int`):
            (undocumented)
    """
    _LLVMCreateStringAttribute__retval = LLVMOpaqueAttributeRef.from_ptr(ccore.LLVMCreateStringAttribute(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(K)._ptr,KLength,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(V)._ptr,VLength))
    return None if _LLVMCreateStringAttribute__retval._ptr == NULL else _LLVMCreateStringAttribute__retval


@cython.embedsignature(True)
def LLVMGetStringAttributeKind(object A, object Length):
    r"""(No short description, might be part of a group.)

    Get the string attribute's kind.

    Args:
        A (`~.LLVMOpaqueAttributeRef`/`~.object`):
            (undocumented)

        Length (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMGetStringAttributeKind__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetStringAttributeKind(
        LLVMOpaqueAttributeRef.from_pyobj(A).get_element_ptr(),
        <unsigned int *>rocm.llvm._util.types.Pointer.from_pyobj(Length)._ptr))
    return None if _LLVMGetStringAttributeKind__retval._ptr == NULL else _LLVMGetStringAttributeKind__retval


@cython.embedsignature(True)
def LLVMGetStringAttributeValue(object A, object Length):
    r"""(No short description, might be part of a group.)

    Get the string attribute's value.

    Args:
        A (`~.LLVMOpaqueAttributeRef`/`~.object`):
            (undocumented)

        Length (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMGetStringAttributeValue__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetStringAttributeValue(
        LLVMOpaqueAttributeRef.from_pyobj(A).get_element_ptr(),
        <unsigned int *>rocm.llvm._util.types.Pointer.from_pyobj(Length)._ptr))
    return None if _LLVMGetStringAttributeValue__retval._ptr == NULL else _LLVMGetStringAttributeValue__retval


@cython.embedsignature(True)
def LLVMIsEnumAttribute(object A):
    r"""(No short description, might be part of a group.)

    Check for the different types of attributes.

    Args:
        A (`~.LLVMOpaqueAttributeRef`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsEnumAttribute__retval = ccore.LLVMIsEnumAttribute(
        LLVMOpaqueAttributeRef.from_pyobj(A).get_element_ptr())
    return _LLVMIsEnumAttribute__retval


@cython.embedsignature(True)
def LLVMIsStringAttribute(object A):
    r"""(No short description, might be part of a group.)

    Args:
        A (`~.LLVMOpaqueAttributeRef`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsStringAttribute__retval = ccore.LLVMIsStringAttribute(
        LLVMOpaqueAttributeRef.from_pyobj(A).get_element_ptr())
    return _LLVMIsStringAttribute__retval


@cython.embedsignature(True)
def LLVMIsTypeAttribute(object A):
    r"""(No short description, might be part of a group.)

    Args:
        A (`~.LLVMOpaqueAttributeRef`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsTypeAttribute__retval = ccore.LLVMIsTypeAttribute(
        LLVMOpaqueAttributeRef.from_pyobj(A).get_element_ptr())
    return _LLVMIsTypeAttribute__retval


@cython.embedsignature(True)
def LLVMGetTypeByName2(object C, object Name):
    r"""(No short description, might be part of a group.)

    Obtain a Type from a context by its registered name.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMGetTypeByName2__retval = LLVMOpaqueType.from_ptr(ccore.LLVMGetTypeByName2(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMGetTypeByName2__retval._ptr == NULL else _LLVMGetTypeByName2__retval


@cython.embedsignature(True)
def LLVMModuleCreateWithName(object ModuleID):
    r"""(No short description, might be part of a group.)

    Create a new, empty module in the global context.

    This is equivalent to calling LLVMModuleCreateWithNameInContext with
    LLVMGetGlobalContext() as the context parameter.

    Every invocation should be paired with LLVMDisposeModule() or memory
    will be leaked.

    Args:
        ModuleID (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMModuleCreateWithName__retval = LLVMOpaqueModule.from_ptr(ccore.LLVMModuleCreateWithName(
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(ModuleID)._ptr))
    return None if _LLVMModuleCreateWithName__retval._ptr == NULL else _LLVMModuleCreateWithName__retval


@cython.embedsignature(True)
def LLVMModuleCreateWithNameInContext(object ModuleID, object C):
    r"""(No short description, might be part of a group.)

    Create a new, empty module in a specific context.

    Every invocation should be paired with LLVMDisposeModule() or memory
    will be leaked.

    Args:
        ModuleID (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMModuleCreateWithNameInContext__retval = LLVMOpaqueModule.from_ptr(ccore.LLVMModuleCreateWithNameInContext(
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(ModuleID)._ptr,
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMModuleCreateWithNameInContext__retval._ptr == NULL else _LLVMModuleCreateWithNameInContext__retval


@cython.embedsignature(True)
def LLVMCloneModule(object M):
    r"""(No short description, might be part of a group.)

    Return an exact copy of the specified module.

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)
    """
    _LLVMCloneModule__retval = LLVMOpaqueModule.from_ptr(ccore.LLVMCloneModule(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMCloneModule__retval._ptr == NULL else _LLVMCloneModule__retval


@cython.embedsignature(True)
def LLVMDisposeModule(object M):
    r"""(No short description, might be part of a group.)

    Destroy a module instance.

    This must be called for every created module or memory will be
    leaked.

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)
    """
    ccore.LLVMDisposeModule(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetModuleIdentifier(object M, object Len):
    r"""(No short description, might be part of a group.)

    Obtain the identifier of a module.

    See:
        `~.Module``~.`~.getModuleIdentifier``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            Module to obtain identifier of

        Len (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            Out parameter which holds the length of the returned string.

    Returns:
        `~.bytes`: The identifier of M.
    """
    _LLVMGetModuleIdentifier__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetModuleIdentifier(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <unsigned long *>rocm.llvm._util.types.Pointer.from_pyobj(Len)._ptr))
    return None if _LLVMGetModuleIdentifier__retval._ptr == NULL else _LLVMGetModuleIdentifier__retval


@cython.embedsignature(True)
def LLVMSetModuleIdentifier(object M, object Ident, unsigned long Len):
    r"""(No short description, might be part of a group.)

    Set the identifier of a module to a string Ident with length Len.

    See:
        `~.Module``~.`~.setModuleIdentifier``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            The module to set identifier

        Ident (`~.rocm.llvm._util.types.CStr`/`~.object`):
            The string to set M's identifier to

        Len (`~.int`):
            Length of Ident
    """
    ccore.LLVMSetModuleIdentifier(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Ident)._ptr,Len)


@cython.embedsignature(True)
def LLVMGetSourceFileName(object M, object Len):
    r"""(No short description, might be part of a group.)

    Obtain the module's original source file name.

    See:
        `~.Module``~.`~.getSourceFileName``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            Module to obtain the name of

        Len (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            Out parameter which holds the length of the returned string

    Returns:
        `~.bytes`: The original source file name of M
    """
    _LLVMGetSourceFileName__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetSourceFileName(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <unsigned long *>rocm.llvm._util.types.Pointer.from_pyobj(Len)._ptr))
    return None if _LLVMGetSourceFileName__retval._ptr == NULL else _LLVMGetSourceFileName__retval


@cython.embedsignature(True)
def LLVMSetSourceFileName(object M, object Name, unsigned long Len):
    r"""(No short description, might be part of a group.)

    Set the original source file name of a module to a string Name with length
    Len.

    See:
        `~.Module``~.`~.setSourceFileName``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            The module to set the source file name of

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            The string to set M's source file name to

        Len (`~.int`):
            Length of Name
    """
    ccore.LLVMSetSourceFileName(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr,Len)


@cython.embedsignature(True)
def LLVMGetDataLayoutStr(object M):
    r"""(No short description, might be part of a group.)

    Obtain the data layout for a module.

    See:
        `~.Module``~.`~.getDataLayoutStr``()

    LLVMGetDataLayout is DEPRECATED, as the name is not only incorrect,
    but match the name of another method on the module. Prefer the use
    of LLVMGetDataLayoutStr, which is not ambiguous.

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMGetDataLayoutStr__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetDataLayoutStr(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMGetDataLayoutStr__retval._ptr == NULL else _LLVMGetDataLayoutStr__retval


@cython.embedsignature(True)
def LLVMGetDataLayout(object M):
    r"""(No short description, might be part of a group.)

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMGetDataLayout__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetDataLayout(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMGetDataLayout__retval._ptr == NULL else _LLVMGetDataLayout__retval


@cython.embedsignature(True)
def LLVMSetDataLayout(object M, object DataLayoutStr):
    r"""(No short description, might be part of a group.)

    Set the data layout for a module.

    See:
        `~.Module``~.`~.setDataLayout``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        DataLayoutStr (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetDataLayout(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(DataLayoutStr)._ptr)


@cython.embedsignature(True)
def LLVMGetTarget(object M):
    r"""(No short description, might be part of a group.)

    Obtain the target triple for a module.

    See:
        `~.Module``~.`~.getTargetTriple``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMGetTarget__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetTarget(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMGetTarget__retval._ptr == NULL else _LLVMGetTarget__retval


@cython.embedsignature(True)
def LLVMSetTarget(object M, object Triple):
    r"""(No short description, might be part of a group.)

    Set the target triple for a module.

    See:
        `~.Module``~.`~.setTargetTriple``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Triple (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetTarget(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Triple)._ptr)


@cython.embedsignature(True)
def LLVMCopyModuleFlagsMetadata(object M, object Len):
    r"""(No short description, might be part of a group.)

    Returns the module flags as an array of flag-key-value triples.  The caller
    is responsible for freeing this array by calling
    ``LLVMDisposeModuleFlagsMetadata.``

    See:
        `~.Module``~.`~.getModuleFlagsMetadata``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Len (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _LLVMCopyModuleFlagsMetadata__retval = LLVMOpaqueModuleFlagEntry.from_ptr(ccore.LLVMCopyModuleFlagsMetadata(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <unsigned long *>rocm.llvm._util.types.Pointer.from_pyobj(Len)._ptr))
    return None if _LLVMCopyModuleFlagsMetadata__retval._ptr == NULL else _LLVMCopyModuleFlagsMetadata__retval


@cython.embedsignature(True)
def LLVMDisposeModuleFlagsMetadata(object Entries):
    r"""(No short description, might be part of a group.)

    Destroys module flags metadata entries.

    Args:
        Entries (`~.LLVMOpaqueModuleFlagEntry`/`~.object`):
            (undocumented)
    """
    ccore.LLVMDisposeModuleFlagsMetadata(
        LLVMOpaqueModuleFlagEntry.from_pyobj(Entries).get_element_ptr())


@cython.embedsignature(True)
def LLVMModuleFlagEntriesGetFlagBehavior(object Entries, unsigned int Index):
    r"""(No short description, might be part of a group.)

    Returns the flag behavior for a module flag entry at a specific index.

    See:
        `~.Module``~.`~.ModuleFlagEntry`.`~.Behavior``

    Args:
        Entries (`~.LLVMOpaqueModuleFlagEntry`/`~.object`):
            (undocumented)

        Index (`~.int`):
            (undocumented)

    Returns:
        `~.LLVMModuleFlagBehavior`
    """
    _LLVMModuleFlagEntriesGetFlagBehavior__retval = LLVMModuleFlagBehavior(ccore.LLVMModuleFlagEntriesGetFlagBehavior(
        LLVMOpaqueModuleFlagEntry.from_pyobj(Entries).get_element_ptr(),Index))
    return _LLVMModuleFlagEntriesGetFlagBehavior__retval


@cython.embedsignature(True)
def LLVMModuleFlagEntriesGetKey(object Entries, unsigned int Index, object Len):
    r"""(No short description, might be part of a group.)

    Returns the key for a module flag entry at a specific index.

    See:
        `~.Module``~.`~.ModuleFlagEntry`.`~.Key``

    Args:
        Entries (`~.LLVMOpaqueModuleFlagEntry`/`~.object`):
            (undocumented)

        Index (`~.int`):
            (undocumented)

        Len (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMModuleFlagEntriesGetKey__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMModuleFlagEntriesGetKey(
        LLVMOpaqueModuleFlagEntry.from_pyobj(Entries).get_element_ptr(),Index,
        <unsigned long *>rocm.llvm._util.types.Pointer.from_pyobj(Len)._ptr))
    return None if _LLVMModuleFlagEntriesGetKey__retval._ptr == NULL else _LLVMModuleFlagEntriesGetKey__retval


@cython.embedsignature(True)
def LLVMModuleFlagEntriesGetMetadata(object Entries, unsigned int Index):
    r"""(No short description, might be part of a group.)

    Returns the metadata for a module flag entry at a specific index.

    See:
        `~.Module``~.`~.ModuleFlagEntry`.`~.Val``

    Args:
        Entries (`~.LLVMOpaqueModuleFlagEntry`/`~.object`):
            (undocumented)

        Index (`~.int`):
            (undocumented)
    """
    _LLVMModuleFlagEntriesGetMetadata__retval = LLVMOpaqueMetadata.from_ptr(ccore.LLVMModuleFlagEntriesGetMetadata(
        LLVMOpaqueModuleFlagEntry.from_pyobj(Entries).get_element_ptr(),Index))
    return None if _LLVMModuleFlagEntriesGetMetadata__retval._ptr == NULL else _LLVMModuleFlagEntriesGetMetadata__retval


@cython.embedsignature(True)
def LLVMGetModuleFlag(object M, object Key, unsigned long KeyLen):
    r"""(No short description, might be part of a group.)

    Add a module-level flag to the module-level flags metadata if it doesn't
    already exist.

    See:
        `~.Module``~.`~.getModuleFlag``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Key (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        KeyLen (`~.int`):
            (undocumented)
    """
    _LLVMGetModuleFlag__retval = LLVMOpaqueMetadata.from_ptr(ccore.LLVMGetModuleFlag(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Key)._ptr,KeyLen))
    return None if _LLVMGetModuleFlag__retval._ptr == NULL else _LLVMGetModuleFlag__retval


@cython.embedsignature(True)
def LLVMAddModuleFlag(object M, object Behavior, object Key, unsigned long KeyLen, object Val):
    r"""(No short description, might be part of a group.)

    Add a module-level flag to the module-level flags metadata if it doesn't
    already exist.

    See:
        `~.Module``~.`~.addModuleFlag``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Behavior (`~.LLVMModuleFlagBehavior`):
            (undocumented)

        Key (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        KeyLen (`~.int`):
            (undocumented)

        Val (`~.LLVMOpaqueMetadata`/`~.object`):
            (undocumented)
    """
    if not isinstance(Behavior,_LLVMModuleFlagBehavior__Base):
        raise TypeError("argument 'Behavior' must be of type '_LLVMModuleFlagBehavior__Base'")
    ccore.LLVMAddModuleFlag(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),Behavior.value,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Key)._ptr,KeyLen,
        LLVMOpaqueMetadata.from_pyobj(Val).get_element_ptr())


@cython.embedsignature(True)
def LLVMDumpModule(object M):
    r"""(No short description, might be part of a group.)

    Dump a representation of a module to stderr.

    See:
        `~.Module``~.`~.dump``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)
    """
    ccore.LLVMDumpModule(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr())


@cython.embedsignature(True)
def LLVMPrintModuleToFile(object M, object Filename, object ErrorMessage):
    r"""(No short description, might be part of a group.)

    Print a representation of a module to a file. The ErrorMessage needs to be
    disposed with LLVMDisposeMessage. Returns 0 on success, 1 otherwise.

    See:
        `~.Module``~.`~.print``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Filename (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        ErrorMessage (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMPrintModuleToFile__retval = ccore.LLVMPrintModuleToFile(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Filename)._ptr,
        <char **>rocm.llvm._util.types.CStr.from_pyobj(ErrorMessage)._ptr)
    return _LLVMPrintModuleToFile__retval


@cython.embedsignature(True)
def LLVMPrintModuleToString(object M):
    r"""(No short description, might be part of a group.)

    Return a string representation of the module. Use
    LLVMDisposeMessage to free the string.

    See:
        `~.Module``~.`~.print``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMPrintModuleToString__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMPrintModuleToString(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMPrintModuleToString__retval._ptr == NULL else _LLVMPrintModuleToString__retval


@cython.embedsignature(True)
def LLVMGetModuleInlineAsm(object M, object Len):
    r"""(No short description, might be part of a group.)

    Get inline assembly for a module.

    See:
        `~.Module``~.`~.getModuleInlineAsm``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Len (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMGetModuleInlineAsm__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetModuleInlineAsm(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <unsigned long *>rocm.llvm._util.types.Pointer.from_pyobj(Len)._ptr))
    return None if _LLVMGetModuleInlineAsm__retval._ptr == NULL else _LLVMGetModuleInlineAsm__retval


@cython.embedsignature(True)
def LLVMSetModuleInlineAsm2(object M, object Asm, unsigned long Len):
    r"""(No short description, might be part of a group.)

    Set inline assembly for a module.

    See:
        `~.Module``~.`~.setModuleInlineAsm``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Asm (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        Len (`~.int`):
            (undocumented)
    """
    ccore.LLVMSetModuleInlineAsm2(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Asm)._ptr,Len)


@cython.embedsignature(True)
def LLVMAppendModuleInlineAsm(object M, object Asm, unsigned long Len):
    r"""(No short description, might be part of a group.)

    Append inline assembly to a module.

    See:
        `~.Module``~.`~.appendModuleInlineAsm``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Asm (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        Len (`~.int`):
            (undocumented)
    """
    ccore.LLVMAppendModuleInlineAsm(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Asm)._ptr,Len)


@cython.embedsignature(True)
def LLVMGetInlineAsm(object Ty, object AsmString, unsigned long AsmStringSize, object Constraints, unsigned long ConstraintsSize, int HasSideEffects, int IsAlignStack, object Dialect, int CanThrow):
    r"""(No short description, might be part of a group.)

    Create the specified uniqued inline asm string.

    See:
        `~.InlineAsm``~.`~.get``()

    Args:
        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        AsmString (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        AsmStringSize (`~.int`):
            (undocumented)

        Constraints (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        ConstraintsSize (`~.int`):
            (undocumented)

        HasSideEffects (`~.int`):
            (undocumented)

        IsAlignStack (`~.int`):
            (undocumented)

        Dialect (`~.LLVMInlineAsmDialect`):
            (undocumented)

        CanThrow (`~.int`):
            (undocumented)
    """
    if not isinstance(Dialect,_LLVMInlineAsmDialect__Base):
        raise TypeError("argument 'Dialect' must be of type '_LLVMInlineAsmDialect__Base'")
    _LLVMGetInlineAsm__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetInlineAsm(
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        <char *>rocm.llvm._util.types.CStr.from_pyobj(AsmString)._ptr,AsmStringSize,
        <char *>rocm.llvm._util.types.CStr.from_pyobj(Constraints)._ptr,ConstraintsSize,HasSideEffects,IsAlignStack,Dialect.value,CanThrow))
    return None if _LLVMGetInlineAsm__retval._ptr == NULL else _LLVMGetInlineAsm__retval


@cython.embedsignature(True)
def LLVMGetModuleContext(object M):
    r"""(No short description, might be part of a group.)

    Obtain the context to which this module is associated.

    See:
        `~.Module``~.`~.getContext``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)
    """
    _LLVMGetModuleContext__retval = LLVMOpaqueContext.from_ptr(ccore.LLVMGetModuleContext(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMGetModuleContext__retval._ptr == NULL else _LLVMGetModuleContext__retval


@cython.embedsignature(True)
def LLVMGetTypeByName(object M, object Name):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMGetTypeByName2 instead. */

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMGetTypeByName__retval = LLVMOpaqueType.from_ptr(ccore.LLVMGetTypeByName(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMGetTypeByName__retval._ptr == NULL else _LLVMGetTypeByName__retval


@cython.embedsignature(True)
def LLVMGetFirstNamedMetadata(object M):
    r"""(No short description, might be part of a group.)

    Obtain an iterator to the first NamedMDNode in a Module.

    See:
        `~.llvm``~.`~.Module`.`~.named_metadata_begin``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)
    """
    _LLVMGetFirstNamedMetadata__retval = LLVMOpaqueNamedMDNode.from_ptr(ccore.LLVMGetFirstNamedMetadata(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMGetFirstNamedMetadata__retval._ptr == NULL else _LLVMGetFirstNamedMetadata__retval


@cython.embedsignature(True)
def LLVMGetLastNamedMetadata(object M):
    r"""(No short description, might be part of a group.)

    Obtain an iterator to the last NamedMDNode in a Module.

    See:
        `~.llvm``~.`~.Module`.`~.named_metadata_end``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)
    """
    _LLVMGetLastNamedMetadata__retval = LLVMOpaqueNamedMDNode.from_ptr(ccore.LLVMGetLastNamedMetadata(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMGetLastNamedMetadata__retval._ptr == NULL else _LLVMGetLastNamedMetadata__retval


@cython.embedsignature(True)
def LLVMGetNextNamedMetadata(object NamedMDNode):
    r"""(No short description, might be part of a group.)

    Advance a NamedMDNode iterator to the next NamedMDNode.

    Returns NULL if the iterator was already at the end and there are no more
    named metadata nodes.

    Args:
        NamedMDNode (`~.LLVMOpaqueNamedMDNode`/`~.object`):
            (undocumented)
    """
    _LLVMGetNextNamedMetadata__retval = LLVMOpaqueNamedMDNode.from_ptr(ccore.LLVMGetNextNamedMetadata(
        LLVMOpaqueNamedMDNode.from_pyobj(NamedMDNode).get_element_ptr()))
    return None if _LLVMGetNextNamedMetadata__retval._ptr == NULL else _LLVMGetNextNamedMetadata__retval


@cython.embedsignature(True)
def LLVMGetPreviousNamedMetadata(object NamedMDNode):
    r"""(No short description, might be part of a group.)

    Decrement a NamedMDNode iterator to the previous NamedMDNode.

    Returns NULL if the iterator was already at the beginning and there are
    no previous named metadata nodes.

    Args:
        NamedMDNode (`~.LLVMOpaqueNamedMDNode`/`~.object`):
            (undocumented)
    """
    _LLVMGetPreviousNamedMetadata__retval = LLVMOpaqueNamedMDNode.from_ptr(ccore.LLVMGetPreviousNamedMetadata(
        LLVMOpaqueNamedMDNode.from_pyobj(NamedMDNode).get_element_ptr()))
    return None if _LLVMGetPreviousNamedMetadata__retval._ptr == NULL else _LLVMGetPreviousNamedMetadata__retval


@cython.embedsignature(True)
def LLVMGetNamedMetadata(object M, object Name, unsigned long NameLen):
    r"""(No short description, might be part of a group.)

    Retrieve a NamedMDNode with the given name, returning NULL if no such
    node exists.

    See:
        `~.llvm``~.`~.Module`.`~.getNamedMetadata``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        NameLen (`~.int`):
            (undocumented)
    """
    _LLVMGetNamedMetadata__retval = LLVMOpaqueNamedMDNode.from_ptr(ccore.LLVMGetNamedMetadata(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr,NameLen))
    return None if _LLVMGetNamedMetadata__retval._ptr == NULL else _LLVMGetNamedMetadata__retval


@cython.embedsignature(True)
def LLVMGetOrInsertNamedMetadata(object M, object Name, unsigned long NameLen):
    r"""(No short description, might be part of a group.)

    Retrieve a NamedMDNode with the given name, creating a new node if no such
    node exists.

    See:
        `~.llvm``~.`~.Module`.`~.getOrInsertNamedMetadata``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        NameLen (`~.int`):
            (undocumented)
    """
    _LLVMGetOrInsertNamedMetadata__retval = LLVMOpaqueNamedMDNode.from_ptr(ccore.LLVMGetOrInsertNamedMetadata(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr,NameLen))
    return None if _LLVMGetOrInsertNamedMetadata__retval._ptr == NULL else _LLVMGetOrInsertNamedMetadata__retval


@cython.embedsignature(True)
def LLVMGetNamedMetadataName(object NamedMD, object NameLen):
    r"""(No short description, might be part of a group.)

    Retrieve the name of a NamedMDNode.

    See:
        `~.llvm``~.`~.NamedMDNode`.`~.getName``()

    Args:
        NamedMD (`~.LLVMOpaqueNamedMDNode`/`~.object`):
            (undocumented)

        NameLen (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMGetNamedMetadataName__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetNamedMetadataName(
        LLVMOpaqueNamedMDNode.from_pyobj(NamedMD).get_element_ptr(),
        <unsigned long *>rocm.llvm._util.types.Pointer.from_pyobj(NameLen)._ptr))
    return None if _LLVMGetNamedMetadataName__retval._ptr == NULL else _LLVMGetNamedMetadataName__retval


@cython.embedsignature(True)
def LLVMGetNamedMetadataNumOperands(object M, object Name):
    r"""(No short description, might be part of a group.)

    Obtain the number of operands for named metadata in a module.

    See:
        `~.llvm``~.`~.Module`.`~.getNamedMetadata``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetNamedMetadataNumOperands__retval = ccore.LLVMGetNamedMetadataNumOperands(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr)
    return _LLVMGetNamedMetadataNumOperands__retval


@cython.embedsignature(True)
def LLVMGetNamedMetadataOperands(object M, object Name, object Dest):
    r"""(No short description, might be part of a group.)

    Obtain the named metadata operands for a module.

    The passed LLVMValueRef pointer should refer to an array of
    LLVMValueRef at least LLVMGetNamedMetadataNumOperands long. This
    array will be populated with the LLVMValueRef instances. Each
    instance corresponds to a llvm`~.MDNode`.

    See:
        `~.llvm``~.`~.Module`.`~.getNamedMetadata``()

    See:
        `~.llvm``~.`~.MDNode`.`~.getOperand``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        Dest (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    ccore.LLVMGetNamedMetadataOperands(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr,
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(Dest)._ptr)


@cython.embedsignature(True)
def LLVMAddNamedMetadataOperand(object M, object Name, object Val):
    r"""(No short description, might be part of a group.)

    Add an operand to named metadata.

    See:
        `~.llvm``~.`~.Module`.`~.getNamedMetadata``()

    See:
        `~.llvm``~.`~.MDNode`.`~.addOperand``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMAddNamedMetadataOperand(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr,
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetDebugLocDirectory(object Val, object Length):
    r"""(No short description, might be part of a group.)

    Return the directory of the debug location for this value, which must be
    an llvm`~.Instruction`, llvm`~.GlobalVariable`, or llvm`~.Function`.

    See:
        `~.llvm``~.`~.Instruction`.`~.getDebugLoc``()

    See:
        `~.llvm``~.`~.GlobalVariable`.`~.getDebugInfo``()

    See:
        `~.llvm``~.`~.Function`.`~.getSubprogram``()

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Length (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMGetDebugLocDirectory__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetDebugLocDirectory(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        <unsigned int *>rocm.llvm._util.types.Pointer.from_pyobj(Length)._ptr))
    return None if _LLVMGetDebugLocDirectory__retval._ptr == NULL else _LLVMGetDebugLocDirectory__retval


@cython.embedsignature(True)
def LLVMGetDebugLocFilename(object Val, object Length):
    r"""(No short description, might be part of a group.)

    Return the filename of the debug location for this value, which must be
    an llvm`~.Instruction`, llvm`~.GlobalVariable`, or llvm`~.Function`.

    See:
        `~.llvm``~.`~.Instruction`.`~.getDebugLoc``()

    See:
        `~.llvm``~.`~.GlobalVariable`.`~.getDebugInfo``()

    See:
        `~.llvm``~.`~.Function`.`~.getSubprogram``()

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Length (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMGetDebugLocFilename__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetDebugLocFilename(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        <unsigned int *>rocm.llvm._util.types.Pointer.from_pyobj(Length)._ptr))
    return None if _LLVMGetDebugLocFilename__retval._ptr == NULL else _LLVMGetDebugLocFilename__retval


@cython.embedsignature(True)
def LLVMGetDebugLocLine(object Val):
    r"""(No short description, might be part of a group.)

    Return the line number of the debug location for this value, which must be
    an llvm`~.Instruction`, llvm`~.GlobalVariable`, or llvm`~.Function`.

    See:
        `~.llvm``~.`~.Instruction`.`~.getDebugLoc``()

    See:
        `~.llvm``~.`~.GlobalVariable`.`~.getDebugInfo``()

    See:
        `~.llvm``~.`~.Function`.`~.getSubprogram``()

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetDebugLocLine__retval = ccore.LLVMGetDebugLocLine(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr())
    return _LLVMGetDebugLocLine__retval


@cython.embedsignature(True)
def LLVMGetDebugLocColumn(object Val):
    r"""(No short description, might be part of a group.)

    Return the column number of the debug location for this value, which must be
    an llvm`~.Instruction`.

    See:
        `~.llvm``~.`~.Instruction`.`~.getDebugLoc``()

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetDebugLocColumn__retval = ccore.LLVMGetDebugLocColumn(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr())
    return _LLVMGetDebugLocColumn__retval


@cython.embedsignature(True)
def LLVMAddFunction(object M, object Name, object FunctionTy):
    r"""(No short description, might be part of a group.)

    Add a function to a module under a specified name.

    See:
        `~.llvm``~.`~.Function`.`~.Create``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        FunctionTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMAddFunction__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMAddFunction(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr,
        LLVMOpaqueType.from_pyobj(FunctionTy).get_element_ptr()))
    return None if _LLVMAddFunction__retval._ptr == NULL else _LLVMAddFunction__retval


@cython.embedsignature(True)
def LLVMGetNamedFunction(object M, object Name):
    r"""(No short description, might be part of a group.)

    Obtain a Function value from a Module by its name.

    The returned value corresponds to a llvm`~.Function` value.

    See:
        `~.llvm``~.`~.Module`.`~.getFunction``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMGetNamedFunction__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetNamedFunction(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMGetNamedFunction__retval._ptr == NULL else _LLVMGetNamedFunction__retval


@cython.embedsignature(True)
def LLVMGetFirstFunction(object M):
    r"""(No short description, might be part of a group.)

    Obtain an iterator to the first Function in a Module.

    See:
        `~.llvm``~.`~.Module`.`~.begin``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)
    """
    _LLVMGetFirstFunction__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetFirstFunction(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMGetFirstFunction__retval._ptr == NULL else _LLVMGetFirstFunction__retval


@cython.embedsignature(True)
def LLVMGetLastFunction(object M):
    r"""(No short description, might be part of a group.)

    Obtain an iterator to the last Function in a Module.

    See:
        `~.llvm``~.`~.Module`.`~.end``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)
    """
    _LLVMGetLastFunction__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetLastFunction(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMGetLastFunction__retval._ptr == NULL else _LLVMGetLastFunction__retval


@cython.embedsignature(True)
def LLVMGetNextFunction(object Fn):
    r"""(No short description, might be part of a group.)

    Advance a Function iterator to the next Function.

    Returns NULL if the iterator was already at the end and there are no more
    functions.

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetNextFunction__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetNextFunction(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr()))
    return None if _LLVMGetNextFunction__retval._ptr == NULL else _LLVMGetNextFunction__retval


@cython.embedsignature(True)
def LLVMGetPreviousFunction(object Fn):
    r"""(No short description, might be part of a group.)

    Decrement a Function iterator to the previous Function.

    Returns NULL if the iterator was already at the beginning and there are
    no previous functions.

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetPreviousFunction__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetPreviousFunction(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr()))
    return None if _LLVMGetPreviousFunction__retval._ptr == NULL else _LLVMGetPreviousFunction__retval


@cython.embedsignature(True)
def LLVMSetModuleInlineAsm(object M, object Asm):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMSetModuleInlineAsm2 instead. */

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Asm (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetModuleInlineAsm(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Asm)._ptr)


@cython.embedsignature(True)
def LLVMGetTypeKind(object Ty):
    r"""(No short description, might be part of a group.)

    Obtain the enumerated type of a Type instance.

    See:
        `~.llvm``~.`~.Type``:`~.getTypeID`()

    Args:
        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

    Returns:
        `~.LLVMTypeKind`
    """
    _LLVMGetTypeKind__retval = LLVMTypeKind(ccore.LLVMGetTypeKind(
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr()))
    return _LLVMGetTypeKind__retval


@cython.embedsignature(True)
def LLVMTypeIsSized(object Ty):
    r"""(No short description, might be part of a group.)

    Whether the type has a known size.

    Things that don't have a size are abstract types, labels, and void.a

    See:
        `~.llvm``~.`~.Type`.`~.isSized``()

    Args:
        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMTypeIsSized__retval = ccore.LLVMTypeIsSized(
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr())
    return _LLVMTypeIsSized__retval


@cython.embedsignature(True)
def LLVMGetTypeContext(object Ty):
    r"""(No short description, might be part of a group.)

    Obtain the context to which this type instance is associated.

    See:
        `~.llvm``~.`~.Type`.`~.getContext``()

    Args:
        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMGetTypeContext__retval = LLVMOpaqueContext.from_ptr(ccore.LLVMGetTypeContext(
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr()))
    return None if _LLVMGetTypeContext__retval._ptr == NULL else _LLVMGetTypeContext__retval


@cython.embedsignature(True)
def LLVMDumpType(object Val):
    r"""(No short description, might be part of a group.)

    Dump a representation of a type to stderr.

    See:
        `~.llvm``~.`~.Type`.`~.dump``()

    Args:
        Val (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    ccore.LLVMDumpType(
        LLVMOpaqueType.from_pyobj(Val).get_element_ptr())


@cython.embedsignature(True)
def LLVMPrintTypeToString(object Val):
    r"""(No short description, might be part of a group.)

    Return a string representation of the type. Use
    LLVMDisposeMessage to free the string.

    See:
        `~.llvm``~.`~.Type`.`~.print``()

    Args:
        Val (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMPrintTypeToString__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMPrintTypeToString(
        LLVMOpaqueType.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMPrintTypeToString__retval._ptr == NULL else _LLVMPrintTypeToString__retval


@cython.embedsignature(True)
def LLVMInt1TypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Obtain an integer type from a context with specified bit width.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMInt1TypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMInt1TypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMInt1TypeInContext__retval._ptr == NULL else _LLVMInt1TypeInContext__retval


@cython.embedsignature(True)
def LLVMInt8TypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMInt8TypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMInt8TypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMInt8TypeInContext__retval._ptr == NULL else _LLVMInt8TypeInContext__retval


@cython.embedsignature(True)
def LLVMInt16TypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMInt16TypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMInt16TypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMInt16TypeInContext__retval._ptr == NULL else _LLVMInt16TypeInContext__retval


@cython.embedsignature(True)
def LLVMInt32TypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMInt32TypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMInt32TypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMInt32TypeInContext__retval._ptr == NULL else _LLVMInt32TypeInContext__retval


@cython.embedsignature(True)
def LLVMInt64TypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMInt64TypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMInt64TypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMInt64TypeInContext__retval._ptr == NULL else _LLVMInt64TypeInContext__retval


@cython.embedsignature(True)
def LLVMInt128TypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMInt128TypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMInt128TypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMInt128TypeInContext__retval._ptr == NULL else _LLVMInt128TypeInContext__retval


@cython.embedsignature(True)
def LLVMIntTypeInContext(object C, unsigned int NumBits):
    r"""(No short description, might be part of a group.)

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        NumBits (`~.int`):
            (undocumented)
    """
    _LLVMIntTypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMIntTypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),NumBits))
    return None if _LLVMIntTypeInContext__retval._ptr == NULL else _LLVMIntTypeInContext__retval


@cython.embedsignature(True)
def LLVMInt1Type():
    r"""(No short description, might be part of a group.)

    Obtain an integer type from the global context with a specified bit
    width.
    """
    _LLVMInt1Type__retval = LLVMOpaqueType.from_ptr(ccore.LLVMInt1Type())
    return None if _LLVMInt1Type__retval._ptr == NULL else _LLVMInt1Type__retval


@cython.embedsignature(True)
def LLVMInt8Type():
    r"""(No short description, might be part of a group.)
    """
    _LLVMInt8Type__retval = LLVMOpaqueType.from_ptr(ccore.LLVMInt8Type())
    return None if _LLVMInt8Type__retval._ptr == NULL else _LLVMInt8Type__retval


@cython.embedsignature(True)
def LLVMInt16Type():
    r"""(No short description, might be part of a group.)
    """
    _LLVMInt16Type__retval = LLVMOpaqueType.from_ptr(ccore.LLVMInt16Type())
    return None if _LLVMInt16Type__retval._ptr == NULL else _LLVMInt16Type__retval


@cython.embedsignature(True)
def LLVMInt32Type():
    r"""(No short description, might be part of a group.)
    """
    _LLVMInt32Type__retval = LLVMOpaqueType.from_ptr(ccore.LLVMInt32Type())
    return None if _LLVMInt32Type__retval._ptr == NULL else _LLVMInt32Type__retval


@cython.embedsignature(True)
def LLVMInt64Type():
    r"""(No short description, might be part of a group.)
    """
    _LLVMInt64Type__retval = LLVMOpaqueType.from_ptr(ccore.LLVMInt64Type())
    return None if _LLVMInt64Type__retval._ptr == NULL else _LLVMInt64Type__retval


@cython.embedsignature(True)
def LLVMInt128Type():
    r"""(No short description, might be part of a group.)
    """
    _LLVMInt128Type__retval = LLVMOpaqueType.from_ptr(ccore.LLVMInt128Type())
    return None if _LLVMInt128Type__retval._ptr == NULL else _LLVMInt128Type__retval


@cython.embedsignature(True)
def LLVMIntType(unsigned int NumBits):
    r"""(No short description, might be part of a group.)

    Args:
        NumBits (`~.int`):
            (undocumented)
    """
    _LLVMIntType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMIntType(NumBits))
    return None if _LLVMIntType__retval._ptr == NULL else _LLVMIntType__retval


@cython.embedsignature(True)
def LLVMGetIntTypeWidth(object IntegerTy):
    r"""(No short description, might be part of a group.)

    Args:
        IntegerTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetIntTypeWidth__retval = ccore.LLVMGetIntTypeWidth(
        LLVMOpaqueType.from_pyobj(IntegerTy).get_element_ptr())
    return _LLVMGetIntTypeWidth__retval


@cython.embedsignature(True)
def LLVMHalfTypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Obtain a 16-bit floating point type from a context.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMHalfTypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMHalfTypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMHalfTypeInContext__retval._ptr == NULL else _LLVMHalfTypeInContext__retval


@cython.embedsignature(True)
def LLVMBFloatTypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Obtain a 16-bit brain floating point type from a context.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMBFloatTypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMBFloatTypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMBFloatTypeInContext__retval._ptr == NULL else _LLVMBFloatTypeInContext__retval


@cython.embedsignature(True)
def LLVMFloatTypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Obtain a 32-bit floating point type from a context.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMFloatTypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMFloatTypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMFloatTypeInContext__retval._ptr == NULL else _LLVMFloatTypeInContext__retval


@cython.embedsignature(True)
def LLVMDoubleTypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Obtain a 64-bit floating point type from a context.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMDoubleTypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMDoubleTypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMDoubleTypeInContext__retval._ptr == NULL else _LLVMDoubleTypeInContext__retval


@cython.embedsignature(True)
def LLVMX86FP80TypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Obtain a 80-bit floating point type (X87) from a context.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMX86FP80TypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMX86FP80TypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMX86FP80TypeInContext__retval._ptr == NULL else _LLVMX86FP80TypeInContext__retval


@cython.embedsignature(True)
def LLVMFP128TypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Obtain a 128-bit floating point type (112-bit mantissa) from a
    context.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMFP128TypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMFP128TypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMFP128TypeInContext__retval._ptr == NULL else _LLVMFP128TypeInContext__retval


@cython.embedsignature(True)
def LLVMPPCFP128TypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Obtain a 128-bit floating point type (two 64-bits) from a context.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMPPCFP128TypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMPPCFP128TypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMPPCFP128TypeInContext__retval._ptr == NULL else _LLVMPPCFP128TypeInContext__retval


@cython.embedsignature(True)
def LLVMHalfType():
    r"""(No short description, might be part of a group.)

    Obtain a floating point type from the global context.

    These map to the functions in this group of the same name.
    """
    _LLVMHalfType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMHalfType())
    return None if _LLVMHalfType__retval._ptr == NULL else _LLVMHalfType__retval


@cython.embedsignature(True)
def LLVMBFloatType():
    r"""(No short description, might be part of a group.)
    """
    _LLVMBFloatType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMBFloatType())
    return None if _LLVMBFloatType__retval._ptr == NULL else _LLVMBFloatType__retval


@cython.embedsignature(True)
def LLVMFloatType():
    r"""(No short description, might be part of a group.)
    """
    _LLVMFloatType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMFloatType())
    return None if _LLVMFloatType__retval._ptr == NULL else _LLVMFloatType__retval


@cython.embedsignature(True)
def LLVMDoubleType():
    r"""(No short description, might be part of a group.)
    """
    _LLVMDoubleType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMDoubleType())
    return None if _LLVMDoubleType__retval._ptr == NULL else _LLVMDoubleType__retval


@cython.embedsignature(True)
def LLVMX86FP80Type():
    r"""(No short description, might be part of a group.)
    """
    _LLVMX86FP80Type__retval = LLVMOpaqueType.from_ptr(ccore.LLVMX86FP80Type())
    return None if _LLVMX86FP80Type__retval._ptr == NULL else _LLVMX86FP80Type__retval


@cython.embedsignature(True)
def LLVMFP128Type():
    r"""(No short description, might be part of a group.)
    """
    _LLVMFP128Type__retval = LLVMOpaqueType.from_ptr(ccore.LLVMFP128Type())
    return None if _LLVMFP128Type__retval._ptr == NULL else _LLVMFP128Type__retval


@cython.embedsignature(True)
def LLVMPPCFP128Type():
    r"""(No short description, might be part of a group.)
    """
    _LLVMPPCFP128Type__retval = LLVMOpaqueType.from_ptr(ccore.LLVMPPCFP128Type())
    return None if _LLVMPPCFP128Type__retval._ptr == NULL else _LLVMPPCFP128Type__retval


@cython.embedsignature(True)
def LLVMFunctionType(object ReturnType, object ParamTypes, unsigned int ParamCount, int IsVarArg):
    r"""(No short description, might be part of a group.)

    Obtain a function type consisting of a specified signature.

    The function is defined as a tuple of a return Type, a list of
    parameter types, and whether the function is variadic.

    Args:
        ReturnType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        ParamTypes (`~.rocm.llvm._util.types.ListOfPointer`/`~.object`):
            (undocumented)

        ParamCount (`~.int`):
            (undocumented)

        IsVarArg (`~.int`):
            (undocumented)
    """
    _LLVMFunctionType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMFunctionType(
        LLVMOpaqueType.from_pyobj(ReturnType).get_element_ptr(),
        <ccore.LLVMTypeRef*>rocm.llvm._util.types.ListOfPointer.from_pyobj(ParamTypes)._ptr,ParamCount,IsVarArg))
    return None if _LLVMFunctionType__retval._ptr == NULL else _LLVMFunctionType__retval


@cython.embedsignature(True)
def LLVMIsFunctionVarArg(object FunctionTy):
    r"""(No short description, might be part of a group.)

    Returns whether a function type is variadic.

    Args:
        FunctionTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsFunctionVarArg__retval = ccore.LLVMIsFunctionVarArg(
        LLVMOpaqueType.from_pyobj(FunctionTy).get_element_ptr())
    return _LLVMIsFunctionVarArg__retval


@cython.embedsignature(True)
def LLVMGetReturnType(object FunctionTy):
    r"""(No short description, might be part of a group.)

    Obtain the Type this function Type returns.

    Args:
        FunctionTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMGetReturnType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMGetReturnType(
        LLVMOpaqueType.from_pyobj(FunctionTy).get_element_ptr()))
    return None if _LLVMGetReturnType__retval._ptr == NULL else _LLVMGetReturnType__retval


@cython.embedsignature(True)
def LLVMCountParamTypes(object FunctionTy):
    r"""(No short description, might be part of a group.)

    Obtain the number of parameters this function accepts.

    Args:
        FunctionTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMCountParamTypes__retval = ccore.LLVMCountParamTypes(
        LLVMOpaqueType.from_pyobj(FunctionTy).get_element_ptr())
    return _LLVMCountParamTypes__retval


@cython.embedsignature(True)
def LLVMGetParamTypes(object FunctionTy, object Dest):
    r"""(No short description, might be part of a group.)

    Obtain the types of a function's parameters.

    The Dest parameter should point to a pre-allocated array of
    LLVMTypeRef at least LLVMCountParamTypes() large. On return, the
    first LLVMCountParamTypes() entries in the array will be populated
    with LLVMTypeRef instances.

    Args:
        FunctionTy (`~.LLVMOpaqueType`/`~.object`):
            The function type to operate on.

        Dest (`~.rocm.llvm._util.types.ListOfPointer`/`~.object`):
            Memory address of an array to be filled with result.
    """
    ccore.LLVMGetParamTypes(
        LLVMOpaqueType.from_pyobj(FunctionTy).get_element_ptr(),
        <ccore.LLVMTypeRef*>rocm.llvm._util.types.ListOfPointer.from_pyobj(Dest)._ptr)


@cython.embedsignature(True)
def LLVMStructTypeInContext(object C, object ElementTypes, unsigned int ElementCount, int Packed):
    r"""(No short description, might be part of a group.)

    Create a new structure type in a context.

    A structure is specified by a list of inner elements/types and
    whether these can be packed together.

    See:
        `~.llvm``~.`~.StructType`.`~.create``()

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        ElementTypes (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        ElementCount (`~.int`):
            (undocumented)

        Packed (`~.int`):
            (undocumented)
    """
    _LLVMStructTypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMStructTypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        <ccore.LLVMTypeRef*>rocm.llvm._util.types.Pointer.from_pyobj(ElementTypes)._ptr,ElementCount,Packed))
    return None if _LLVMStructTypeInContext__retval._ptr == NULL else _LLVMStructTypeInContext__retval


@cython.embedsignature(True)
def LLVMStructType(object ElementTypes, unsigned int ElementCount, int Packed):
    r"""(No short description, might be part of a group.)

    Create a new structure type in the global context.

    See:
        `~.llvm``~.`~.StructType`.`~.create``()

    Args:
        ElementTypes (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        ElementCount (`~.int`):
            (undocumented)

        Packed (`~.int`):
            (undocumented)
    """
    _LLVMStructType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMStructType(
        <ccore.LLVMTypeRef*>rocm.llvm._util.types.Pointer.from_pyobj(ElementTypes)._ptr,ElementCount,Packed))
    return None if _LLVMStructType__retval._ptr == NULL else _LLVMStructType__retval


@cython.embedsignature(True)
def LLVMStructCreateNamed(object C, object Name):
    r"""(No short description, might be part of a group.)

    Create an empty structure in a context having a specified name.

    See:
        `~.llvm``~.`~.StructType`.`~.create``()

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMStructCreateNamed__retval = LLVMOpaqueType.from_ptr(ccore.LLVMStructCreateNamed(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMStructCreateNamed__retval._ptr == NULL else _LLVMStructCreateNamed__retval


@cython.embedsignature(True)
def LLVMGetStructName(object Ty):
    r"""(No short description, might be part of a group.)

    Obtain the name of a structure.

    See:
        `~.llvm``~.`~.StructType`.`~.getName``()

    Args:
        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMGetStructName__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetStructName(
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr()))
    return None if _LLVMGetStructName__retval._ptr == NULL else _LLVMGetStructName__retval


@cython.embedsignature(True)
def LLVMStructSetBody(object StructTy, object ElementTypes, unsigned int ElementCount, int Packed):
    r"""(No short description, might be part of a group.)

    Set the contents of a structure type.

    See:
        `~.llvm``~.`~.StructType`.`~.setBody``()

    Args:
        StructTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        ElementTypes (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        ElementCount (`~.int`):
            (undocumented)

        Packed (`~.int`):
            (undocumented)
    """
    ccore.LLVMStructSetBody(
        LLVMOpaqueType.from_pyobj(StructTy).get_element_ptr(),
        <ccore.LLVMTypeRef*>rocm.llvm._util.types.Pointer.from_pyobj(ElementTypes)._ptr,ElementCount,Packed)


@cython.embedsignature(True)
def LLVMCountStructElementTypes(object StructTy):
    r"""(No short description, might be part of a group.)

    Get the number of elements defined inside the structure.

    See:
        `~.llvm``~.`~.StructType`.`~.getNumElements``()

    Args:
        StructTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMCountStructElementTypes__retval = ccore.LLVMCountStructElementTypes(
        LLVMOpaqueType.from_pyobj(StructTy).get_element_ptr())
    return _LLVMCountStructElementTypes__retval


@cython.embedsignature(True)
def LLVMGetStructElementTypes(object StructTy, object Dest):
    r"""(No short description, might be part of a group.)

    Get the elements within a structure.

    The function is passed the address of a pre-allocated array of
    LLVMTypeRef at least LLVMCountStructElementTypes() long. After
    invocation, this array will be populated with the structure's
    elements. The objects in the destination array will have a lifetime
    of the structure type itself, which is the lifetime of the context it
    is contained in.

    Args:
        StructTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Dest (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    ccore.LLVMGetStructElementTypes(
        LLVMOpaqueType.from_pyobj(StructTy).get_element_ptr(),
        <ccore.LLVMTypeRef*>rocm.llvm._util.types.Pointer.from_pyobj(Dest)._ptr)


@cython.embedsignature(True)
def LLVMStructGetTypeAtIndex(object StructTy, unsigned int i):
    r"""(No short description, might be part of a group.)

    Get the type of the element at a given index in the structure.

    See:
        `~.llvm``~.`~.StructType`.`~.getTypeAtIndex``()

    Args:
        StructTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        i (`~.int`):
            (undocumented)
    """
    _LLVMStructGetTypeAtIndex__retval = LLVMOpaqueType.from_ptr(ccore.LLVMStructGetTypeAtIndex(
        LLVMOpaqueType.from_pyobj(StructTy).get_element_ptr(),i))
    return None if _LLVMStructGetTypeAtIndex__retval._ptr == NULL else _LLVMStructGetTypeAtIndex__retval


@cython.embedsignature(True)
def LLVMIsPackedStruct(object StructTy):
    r"""(No short description, might be part of a group.)

    Determine whether a structure is packed.

    See:
        `~.llvm``~.`~.StructType`.`~.isPacked``()

    Args:
        StructTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsPackedStruct__retval = ccore.LLVMIsPackedStruct(
        LLVMOpaqueType.from_pyobj(StructTy).get_element_ptr())
    return _LLVMIsPackedStruct__retval


@cython.embedsignature(True)
def LLVMIsOpaqueStruct(object StructTy):
    r"""(No short description, might be part of a group.)

    Determine whether a structure is opaque.

    See:
        `~.llvm``~.`~.StructType`.`~.isOpaque``()

    Args:
        StructTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsOpaqueStruct__retval = ccore.LLVMIsOpaqueStruct(
        LLVMOpaqueType.from_pyobj(StructTy).get_element_ptr())
    return _LLVMIsOpaqueStruct__retval


@cython.embedsignature(True)
def LLVMIsLiteralStruct(object StructTy):
    r"""(No short description, might be part of a group.)

    Determine whether a structure is literal.

    See:
        `~.llvm``~.`~.StructType`.`~.isLiteral``()

    Args:
        StructTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsLiteralStruct__retval = ccore.LLVMIsLiteralStruct(
        LLVMOpaqueType.from_pyobj(StructTy).get_element_ptr())
    return _LLVMIsLiteralStruct__retval


@cython.embedsignature(True)
def LLVMGetElementType(object Ty):
    r"""(No short description, might be part of a group.)

    Obtain the element type of an array or vector type.

    This currently also works for pointer types, but this usage is deprecated.

    See:
        `~.llvm``~.`~.SequentialType`.`~.getElementType``()

    Args:
        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMGetElementType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMGetElementType(
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr()))
    return None if _LLVMGetElementType__retval._ptr == NULL else _LLVMGetElementType__retval


@cython.embedsignature(True)
def LLVMGetSubtypes(object Tp, object Arr):
    r"""(No short description, might be part of a group.)

    Returns type's subtypes

    See:
        `~.llvm``~.`~.Type`.`~.subtypes``()

    Args:
        Tp (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Arr (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    ccore.LLVMGetSubtypes(
        LLVMOpaqueType.from_pyobj(Tp).get_element_ptr(),
        <ccore.LLVMTypeRef*>rocm.llvm._util.types.Pointer.from_pyobj(Arr)._ptr)


@cython.embedsignature(True)
def LLVMGetNumContainedTypes(object Tp):
    r"""(No short description, might be part of a group.)

    Return the number of types in the derived type.

    See:
        `~.llvm``~.`~.Type`.`~.getNumContainedTypes``()

    Args:
        Tp (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetNumContainedTypes__retval = ccore.LLVMGetNumContainedTypes(
        LLVMOpaqueType.from_pyobj(Tp).get_element_ptr())
    return _LLVMGetNumContainedTypes__retval


@cython.embedsignature(True)
def LLVMArrayType(object ElementType, unsigned int ElementCount):
    r"""(No short description, might be part of a group.)

    Create a fixed size array type that refers to a specific type.

    The created type will exist in the context that its element type
    exists in.

    See:
        `~.llvm``~.`~.ArrayType`.`~.get``()

    Args:
        ElementType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        ElementCount (`~.int`):
            (undocumented)
    """
    _LLVMArrayType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMArrayType(
        LLVMOpaqueType.from_pyobj(ElementType).get_element_ptr(),ElementCount))
    return None if _LLVMArrayType__retval._ptr == NULL else _LLVMArrayType__retval


@cython.embedsignature(True)
def LLVMGetArrayLength(object ArrayTy):
    r"""(No short description, might be part of a group.)

    Obtain the length of an array type.

    This only works on types that represent arrays.

    See:
        `~.llvm``~.`~.ArrayType`.`~.getNumElements``()

    Args:
        ArrayTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetArrayLength__retval = ccore.LLVMGetArrayLength(
        LLVMOpaqueType.from_pyobj(ArrayTy).get_element_ptr())
    return _LLVMGetArrayLength__retval


@cython.embedsignature(True)
def LLVMPointerType(object ElementType, unsigned int AddressSpace):
    r"""(No short description, might be part of a group.)

    Create a pointer type that points to a defined type.

    The created type will exist in the context that its pointee type
    exists in.

    See:
        `~.llvm``~.`~.PointerType`.`~.get``()

    Args:
        ElementType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        AddressSpace (`~.int`):
            (undocumented)
    """
    _LLVMPointerType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMPointerType(
        LLVMOpaqueType.from_pyobj(ElementType).get_element_ptr(),AddressSpace))
    return None if _LLVMPointerType__retval._ptr == NULL else _LLVMPointerType__retval


@cython.embedsignature(True)
def LLVMPointerTypeIsOpaque(object Ty):
    r"""(No short description, might be part of a group.)

    Determine whether a pointer is opaque.

    True if this is an instance of an opaque PointerType.

    See:
        `~.llvm``~.`~.Type`.`~.isOpaquePointerTy``()

    Args:
        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMPointerTypeIsOpaque__retval = ccore.LLVMPointerTypeIsOpaque(
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr())
    return _LLVMPointerTypeIsOpaque__retval


@cython.embedsignature(True)
def LLVMPointerTypeInContext(object C, unsigned int AddressSpace):
    r"""(No short description, might be part of a group.)

    Create an opaque pointer type in a context.

    See:
        `~.llvm``~.`~.PointerType`.`~.get``()

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        AddressSpace (`~.int`):
            (undocumented)
    """
    _LLVMPointerTypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMPointerTypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),AddressSpace))
    return None if _LLVMPointerTypeInContext__retval._ptr == NULL else _LLVMPointerTypeInContext__retval


@cython.embedsignature(True)
def LLVMGetPointerAddressSpace(object PointerTy):
    r"""(No short description, might be part of a group.)

    Obtain the address space of a pointer type.

    This only works on types that represent pointers.

    See:
        `~.llvm``~.`~.PointerType`.`~.getAddressSpace``()

    Args:
        PointerTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetPointerAddressSpace__retval = ccore.LLVMGetPointerAddressSpace(
        LLVMOpaqueType.from_pyobj(PointerTy).get_element_ptr())
    return _LLVMGetPointerAddressSpace__retval


@cython.embedsignature(True)
def LLVMVectorType(object ElementType, unsigned int ElementCount):
    r"""(No short description, might be part of a group.)

    Create a vector type that contains a defined type and has a specific
    number of elements.

    The created type will exist in the context thats its element type
    exists in.

    See:
        `~.llvm``~.`~.VectorType`.`~.get``()

    Args:
        ElementType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        ElementCount (`~.int`):
            (undocumented)
    """
    _LLVMVectorType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMVectorType(
        LLVMOpaqueType.from_pyobj(ElementType).get_element_ptr(),ElementCount))
    return None if _LLVMVectorType__retval._ptr == NULL else _LLVMVectorType__retval


@cython.embedsignature(True)
def LLVMScalableVectorType(object ElementType, unsigned int ElementCount):
    r"""(No short description, might be part of a group.)

    Create a vector type that contains a defined type and has a scalable
    number of elements.

    The created type will exist in the context thats its element type
    exists in.

    See:
        `~.llvm``~.`~.ScalableVectorType`.`~.get``()

    Args:
        ElementType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        ElementCount (`~.int`):
            (undocumented)
    """
    _LLVMScalableVectorType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMScalableVectorType(
        LLVMOpaqueType.from_pyobj(ElementType).get_element_ptr(),ElementCount))
    return None if _LLVMScalableVectorType__retval._ptr == NULL else _LLVMScalableVectorType__retval


@cython.embedsignature(True)
def LLVMGetVectorSize(object VectorTy):
    r"""(No short description, might be part of a group.)

    Obtain the (possibly scalable) number of elements in a vector type.

    This only works on types that represent vectors (fixed or scalable).

    See:
        `~.llvm``~.`~.VectorType`.`~.getNumElements``()

    Args:
        VectorTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetVectorSize__retval = ccore.LLVMGetVectorSize(
        LLVMOpaqueType.from_pyobj(VectorTy).get_element_ptr())
    return _LLVMGetVectorSize__retval


@cython.embedsignature(True)
def LLVMVoidTypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Create a void type in a context.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMVoidTypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMVoidTypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMVoidTypeInContext__retval._ptr == NULL else _LLVMVoidTypeInContext__retval


@cython.embedsignature(True)
def LLVMLabelTypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Create a label type in a context.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMLabelTypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMLabelTypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMLabelTypeInContext__retval._ptr == NULL else _LLVMLabelTypeInContext__retval


@cython.embedsignature(True)
def LLVMX86MMXTypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Create a X86 MMX type in a context.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMX86MMXTypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMX86MMXTypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMX86MMXTypeInContext__retval._ptr == NULL else _LLVMX86MMXTypeInContext__retval


@cython.embedsignature(True)
def LLVMX86AMXTypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Create a X86 AMX type in a context.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMX86AMXTypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMX86AMXTypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMX86AMXTypeInContext__retval._ptr == NULL else _LLVMX86AMXTypeInContext__retval


@cython.embedsignature(True)
def LLVMTokenTypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Create a token type in a context.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMTokenTypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMTokenTypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMTokenTypeInContext__retval._ptr == NULL else _LLVMTokenTypeInContext__retval


@cython.embedsignature(True)
def LLVMMetadataTypeInContext(object C):
    r"""(No short description, might be part of a group.)

    Create a metadata type in a context.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMMetadataTypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMMetadataTypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMMetadataTypeInContext__retval._ptr == NULL else _LLVMMetadataTypeInContext__retval


@cython.embedsignature(True)
def LLVMVoidType():
    r"""(No short description, might be part of a group.)

    These are similar to the above functions except they operate on the
    global context.
    """
    _LLVMVoidType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMVoidType())
    return None if _LLVMVoidType__retval._ptr == NULL else _LLVMVoidType__retval


@cython.embedsignature(True)
def LLVMLabelType():
    r"""(No short description, might be part of a group.)
    """
    _LLVMLabelType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMLabelType())
    return None if _LLVMLabelType__retval._ptr == NULL else _LLVMLabelType__retval


@cython.embedsignature(True)
def LLVMX86MMXType():
    r"""(No short description, might be part of a group.)
    """
    _LLVMX86MMXType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMX86MMXType())
    return None if _LLVMX86MMXType__retval._ptr == NULL else _LLVMX86MMXType__retval


@cython.embedsignature(True)
def LLVMX86AMXType():
    r"""(No short description, might be part of a group.)
    """
    _LLVMX86AMXType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMX86AMXType())
    return None if _LLVMX86AMXType__retval._ptr == NULL else _LLVMX86AMXType__retval


@cython.embedsignature(True)
def LLVMTargetExtTypeInContext(object C, object Name, object TypeParams, unsigned int TypeParamCount, object IntParams, unsigned int IntParamCount):
    r"""(No short description, might be part of a group.)

    Create a target extension type in LLVM context.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        TypeParams (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        TypeParamCount (`~.int`):
            (undocumented)

        IntParams (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        IntParamCount (`~.int`):
            (undocumented)
    """
    _LLVMTargetExtTypeInContext__retval = LLVMOpaqueType.from_ptr(ccore.LLVMTargetExtTypeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr,
        <ccore.LLVMTypeRef*>rocm.llvm._util.types.Pointer.from_pyobj(TypeParams)._ptr,TypeParamCount,
        <unsigned int *>rocm.llvm._util.types.Pointer.from_pyobj(IntParams)._ptr,IntParamCount))
    return None if _LLVMTargetExtTypeInContext__retval._ptr == NULL else _LLVMTargetExtTypeInContext__retval


@cython.embedsignature(True)
def LLVMTypeOf(object Val):
    r"""(No short description, might be part of a group.)

    Obtain the type of a value.

    See:
        `~.llvm``~.`~.Value`.`~.getType``()

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMTypeOf__retval = LLVMOpaqueType.from_ptr(ccore.LLVMTypeOf(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMTypeOf__retval._ptr == NULL else _LLVMTypeOf__retval


@cython.embedsignature(True)
def LLVMGetValueKind(object Val):
    r"""(No short description, might be part of a group.)

    Obtain the enumerated type of a Value instance.

    See:
        `~.llvm``~.`~.Value`.`~.getValueID``()

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.LLVMValueKind`
    """
    _LLVMGetValueKind__retval = LLVMValueKind(ccore.LLVMGetValueKind(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return _LLVMGetValueKind__retval


@cython.embedsignature(True)
def LLVMGetValueName2(object Val):
    r"""(No short description, might be part of a group.)

    Obtain the string name of a value.

    See:
        `~.llvm``~.`~.Value`.`~.getName``()

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        A `~.tuple` of size 2 that contains (in that order):

        * `~.bytes`
        * Length (`~.int`):
            (undocumented)
    """
    cdef unsigned long Length
    _LLVMGetValueName2__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetValueName2(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),&Length))
    return (None if _LLVMGetValueName2__retval._ptr == NULL else _LLVMGetValueName2__retval,Length)


@cython.embedsignature(True)
def LLVMSetValueName2(object Val, object Name, unsigned long NameLen):
    r"""(No short description, might be part of a group.)

    Set the string name of a value.

    See:
        `~.llvm``~.`~.Value`.`~.setName``()

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        NameLen (`~.int`):
            (undocumented)
    """
    ccore.LLVMSetValueName2(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr,NameLen)


@cython.embedsignature(True)
def LLVMDumpValue(object Val):
    r"""(No short description, might be part of a group.)

    Dump a representation of a value to stderr.

    See:
        `~.llvm``~.`~.Value`.`~.dump``()

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMDumpValue(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr())


@cython.embedsignature(True)
def LLVMPrintValueToString(object Val):
    r"""(No short description, might be part of a group.)

    Return a string representation of the value. Use
    LLVMDisposeMessage to free the string.

    See:
        `~.llvm``~.`~.Value`.`~.print``()

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMPrintValueToString__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMPrintValueToString(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMPrintValueToString__retval._ptr == NULL else _LLVMPrintValueToString__retval


@cython.embedsignature(True)
def LLVMReplaceAllUsesWith(object OldVal, object NewVal):
    r"""(No short description, might be part of a group.)

    Replace all uses of a value with another one.

    See:
        `~.llvm``~.`~.Value`.`~.replaceAllUsesWith``()

    Args:
        OldVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        NewVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMReplaceAllUsesWith(
        LLVMOpaqueValue.from_pyobj(OldVal).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(NewVal).get_element_ptr())


@cython.embedsignature(True)
def LLVMIsConstant(object Val):
    r"""(No short description, might be part of a group.)

    Determine whether the specified value instance is constant.

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsConstant__retval = ccore.LLVMIsConstant(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr())
    return _LLVMIsConstant__retval


@cython.embedsignature(True)
def LLVMIsUndef(object Val):
    r"""(No short description, might be part of a group.)

    Determine whether a value instance is undefined.

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsUndef__retval = ccore.LLVMIsUndef(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr())
    return _LLVMIsUndef__retval


@cython.embedsignature(True)
def LLVMIsPoison(object Val):
    r"""(No short description, might be part of a group.)

    Determine whether a value instance is poisonous.

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsPoison__retval = ccore.LLVMIsPoison(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr())
    return _LLVMIsPoison__retval


@cython.embedsignature(True)
def LLVMIsAArgument(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAArgument__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAArgument(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAArgument__retval._ptr == NULL else _LLVMIsAArgument__retval


@cython.embedsignature(True)
def LLVMIsABasicBlock(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsABasicBlock__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsABasicBlock(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsABasicBlock__retval._ptr == NULL else _LLVMIsABasicBlock__retval


@cython.embedsignature(True)
def LLVMIsAInlineAsm(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAInlineAsm__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAInlineAsm(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAInlineAsm__retval._ptr == NULL else _LLVMIsAInlineAsm__retval


@cython.embedsignature(True)
def LLVMIsAUser(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAUser__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAUser(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAUser__retval._ptr == NULL else _LLVMIsAUser__retval


@cython.embedsignature(True)
def LLVMIsAConstant(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAConstant__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAConstant(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAConstant__retval._ptr == NULL else _LLVMIsAConstant__retval


@cython.embedsignature(True)
def LLVMIsABlockAddress(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsABlockAddress__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsABlockAddress(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsABlockAddress__retval._ptr == NULL else _LLVMIsABlockAddress__retval


@cython.embedsignature(True)
def LLVMIsAConstantAggregateZero(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAConstantAggregateZero__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAConstantAggregateZero(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAConstantAggregateZero__retval._ptr == NULL else _LLVMIsAConstantAggregateZero__retval


@cython.embedsignature(True)
def LLVMIsAConstantArray(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAConstantArray__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAConstantArray(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAConstantArray__retval._ptr == NULL else _LLVMIsAConstantArray__retval


@cython.embedsignature(True)
def LLVMIsAConstantDataSequential(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAConstantDataSequential__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAConstantDataSequential(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAConstantDataSequential__retval._ptr == NULL else _LLVMIsAConstantDataSequential__retval


@cython.embedsignature(True)
def LLVMIsAConstantDataArray(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAConstantDataArray__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAConstantDataArray(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAConstantDataArray__retval._ptr == NULL else _LLVMIsAConstantDataArray__retval


@cython.embedsignature(True)
def LLVMIsAConstantDataVector(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAConstantDataVector__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAConstantDataVector(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAConstantDataVector__retval._ptr == NULL else _LLVMIsAConstantDataVector__retval


@cython.embedsignature(True)
def LLVMIsAConstantExpr(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAConstantExpr__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAConstantExpr(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAConstantExpr__retval._ptr == NULL else _LLVMIsAConstantExpr__retval


@cython.embedsignature(True)
def LLVMIsAConstantFP(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAConstantFP__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAConstantFP(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAConstantFP__retval._ptr == NULL else _LLVMIsAConstantFP__retval


@cython.embedsignature(True)
def LLVMIsAConstantInt(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAConstantInt__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAConstantInt(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAConstantInt__retval._ptr == NULL else _LLVMIsAConstantInt__retval


@cython.embedsignature(True)
def LLVMIsAConstantPointerNull(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAConstantPointerNull__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAConstantPointerNull(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAConstantPointerNull__retval._ptr == NULL else _LLVMIsAConstantPointerNull__retval


@cython.embedsignature(True)
def LLVMIsAConstantStruct(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAConstantStruct__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAConstantStruct(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAConstantStruct__retval._ptr == NULL else _LLVMIsAConstantStruct__retval


@cython.embedsignature(True)
def LLVMIsAConstantTokenNone(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAConstantTokenNone__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAConstantTokenNone(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAConstantTokenNone__retval._ptr == NULL else _LLVMIsAConstantTokenNone__retval


@cython.embedsignature(True)
def LLVMIsAConstantVector(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAConstantVector__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAConstantVector(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAConstantVector__retval._ptr == NULL else _LLVMIsAConstantVector__retval


@cython.embedsignature(True)
def LLVMIsAGlobalValue(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAGlobalValue__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAGlobalValue(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAGlobalValue__retval._ptr == NULL else _LLVMIsAGlobalValue__retval


@cython.embedsignature(True)
def LLVMIsAGlobalAlias(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAGlobalAlias__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAGlobalAlias(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAGlobalAlias__retval._ptr == NULL else _LLVMIsAGlobalAlias__retval


@cython.embedsignature(True)
def LLVMIsAGlobalObject(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAGlobalObject__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAGlobalObject(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAGlobalObject__retval._ptr == NULL else _LLVMIsAGlobalObject__retval


@cython.embedsignature(True)
def LLVMIsAFunction(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAFunction__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAFunction(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAFunction__retval._ptr == NULL else _LLVMIsAFunction__retval


@cython.embedsignature(True)
def LLVMIsAGlobalVariable(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAGlobalVariable__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAGlobalVariable(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAGlobalVariable__retval._ptr == NULL else _LLVMIsAGlobalVariable__retval


@cython.embedsignature(True)
def LLVMIsAGlobalIFunc(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAGlobalIFunc__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAGlobalIFunc(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAGlobalIFunc__retval._ptr == NULL else _LLVMIsAGlobalIFunc__retval


@cython.embedsignature(True)
def LLVMIsAUndefValue(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAUndefValue__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAUndefValue(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAUndefValue__retval._ptr == NULL else _LLVMIsAUndefValue__retval


@cython.embedsignature(True)
def LLVMIsAPoisonValue(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAPoisonValue__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAPoisonValue(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAPoisonValue__retval._ptr == NULL else _LLVMIsAPoisonValue__retval


@cython.embedsignature(True)
def LLVMIsAInstruction(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAInstruction__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAInstruction(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAInstruction__retval._ptr == NULL else _LLVMIsAInstruction__retval


@cython.embedsignature(True)
def LLVMIsAUnaryOperator(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAUnaryOperator__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAUnaryOperator(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAUnaryOperator__retval._ptr == NULL else _LLVMIsAUnaryOperator__retval


@cython.embedsignature(True)
def LLVMIsABinaryOperator(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsABinaryOperator__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsABinaryOperator(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsABinaryOperator__retval._ptr == NULL else _LLVMIsABinaryOperator__retval


@cython.embedsignature(True)
def LLVMIsACallInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsACallInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsACallInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsACallInst__retval._ptr == NULL else _LLVMIsACallInst__retval


@cython.embedsignature(True)
def LLVMIsAIntrinsicInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAIntrinsicInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAIntrinsicInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAIntrinsicInst__retval._ptr == NULL else _LLVMIsAIntrinsicInst__retval


@cython.embedsignature(True)
def LLVMIsADbgInfoIntrinsic(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsADbgInfoIntrinsic__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsADbgInfoIntrinsic(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsADbgInfoIntrinsic__retval._ptr == NULL else _LLVMIsADbgInfoIntrinsic__retval


@cython.embedsignature(True)
def LLVMIsADbgVariableIntrinsic(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsADbgVariableIntrinsic__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsADbgVariableIntrinsic(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsADbgVariableIntrinsic__retval._ptr == NULL else _LLVMIsADbgVariableIntrinsic__retval


@cython.embedsignature(True)
def LLVMIsADbgDeclareInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsADbgDeclareInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsADbgDeclareInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsADbgDeclareInst__retval._ptr == NULL else _LLVMIsADbgDeclareInst__retval


@cython.embedsignature(True)
def LLVMIsADbgLabelInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsADbgLabelInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsADbgLabelInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsADbgLabelInst__retval._ptr == NULL else _LLVMIsADbgLabelInst__retval


@cython.embedsignature(True)
def LLVMIsAMemIntrinsic(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAMemIntrinsic__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAMemIntrinsic(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAMemIntrinsic__retval._ptr == NULL else _LLVMIsAMemIntrinsic__retval


@cython.embedsignature(True)
def LLVMIsAMemCpyInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAMemCpyInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAMemCpyInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAMemCpyInst__retval._ptr == NULL else _LLVMIsAMemCpyInst__retval


@cython.embedsignature(True)
def LLVMIsAMemMoveInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAMemMoveInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAMemMoveInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAMemMoveInst__retval._ptr == NULL else _LLVMIsAMemMoveInst__retval


@cython.embedsignature(True)
def LLVMIsAMemSetInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAMemSetInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAMemSetInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAMemSetInst__retval._ptr == NULL else _LLVMIsAMemSetInst__retval


@cython.embedsignature(True)
def LLVMIsACmpInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsACmpInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsACmpInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsACmpInst__retval._ptr == NULL else _LLVMIsACmpInst__retval


@cython.embedsignature(True)
def LLVMIsAFCmpInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAFCmpInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAFCmpInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAFCmpInst__retval._ptr == NULL else _LLVMIsAFCmpInst__retval


@cython.embedsignature(True)
def LLVMIsAICmpInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAICmpInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAICmpInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAICmpInst__retval._ptr == NULL else _LLVMIsAICmpInst__retval


@cython.embedsignature(True)
def LLVMIsAExtractElementInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAExtractElementInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAExtractElementInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAExtractElementInst__retval._ptr == NULL else _LLVMIsAExtractElementInst__retval


@cython.embedsignature(True)
def LLVMIsAGetElementPtrInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAGetElementPtrInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAGetElementPtrInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAGetElementPtrInst__retval._ptr == NULL else _LLVMIsAGetElementPtrInst__retval


@cython.embedsignature(True)
def LLVMIsAInsertElementInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAInsertElementInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAInsertElementInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAInsertElementInst__retval._ptr == NULL else _LLVMIsAInsertElementInst__retval


@cython.embedsignature(True)
def LLVMIsAInsertValueInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAInsertValueInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAInsertValueInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAInsertValueInst__retval._ptr == NULL else _LLVMIsAInsertValueInst__retval


@cython.embedsignature(True)
def LLVMIsALandingPadInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsALandingPadInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsALandingPadInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsALandingPadInst__retval._ptr == NULL else _LLVMIsALandingPadInst__retval


@cython.embedsignature(True)
def LLVMIsAPHINode(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAPHINode__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAPHINode(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAPHINode__retval._ptr == NULL else _LLVMIsAPHINode__retval


@cython.embedsignature(True)
def LLVMIsASelectInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsASelectInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsASelectInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsASelectInst__retval._ptr == NULL else _LLVMIsASelectInst__retval


@cython.embedsignature(True)
def LLVMIsAShuffleVectorInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAShuffleVectorInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAShuffleVectorInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAShuffleVectorInst__retval._ptr == NULL else _LLVMIsAShuffleVectorInst__retval


@cython.embedsignature(True)
def LLVMIsAStoreInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAStoreInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAStoreInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAStoreInst__retval._ptr == NULL else _LLVMIsAStoreInst__retval


@cython.embedsignature(True)
def LLVMIsABranchInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsABranchInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsABranchInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsABranchInst__retval._ptr == NULL else _LLVMIsABranchInst__retval


@cython.embedsignature(True)
def LLVMIsAIndirectBrInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAIndirectBrInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAIndirectBrInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAIndirectBrInst__retval._ptr == NULL else _LLVMIsAIndirectBrInst__retval


@cython.embedsignature(True)
def LLVMIsAInvokeInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAInvokeInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAInvokeInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAInvokeInst__retval._ptr == NULL else _LLVMIsAInvokeInst__retval


@cython.embedsignature(True)
def LLVMIsAReturnInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAReturnInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAReturnInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAReturnInst__retval._ptr == NULL else _LLVMIsAReturnInst__retval


@cython.embedsignature(True)
def LLVMIsASwitchInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsASwitchInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsASwitchInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsASwitchInst__retval._ptr == NULL else _LLVMIsASwitchInst__retval


@cython.embedsignature(True)
def LLVMIsAUnreachableInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAUnreachableInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAUnreachableInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAUnreachableInst__retval._ptr == NULL else _LLVMIsAUnreachableInst__retval


@cython.embedsignature(True)
def LLVMIsAResumeInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAResumeInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAResumeInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAResumeInst__retval._ptr == NULL else _LLVMIsAResumeInst__retval


@cython.embedsignature(True)
def LLVMIsACleanupReturnInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsACleanupReturnInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsACleanupReturnInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsACleanupReturnInst__retval._ptr == NULL else _LLVMIsACleanupReturnInst__retval


@cython.embedsignature(True)
def LLVMIsACatchReturnInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsACatchReturnInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsACatchReturnInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsACatchReturnInst__retval._ptr == NULL else _LLVMIsACatchReturnInst__retval


@cython.embedsignature(True)
def LLVMIsACatchSwitchInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsACatchSwitchInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsACatchSwitchInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsACatchSwitchInst__retval._ptr == NULL else _LLVMIsACatchSwitchInst__retval


@cython.embedsignature(True)
def LLVMIsACallBrInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsACallBrInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsACallBrInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsACallBrInst__retval._ptr == NULL else _LLVMIsACallBrInst__retval


@cython.embedsignature(True)
def LLVMIsAFuncletPadInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAFuncletPadInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAFuncletPadInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAFuncletPadInst__retval._ptr == NULL else _LLVMIsAFuncletPadInst__retval


@cython.embedsignature(True)
def LLVMIsACatchPadInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsACatchPadInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsACatchPadInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsACatchPadInst__retval._ptr == NULL else _LLVMIsACatchPadInst__retval


@cython.embedsignature(True)
def LLVMIsACleanupPadInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsACleanupPadInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsACleanupPadInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsACleanupPadInst__retval._ptr == NULL else _LLVMIsACleanupPadInst__retval


@cython.embedsignature(True)
def LLVMIsAUnaryInstruction(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAUnaryInstruction__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAUnaryInstruction(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAUnaryInstruction__retval._ptr == NULL else _LLVMIsAUnaryInstruction__retval


@cython.embedsignature(True)
def LLVMIsAAllocaInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAAllocaInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAAllocaInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAAllocaInst__retval._ptr == NULL else _LLVMIsAAllocaInst__retval


@cython.embedsignature(True)
def LLVMIsACastInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsACastInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsACastInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsACastInst__retval._ptr == NULL else _LLVMIsACastInst__retval


@cython.embedsignature(True)
def LLVMIsAAddrSpaceCastInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAAddrSpaceCastInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAAddrSpaceCastInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAAddrSpaceCastInst__retval._ptr == NULL else _LLVMIsAAddrSpaceCastInst__retval


@cython.embedsignature(True)
def LLVMIsABitCastInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsABitCastInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsABitCastInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsABitCastInst__retval._ptr == NULL else _LLVMIsABitCastInst__retval


@cython.embedsignature(True)
def LLVMIsAFPExtInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAFPExtInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAFPExtInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAFPExtInst__retval._ptr == NULL else _LLVMIsAFPExtInst__retval


@cython.embedsignature(True)
def LLVMIsAFPToSIInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAFPToSIInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAFPToSIInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAFPToSIInst__retval._ptr == NULL else _LLVMIsAFPToSIInst__retval


@cython.embedsignature(True)
def LLVMIsAFPToUIInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAFPToUIInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAFPToUIInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAFPToUIInst__retval._ptr == NULL else _LLVMIsAFPToUIInst__retval


@cython.embedsignature(True)
def LLVMIsAFPTruncInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAFPTruncInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAFPTruncInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAFPTruncInst__retval._ptr == NULL else _LLVMIsAFPTruncInst__retval


@cython.embedsignature(True)
def LLVMIsAIntToPtrInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAIntToPtrInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAIntToPtrInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAIntToPtrInst__retval._ptr == NULL else _LLVMIsAIntToPtrInst__retval


@cython.embedsignature(True)
def LLVMIsAPtrToIntInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAPtrToIntInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAPtrToIntInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAPtrToIntInst__retval._ptr == NULL else _LLVMIsAPtrToIntInst__retval


@cython.embedsignature(True)
def LLVMIsASExtInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsASExtInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsASExtInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsASExtInst__retval._ptr == NULL else _LLVMIsASExtInst__retval


@cython.embedsignature(True)
def LLVMIsASIToFPInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsASIToFPInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsASIToFPInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsASIToFPInst__retval._ptr == NULL else _LLVMIsASIToFPInst__retval


@cython.embedsignature(True)
def LLVMIsATruncInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsATruncInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsATruncInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsATruncInst__retval._ptr == NULL else _LLVMIsATruncInst__retval


@cython.embedsignature(True)
def LLVMIsAUIToFPInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAUIToFPInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAUIToFPInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAUIToFPInst__retval._ptr == NULL else _LLVMIsAUIToFPInst__retval


@cython.embedsignature(True)
def LLVMIsAZExtInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAZExtInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAZExtInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAZExtInst__retval._ptr == NULL else _LLVMIsAZExtInst__retval


@cython.embedsignature(True)
def LLVMIsAExtractValueInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAExtractValueInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAExtractValueInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAExtractValueInst__retval._ptr == NULL else _LLVMIsAExtractValueInst__retval


@cython.embedsignature(True)
def LLVMIsALoadInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsALoadInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsALoadInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsALoadInst__retval._ptr == NULL else _LLVMIsALoadInst__retval


@cython.embedsignature(True)
def LLVMIsAVAArgInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAVAArgInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAVAArgInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAVAArgInst__retval._ptr == NULL else _LLVMIsAVAArgInst__retval


@cython.embedsignature(True)
def LLVMIsAFreezeInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAFreezeInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAFreezeInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAFreezeInst__retval._ptr == NULL else _LLVMIsAFreezeInst__retval


@cython.embedsignature(True)
def LLVMIsAAtomicCmpXchgInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAAtomicCmpXchgInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAAtomicCmpXchgInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAAtomicCmpXchgInst__retval._ptr == NULL else _LLVMIsAAtomicCmpXchgInst__retval


@cython.embedsignature(True)
def LLVMIsAAtomicRMWInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAAtomicRMWInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAAtomicRMWInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAAtomicRMWInst__retval._ptr == NULL else _LLVMIsAAtomicRMWInst__retval


@cython.embedsignature(True)
def LLVMIsAFenceInst(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAFenceInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAFenceInst(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAFenceInst__retval._ptr == NULL else _LLVMIsAFenceInst__retval


@cython.embedsignature(True)
def LLVMIsAMDNode(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAMDNode__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAMDNode(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAMDNode__retval._ptr == NULL else _LLVMIsAMDNode__retval


@cython.embedsignature(True)
def LLVMIsAMDString(object Val):
    r"""(No short description, might be part of a group.)

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsAMDString__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsAMDString(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMIsAMDString__retval._ptr == NULL else _LLVMIsAMDString__retval


@cython.embedsignature(True)
def LLVMGetValueName(object Val):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMGetValueName2 instead. */

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMGetValueName__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetValueName(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMGetValueName__retval._ptr == NULL else _LLVMGetValueName__retval


@cython.embedsignature(True)
def LLVMSetValueName(object Val, object Name):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMSetValueName2 instead. */

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetValueName(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr)


@cython.embedsignature(True)
def LLVMGetFirstUse(object Val):
    r"""(No short description, might be part of a group.)

    Obtain the first use of a value.

    Uses are obtained in an iterator fashion. First, call this function
    to obtain a reference to the first use. Then, call LLVMGetNextUse()
    on that instance and all subsequently obtained instances until
    LLVMGetNextUse() returns NULL.

    See:
        `~.llvm``~.`~.Value`.`~.use_begin``()

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetFirstUse__retval = LLVMOpaqueUse.from_ptr(ccore.LLVMGetFirstUse(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMGetFirstUse__retval._ptr == NULL else _LLVMGetFirstUse__retval


@cython.embedsignature(True)
def LLVMGetNextUse(object U):
    r"""(No short description, might be part of a group.)

    Obtain the next use of a value.

    This effectively advances the iterator. It returns NULL if you are on
    the final use and no more are available.

    Args:
        U (`~.LLVMOpaqueUse`/`~.object`):
            (undocumented)
    """
    _LLVMGetNextUse__retval = LLVMOpaqueUse.from_ptr(ccore.LLVMGetNextUse(
        LLVMOpaqueUse.from_pyobj(U).get_element_ptr()))
    return None if _LLVMGetNextUse__retval._ptr == NULL else _LLVMGetNextUse__retval


@cython.embedsignature(True)
def LLVMGetUser(object U):
    r"""(No short description, might be part of a group.)

    Obtain the user value for a user.

    The returned value corresponds to a llvm`~.User` type.

    See:
        `~.llvm``~.`~.Use`.`~.getUser``()

    Args:
        U (`~.LLVMOpaqueUse`/`~.object`):
            (undocumented)
    """
    _LLVMGetUser__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetUser(
        LLVMOpaqueUse.from_pyobj(U).get_element_ptr()))
    return None if _LLVMGetUser__retval._ptr == NULL else _LLVMGetUser__retval


@cython.embedsignature(True)
def LLVMGetUsedValue(object U):
    r"""(No short description, might be part of a group.)

    Obtain the value this use corresponds to.

    See:
        `~.llvm``~.`~.Use`.`~.get``().

    Args:
        U (`~.LLVMOpaqueUse`/`~.object`):
            (undocumented)
    """
    _LLVMGetUsedValue__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetUsedValue(
        LLVMOpaqueUse.from_pyobj(U).get_element_ptr()))
    return None if _LLVMGetUsedValue__retval._ptr == NULL else _LLVMGetUsedValue__retval


@cython.embedsignature(True)
def LLVMGetOperand(object Val, unsigned int Index):
    r"""(No short description, might be part of a group.)

    Obtain an operand at a specific index in a llvm`~.User` value.

    See:
        `~.llvm``~.`~.User`.`~.getOperand``()

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Index (`~.int`):
            (undocumented)
    """
    _LLVMGetOperand__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetOperand(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),Index))
    return None if _LLVMGetOperand__retval._ptr == NULL else _LLVMGetOperand__retval


@cython.embedsignature(True)
def LLVMGetOperandUse(object Val, unsigned int Index):
    r"""(No short description, might be part of a group.)

    Obtain the use of an operand at a specific index in a llvm`~.User` value.

    See:
        `~.llvm``~.`~.User`.`~.getOperandUse``()

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Index (`~.int`):
            (undocumented)
    """
    _LLVMGetOperandUse__retval = LLVMOpaqueUse.from_ptr(ccore.LLVMGetOperandUse(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),Index))
    return None if _LLVMGetOperandUse__retval._ptr == NULL else _LLVMGetOperandUse__retval


@cython.embedsignature(True)
def LLVMSetOperand(object User, unsigned int Index, object Val):
    r"""(No short description, might be part of a group.)

    Set an operand at a specific index in a llvm`~.User` value.

    See:
        `~.llvm``~.`~.User`.`~.setOperand``()

    Args:
        User (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Index (`~.int`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetOperand(
        LLVMOpaqueValue.from_pyobj(User).get_element_ptr(),Index,
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetNumOperands(object Val):
    r"""(No short description, might be part of a group.)

    Obtain the number of operands in a llvm`~.User` value.

    See:
        `~.llvm``~.`~.User`.`~.getNumOperands``()

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMGetNumOperands__retval = ccore.LLVMGetNumOperands(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr())
    return _LLVMGetNumOperands__retval


@cython.embedsignature(True)
def LLVMConstNull(object Ty):
    r"""(No short description, might be part of a group.)

    Obtain a constant value referring to the null instance of a type.

    See:
        `~.llvm``~.`~.Constant`.`~.getNullValue``()

    Args:
        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstNull__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstNull(
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr()))
    return None if _LLVMConstNull__retval._ptr == NULL else _LLVMConstNull__retval


@cython.embedsignature(True)
def LLVMConstAllOnes(object Ty):
    r"""(No short description, might be part of a group.)

    Obtain a constant value referring to the instance of a type
    consisting of all ones.

    This is only valid for integer types.

    See:
        `~.llvm``~.`~.Constant`.`~.getAllOnesValue``()

    Args:
        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstAllOnes__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstAllOnes(
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr()))
    return None if _LLVMConstAllOnes__retval._ptr == NULL else _LLVMConstAllOnes__retval


@cython.embedsignature(True)
def LLVMGetUndef(object Ty):
    r"""(No short description, might be part of a group.)

    Obtain a constant value referring to an undefined value of a type.

    See:
        `~.llvm``~.`~.UndefValue`.`~.get``()

    Args:
        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMGetUndef__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetUndef(
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr()))
    return None if _LLVMGetUndef__retval._ptr == NULL else _LLVMGetUndef__retval


@cython.embedsignature(True)
def LLVMGetPoison(object Ty):
    r"""(No short description, might be part of a group.)

    Obtain a constant value referring to a poison value of a type.

    See:
        `~.llvm``~.`~.PoisonValue`.`~.get``()

    Args:
        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMGetPoison__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetPoison(
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr()))
    return None if _LLVMGetPoison__retval._ptr == NULL else _LLVMGetPoison__retval


@cython.embedsignature(True)
def LLVMIsNull(object Val):
    r"""(No short description, might be part of a group.)

    Determine whether a value instance is null.

    See:
        `~.llvm``~.`~.Constant`.`~.isNullValue``()

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsNull__retval = ccore.LLVMIsNull(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr())
    return _LLVMIsNull__retval


@cython.embedsignature(True)
def LLVMConstPointerNull(object Ty):
    r"""(No short description, might be part of a group.)

    Obtain a constant that is a constant pointer pointing to NULL for a
    specified type.

    Args:
        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstPointerNull__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstPointerNull(
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr()))
    return None if _LLVMConstPointerNull__retval._ptr == NULL else _LLVMConstPointerNull__retval


@cython.embedsignature(True)
def LLVMConstInt(object IntTy, unsigned long long N, int SignExtend):
    r"""(No short description, might be part of a group.)

    Obtain a constant value for an integer type.

    The returned value corresponds to a llvm`~.ConstantInt`.

    See:
        `~.llvm``~.`~.ConstantInt`.`~.get``()

    Args:
        IntTy (`~.LLVMOpaqueType`/`~.object`):
            Integer type to obtain value of.

        N (`~.int`):
            The value the returned instance should refer to.

        SignExtend (`~.int`):
            Whether to sign extend the produced value.
    """
    _LLVMConstInt__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstInt(
        LLVMOpaqueType.from_pyobj(IntTy).get_element_ptr(),N,SignExtend))
    return None if _LLVMConstInt__retval._ptr == NULL else _LLVMConstInt__retval


@cython.embedsignature(True)
def LLVMConstIntOfArbitraryPrecision(object IntTy, unsigned int NumWords, object Words):
    r"""(No short description, might be part of a group.)

    Obtain a constant value for an integer of arbitrary precision.

    See:
        `~.llvm``~.`~.ConstantInt`.`~.get``()

    Args:
        IntTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        NumWords (`~.int`):
            (undocumented)

        Words (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _LLVMConstIntOfArbitraryPrecision__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstIntOfArbitraryPrecision(
        LLVMOpaqueType.from_pyobj(IntTy).get_element_ptr(),NumWords,
        <const unsigned long*>rocm.llvm._util.types.Pointer.from_pyobj(Words)._ptr))
    return None if _LLVMConstIntOfArbitraryPrecision__retval._ptr == NULL else _LLVMConstIntOfArbitraryPrecision__retval


@cython.embedsignature(True)
def LLVMConstIntOfString(object IntTy, object Text, unsigned char Radix):
    r"""(No short description, might be part of a group.)

    Obtain a constant value for an integer parsed from a string.

    A similar API, LLVMConstIntOfStringAndSize is also available. If the
    string's length is available, it is preferred to call that function
    instead.

    See:
        `~.llvm``~.`~.ConstantInt`.`~.get``()

    Args:
        IntTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Text (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        Radix (`~.int`):
            (undocumented)
    """
    _LLVMConstIntOfString__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstIntOfString(
        LLVMOpaqueType.from_pyobj(IntTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Text)._ptr,Radix))
    return None if _LLVMConstIntOfString__retval._ptr == NULL else _LLVMConstIntOfString__retval


@cython.embedsignature(True)
def LLVMConstIntOfStringAndSize(object IntTy, object Text, unsigned int SLen, unsigned char Radix):
    r"""(No short description, might be part of a group.)

    Obtain a constant value for an integer parsed from a string with
    specified length.

    See:
        `~.llvm``~.`~.ConstantInt`.`~.get``()

    Args:
        IntTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Text (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        SLen (`~.int`):
            (undocumented)

        Radix (`~.int`):
            (undocumented)
    """
    _LLVMConstIntOfStringAndSize__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstIntOfStringAndSize(
        LLVMOpaqueType.from_pyobj(IntTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Text)._ptr,SLen,Radix))
    return None if _LLVMConstIntOfStringAndSize__retval._ptr == NULL else _LLVMConstIntOfStringAndSize__retval


@cython.embedsignature(True)
def LLVMConstReal(object RealTy, double N):
    r"""(No short description, might be part of a group.)

    Obtain a constant value referring to a double floating point value.

    Args:
        RealTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        N (`~.float`/`~.int`):
            (undocumented)
    """
    _LLVMConstReal__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstReal(
        LLVMOpaqueType.from_pyobj(RealTy).get_element_ptr(),N))
    return None if _LLVMConstReal__retval._ptr == NULL else _LLVMConstReal__retval


@cython.embedsignature(True)
def LLVMConstRealOfString(object RealTy, object Text):
    r"""(No short description, might be part of a group.)

    Obtain a constant for a floating point value parsed from a string.

    A similar API, LLVMConstRealOfStringAndSize is also available. It
    should be used if the input string's length is known.

    Args:
        RealTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Text (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMConstRealOfString__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstRealOfString(
        LLVMOpaqueType.from_pyobj(RealTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Text)._ptr))
    return None if _LLVMConstRealOfString__retval._ptr == NULL else _LLVMConstRealOfString__retval


@cython.embedsignature(True)
def LLVMConstRealOfStringAndSize(object RealTy, object Text, unsigned int SLen):
    r"""(No short description, might be part of a group.)

    Obtain a constant for a floating point value parsed from a string.

    Args:
        RealTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Text (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        SLen (`~.int`):
            (undocumented)
    """
    _LLVMConstRealOfStringAndSize__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstRealOfStringAndSize(
        LLVMOpaqueType.from_pyobj(RealTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Text)._ptr,SLen))
    return None if _LLVMConstRealOfStringAndSize__retval._ptr == NULL else _LLVMConstRealOfStringAndSize__retval


@cython.embedsignature(True)
def LLVMConstIntGetZExtValue(object ConstantVal):
    r"""(No short description, might be part of a group.)

    Obtain the zero extended value for an integer constant value.

    See:
        `~.llvm``~.`~.ConstantInt`.`~.getZExtValue``()

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned long long _LLVMConstIntGetZExtValue__retval = ccore.LLVMConstIntGetZExtValue(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr())
    return _LLVMConstIntGetZExtValue__retval


@cython.embedsignature(True)
def LLVMConstIntGetSExtValue(object ConstantVal):
    r"""(No short description, might be part of a group.)

    Obtain the sign extended value for an integer constant value.

    See:
        `~.llvm``~.`~.ConstantInt`.`~.getSExtValue``()

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef long long _LLVMConstIntGetSExtValue__retval = ccore.LLVMConstIntGetSExtValue(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr())
    return _LLVMConstIntGetSExtValue__retval


@cython.embedsignature(True)
def LLVMConstRealGetDouble(object ConstantVal, object losesInfo):
    r"""(No short description, might be part of a group.)

    Obtain the double value for an floating point constant value.
    losesInfo indicates if some precision was lost in the conversion.

    See:
        `~.llvm``~.`~.ConstantFP`.`~.getDoubleValue``

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        losesInfo (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

    Returns:
        `~.float`
    """
    cdef double _LLVMConstRealGetDouble__retval = ccore.LLVMConstRealGetDouble(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        <int *>rocm.llvm._util.types.Pointer.from_pyobj(losesInfo)._ptr)
    return _LLVMConstRealGetDouble__retval


@cython.embedsignature(True)
def LLVMConstStringInContext(object C, object Str, unsigned int Length, int DontNullTerminate):
    r"""(No short description, might be part of a group.)

    Create a ConstantDataSequential and initialize it with a string.

    See:
        `~.llvm``~.`~.ConstantDataArray`.`~.getString``()

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        Str (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        Length (`~.int`):
            (undocumented)

        DontNullTerminate (`~.int`):
            (undocumented)
    """
    _LLVMConstStringInContext__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstStringInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Str)._ptr,Length,DontNullTerminate))
    return None if _LLVMConstStringInContext__retval._ptr == NULL else _LLVMConstStringInContext__retval


@cython.embedsignature(True)
def LLVMConstString(object Str, unsigned int Length, int DontNullTerminate):
    r"""(No short description, might be part of a group.)

    Create a ConstantDataSequential with string content in the global context.

    This is the same as LLVMConstStringInContext except it operates on the
    global context.

    See:
        `~.LLVMConstStringInContext`()

    See:
        `~.llvm``~.`~.ConstantDataArray`.`~.getString``()

    Args:
        Str (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        Length (`~.int`):
            (undocumented)

        DontNullTerminate (`~.int`):
            (undocumented)
    """
    _LLVMConstString__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstString(
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Str)._ptr,Length,DontNullTerminate))
    return None if _LLVMConstString__retval._ptr == NULL else _LLVMConstString__retval


@cython.embedsignature(True)
def LLVMIsConstantString(object c):
    r"""(No short description, might be part of a group.)

    Returns true if the specified constant is an array of i8.

    See:
        `~.ConstantDataSequential``~.`~.getAsString``()

    Args:
        c (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsConstantString__retval = ccore.LLVMIsConstantString(
        LLVMOpaqueValue.from_pyobj(c).get_element_ptr())
    return _LLVMIsConstantString__retval


@cython.embedsignature(True)
def LLVMGetAsString(object c, object Length):
    r"""(No short description, might be part of a group.)

    Get the given constant data sequential as a string.

    See:
        `~.ConstantDataSequential``~.`~.getAsString``()

    Args:
        c (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Length (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMGetAsString__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetAsString(
        LLVMOpaqueValue.from_pyobj(c).get_element_ptr(),
        <unsigned long *>rocm.llvm._util.types.Pointer.from_pyobj(Length)._ptr))
    return None if _LLVMGetAsString__retval._ptr == NULL else _LLVMGetAsString__retval


@cython.embedsignature(True)
def LLVMConstStructInContext(object C, object ConstantVals, unsigned int Count, int Packed):
    r"""(No short description, might be part of a group.)

    Create an anonymous ConstantStruct with the specified values.

    See:
        `~.llvm``~.`~.ConstantStruct`.`~.getAnon``()

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        ConstantVals (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        Count (`~.int`):
            (undocumented)

        Packed (`~.int`):
            (undocumented)
    """
    _LLVMConstStructInContext__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstStructInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(ConstantVals)._ptr,Count,Packed))
    return None if _LLVMConstStructInContext__retval._ptr == NULL else _LLVMConstStructInContext__retval


@cython.embedsignature(True)
def LLVMConstStruct(object ConstantVals, unsigned int Count, int Packed):
    r"""(No short description, might be part of a group.)

    Create a ConstantStruct in the global Context.

    This is the same as LLVMConstStructInContext except it operates on the
    global Context.

    See:
        `~.LLVMConstStructInContext`()

    Args:
        ConstantVals (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        Count (`~.int`):
            (undocumented)

        Packed (`~.int`):
            (undocumented)
    """
    _LLVMConstStruct__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstStruct(
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(ConstantVals)._ptr,Count,Packed))
    return None if _LLVMConstStruct__retval._ptr == NULL else _LLVMConstStruct__retval


@cython.embedsignature(True)
def LLVMConstArray(object ElementTy, object ConstantVals, unsigned int Length):
    r"""(No short description, might be part of a group.)

    Create a ConstantArray from values.

    See:
        `~.llvm``~.`~.ConstantArray`.`~.get``()

    Args:
        ElementTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        ConstantVals (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        Length (`~.int`):
            (undocumented)
    """
    _LLVMConstArray__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstArray(
        LLVMOpaqueType.from_pyobj(ElementTy).get_element_ptr(),
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(ConstantVals)._ptr,Length))
    return None if _LLVMConstArray__retval._ptr == NULL else _LLVMConstArray__retval


@cython.embedsignature(True)
def LLVMConstNamedStruct(object StructTy, object ConstantVals, unsigned int Count):
    r"""(No short description, might be part of a group.)

    Create a non-anonymous ConstantStruct from values.

    See:
        `~.llvm``~.`~.ConstantStruct`.`~.get``()

    Args:
        StructTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        ConstantVals (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        Count (`~.int`):
            (undocumented)
    """
    _LLVMConstNamedStruct__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstNamedStruct(
        LLVMOpaqueType.from_pyobj(StructTy).get_element_ptr(),
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(ConstantVals)._ptr,Count))
    return None if _LLVMConstNamedStruct__retval._ptr == NULL else _LLVMConstNamedStruct__retval


@cython.embedsignature(True)
def LLVMGetAggregateElement(object C, unsigned int Idx):
    r"""(No short description, might be part of a group.)

    Get element of a constant aggregate (struct, array or vector) at the
    specified index. Returns null if the index is out of range, or it's not
    possible to determine the element (e.g., because the constant is a
    constant expression.)

    See:
        `~.llvm``~.`~.Constant`.`~.getAggregateElement``()

    Args:
        C (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)
    """
    _LLVMGetAggregateElement__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetAggregateElement(
        LLVMOpaqueValue.from_pyobj(C).get_element_ptr(),Idx))
    return None if _LLVMGetAggregateElement__retval._ptr == NULL else _LLVMGetAggregateElement__retval


@cython.embedsignature(True)
def LLVMGetElementAsConstant(object C, unsigned int idx):
    r"""(No short description, might be part of a group.)

    Args:
        C (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        idx (`~.int`):
            (undocumented)
    """
    _LLVMGetElementAsConstant__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetElementAsConstant(
        LLVMOpaqueValue.from_pyobj(C).get_element_ptr(),idx))
    return None if _LLVMGetElementAsConstant__retval._ptr == NULL else _LLVMGetElementAsConstant__retval


@cython.embedsignature(True)
def LLVMConstVector(object ScalarConstantVals, unsigned int Size):
    r"""(No short description, might be part of a group.)

    Create a ConstantVector from values.

    See:
        `~.llvm``~.`~.ConstantVector`.`~.get``()

    Args:
        ScalarConstantVals (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        Size (`~.int`):
            (undocumented)
    """
    _LLVMConstVector__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstVector(
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(ScalarConstantVals)._ptr,Size))
    return None if _LLVMConstVector__retval._ptr == NULL else _LLVMConstVector__retval


@cython.embedsignature(True)
def LLVMGetConstOpcode(object ConstantVal):
    r"""(No short description, might be part of a group.)

    Functions in this group correspond to APIs on llvm`~.ConstantExpr`.

    See:
        `~.llvm``~.`~.ConstantExpr``.

    @{

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.LLVMOpcode`
    """
    _LLVMGetConstOpcode__retval = LLVMOpcode(ccore.LLVMGetConstOpcode(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr()))
    return _LLVMGetConstOpcode__retval


@cython.embedsignature(True)
def LLVMAlignOf(object Ty):
    r"""(No short description, might be part of a group.)

    Args:
        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMAlignOf__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMAlignOf(
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr()))
    return None if _LLVMAlignOf__retval._ptr == NULL else _LLVMAlignOf__retval


@cython.embedsignature(True)
def LLVMSizeOf(object Ty):
    r"""(No short description, might be part of a group.)

    Args:
        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMSizeOf__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMSizeOf(
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr()))
    return None if _LLVMSizeOf__retval._ptr == NULL else _LLVMSizeOf__retval


@cython.embedsignature(True)
def LLVMConstNeg(object ConstantVal):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstNeg__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstNeg(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr()))
    return None if _LLVMConstNeg__retval._ptr == NULL else _LLVMConstNeg__retval


@cython.embedsignature(True)
def LLVMConstNSWNeg(object ConstantVal):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstNSWNeg__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstNSWNeg(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr()))
    return None if _LLVMConstNSWNeg__retval._ptr == NULL else _LLVMConstNSWNeg__retval


@cython.embedsignature(True)
def LLVMConstNUWNeg(object ConstantVal):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstNUWNeg__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstNUWNeg(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr()))
    return None if _LLVMConstNUWNeg__retval._ptr == NULL else _LLVMConstNUWNeg__retval


@cython.embedsignature(True)
def LLVMConstNot(object ConstantVal):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstNot__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstNot(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr()))
    return None if _LLVMConstNot__retval._ptr == NULL else _LLVMConstNot__retval


@cython.embedsignature(True)
def LLVMConstAdd(object LHSConstant, object RHSConstant):
    r"""(No short description, might be part of a group.)

    Args:
        LHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstAdd__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstAdd(
        LLVMOpaqueValue.from_pyobj(LHSConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHSConstant).get_element_ptr()))
    return None if _LLVMConstAdd__retval._ptr == NULL else _LLVMConstAdd__retval


@cython.embedsignature(True)
def LLVMConstNSWAdd(object LHSConstant, object RHSConstant):
    r"""(No short description, might be part of a group.)

    Args:
        LHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstNSWAdd__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstNSWAdd(
        LLVMOpaqueValue.from_pyobj(LHSConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHSConstant).get_element_ptr()))
    return None if _LLVMConstNSWAdd__retval._ptr == NULL else _LLVMConstNSWAdd__retval


@cython.embedsignature(True)
def LLVMConstNUWAdd(object LHSConstant, object RHSConstant):
    r"""(No short description, might be part of a group.)

    Args:
        LHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstNUWAdd__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstNUWAdd(
        LLVMOpaqueValue.from_pyobj(LHSConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHSConstant).get_element_ptr()))
    return None if _LLVMConstNUWAdd__retval._ptr == NULL else _LLVMConstNUWAdd__retval


@cython.embedsignature(True)
def LLVMConstSub(object LHSConstant, object RHSConstant):
    r"""(No short description, might be part of a group.)

    Args:
        LHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstSub__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstSub(
        LLVMOpaqueValue.from_pyobj(LHSConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHSConstant).get_element_ptr()))
    return None if _LLVMConstSub__retval._ptr == NULL else _LLVMConstSub__retval


@cython.embedsignature(True)
def LLVMConstNSWSub(object LHSConstant, object RHSConstant):
    r"""(No short description, might be part of a group.)

    Args:
        LHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstNSWSub__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstNSWSub(
        LLVMOpaqueValue.from_pyobj(LHSConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHSConstant).get_element_ptr()))
    return None if _LLVMConstNSWSub__retval._ptr == NULL else _LLVMConstNSWSub__retval


@cython.embedsignature(True)
def LLVMConstNUWSub(object LHSConstant, object RHSConstant):
    r"""(No short description, might be part of a group.)

    Args:
        LHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstNUWSub__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstNUWSub(
        LLVMOpaqueValue.from_pyobj(LHSConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHSConstant).get_element_ptr()))
    return None if _LLVMConstNUWSub__retval._ptr == NULL else _LLVMConstNUWSub__retval


@cython.embedsignature(True)
def LLVMConstMul(object LHSConstant, object RHSConstant):
    r"""(No short description, might be part of a group.)

    Args:
        LHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstMul__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstMul(
        LLVMOpaqueValue.from_pyobj(LHSConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHSConstant).get_element_ptr()))
    return None if _LLVMConstMul__retval._ptr == NULL else _LLVMConstMul__retval


@cython.embedsignature(True)
def LLVMConstNSWMul(object LHSConstant, object RHSConstant):
    r"""(No short description, might be part of a group.)

    Args:
        LHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstNSWMul__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstNSWMul(
        LLVMOpaqueValue.from_pyobj(LHSConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHSConstant).get_element_ptr()))
    return None if _LLVMConstNSWMul__retval._ptr == NULL else _LLVMConstNSWMul__retval


@cython.embedsignature(True)
def LLVMConstNUWMul(object LHSConstant, object RHSConstant):
    r"""(No short description, might be part of a group.)

    Args:
        LHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstNUWMul__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstNUWMul(
        LLVMOpaqueValue.from_pyobj(LHSConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHSConstant).get_element_ptr()))
    return None if _LLVMConstNUWMul__retval._ptr == NULL else _LLVMConstNUWMul__retval


@cython.embedsignature(True)
def LLVMConstAnd(object LHSConstant, object RHSConstant):
    r"""(No short description, might be part of a group.)

    Args:
        LHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstAnd__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstAnd(
        LLVMOpaqueValue.from_pyobj(LHSConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHSConstant).get_element_ptr()))
    return None if _LLVMConstAnd__retval._ptr == NULL else _LLVMConstAnd__retval


@cython.embedsignature(True)
def LLVMConstOr(object LHSConstant, object RHSConstant):
    r"""(No short description, might be part of a group.)

    Args:
        LHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstOr__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstOr(
        LLVMOpaqueValue.from_pyobj(LHSConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHSConstant).get_element_ptr()))
    return None if _LLVMConstOr__retval._ptr == NULL else _LLVMConstOr__retval


@cython.embedsignature(True)
def LLVMConstXor(object LHSConstant, object RHSConstant):
    r"""(No short description, might be part of a group.)

    Args:
        LHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstXor__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstXor(
        LLVMOpaqueValue.from_pyobj(LHSConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHSConstant).get_element_ptr()))
    return None if _LLVMConstXor__retval._ptr == NULL else _LLVMConstXor__retval


@cython.embedsignature(True)
def LLVMConstICmp(object Predicate, object LHSConstant, object RHSConstant):
    r"""(No short description, might be part of a group.)

    Args:
        Predicate (`~.LLVMIntPredicate`):
            (undocumented)

        LHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    if not isinstance(Predicate,_LLVMIntPredicate__Base):
        raise TypeError("argument 'Predicate' must be of type '_LLVMIntPredicate__Base'")
    _LLVMConstICmp__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstICmp(Predicate.value,
        LLVMOpaqueValue.from_pyobj(LHSConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHSConstant).get_element_ptr()))
    return None if _LLVMConstICmp__retval._ptr == NULL else _LLVMConstICmp__retval


@cython.embedsignature(True)
def LLVMConstFCmp(object Predicate, object LHSConstant, object RHSConstant):
    r"""(No short description, might be part of a group.)

    Args:
        Predicate (`~.LLVMRealPredicate`):
            (undocumented)

        LHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    if not isinstance(Predicate,_LLVMRealPredicate__Base):
        raise TypeError("argument 'Predicate' must be of type '_LLVMRealPredicate__Base'")
    _LLVMConstFCmp__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstFCmp(Predicate.value,
        LLVMOpaqueValue.from_pyobj(LHSConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHSConstant).get_element_ptr()))
    return None if _LLVMConstFCmp__retval._ptr == NULL else _LLVMConstFCmp__retval


@cython.embedsignature(True)
def LLVMConstShl(object LHSConstant, object RHSConstant):
    r"""(No short description, might be part of a group.)

    Args:
        LHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstShl__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstShl(
        LLVMOpaqueValue.from_pyobj(LHSConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHSConstant).get_element_ptr()))
    return None if _LLVMConstShl__retval._ptr == NULL else _LLVMConstShl__retval


@cython.embedsignature(True)
def LLVMConstLShr(object LHSConstant, object RHSConstant):
    r"""(No short description, might be part of a group.)

    Args:
        LHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstLShr__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstLShr(
        LLVMOpaqueValue.from_pyobj(LHSConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHSConstant).get_element_ptr()))
    return None if _LLVMConstLShr__retval._ptr == NULL else _LLVMConstLShr__retval


@cython.embedsignature(True)
def LLVMConstAShr(object LHSConstant, object RHSConstant):
    r"""(No short description, might be part of a group.)

    Args:
        LHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHSConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstAShr__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstAShr(
        LLVMOpaqueValue.from_pyobj(LHSConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHSConstant).get_element_ptr()))
    return None if _LLVMConstAShr__retval._ptr == NULL else _LLVMConstAShr__retval


@cython.embedsignature(True)
def LLVMConstGEP2(object Ty, object ConstantVal, object ConstantIndices, unsigned int NumIndices):
    r"""(No short description, might be part of a group.)

    Args:
        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ConstantIndices (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        NumIndices (`~.int`):
            (undocumented)
    """
    _LLVMConstGEP2__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstGEP2(
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(ConstantIndices)._ptr,NumIndices))
    return None if _LLVMConstGEP2__retval._ptr == NULL else _LLVMConstGEP2__retval


@cython.embedsignature(True)
def LLVMConstInBoundsGEP2(object Ty, object ConstantVal, object ConstantIndices, unsigned int NumIndices):
    r"""(No short description, might be part of a group.)

    Args:
        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ConstantIndices (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        NumIndices (`~.int`):
            (undocumented)
    """
    _LLVMConstInBoundsGEP2__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstInBoundsGEP2(
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(ConstantIndices)._ptr,NumIndices))
    return None if _LLVMConstInBoundsGEP2__retval._ptr == NULL else _LLVMConstInBoundsGEP2__retval


@cython.embedsignature(True)
def LLVMConstTrunc(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstTrunc__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstTrunc(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstTrunc__retval._ptr == NULL else _LLVMConstTrunc__retval


@cython.embedsignature(True)
def LLVMConstSExt(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstSExt__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstSExt(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstSExt__retval._ptr == NULL else _LLVMConstSExt__retval


@cython.embedsignature(True)
def LLVMConstZExt(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstZExt__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstZExt(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstZExt__retval._ptr == NULL else _LLVMConstZExt__retval


@cython.embedsignature(True)
def LLVMConstFPTrunc(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstFPTrunc__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstFPTrunc(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstFPTrunc__retval._ptr == NULL else _LLVMConstFPTrunc__retval


@cython.embedsignature(True)
def LLVMConstFPExt(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstFPExt__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstFPExt(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstFPExt__retval._ptr == NULL else _LLVMConstFPExt__retval


@cython.embedsignature(True)
def LLVMConstUIToFP(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstUIToFP__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstUIToFP(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstUIToFP__retval._ptr == NULL else _LLVMConstUIToFP__retval


@cython.embedsignature(True)
def LLVMConstSIToFP(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstSIToFP__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstSIToFP(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstSIToFP__retval._ptr == NULL else _LLVMConstSIToFP__retval


@cython.embedsignature(True)
def LLVMConstFPToUI(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstFPToUI__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstFPToUI(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstFPToUI__retval._ptr == NULL else _LLVMConstFPToUI__retval


@cython.embedsignature(True)
def LLVMConstFPToSI(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstFPToSI__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstFPToSI(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstFPToSI__retval._ptr == NULL else _LLVMConstFPToSI__retval


@cython.embedsignature(True)
def LLVMConstPtrToInt(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstPtrToInt__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstPtrToInt(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstPtrToInt__retval._ptr == NULL else _LLVMConstPtrToInt__retval


@cython.embedsignature(True)
def LLVMConstIntToPtr(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstIntToPtr__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstIntToPtr(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstIntToPtr__retval._ptr == NULL else _LLVMConstIntToPtr__retval


@cython.embedsignature(True)
def LLVMConstBitCast(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstBitCast__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstBitCast(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstBitCast__retval._ptr == NULL else _LLVMConstBitCast__retval


@cython.embedsignature(True)
def LLVMConstAddrSpaceCast(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstAddrSpaceCast__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstAddrSpaceCast(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstAddrSpaceCast__retval._ptr == NULL else _LLVMConstAddrSpaceCast__retval


@cython.embedsignature(True)
def LLVMConstZExtOrBitCast(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstZExtOrBitCast__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstZExtOrBitCast(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstZExtOrBitCast__retval._ptr == NULL else _LLVMConstZExtOrBitCast__retval


@cython.embedsignature(True)
def LLVMConstSExtOrBitCast(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstSExtOrBitCast__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstSExtOrBitCast(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstSExtOrBitCast__retval._ptr == NULL else _LLVMConstSExtOrBitCast__retval


@cython.embedsignature(True)
def LLVMConstTruncOrBitCast(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstTruncOrBitCast__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstTruncOrBitCast(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstTruncOrBitCast__retval._ptr == NULL else _LLVMConstTruncOrBitCast__retval


@cython.embedsignature(True)
def LLVMConstPointerCast(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstPointerCast__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstPointerCast(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstPointerCast__retval._ptr == NULL else _LLVMConstPointerCast__retval


@cython.embedsignature(True)
def LLVMConstIntCast(object ConstantVal, object ToType, int isSigned):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        isSigned (`~.int`):
            (undocumented)
    """
    _LLVMConstIntCast__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstIntCast(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr(),isSigned))
    return None if _LLVMConstIntCast__retval._ptr == NULL else _LLVMConstIntCast__retval


@cython.embedsignature(True)
def LLVMConstFPCast(object ConstantVal, object ToType):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ToType (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)
    """
    _LLVMConstFPCast__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstFPCast(
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ToType).get_element_ptr()))
    return None if _LLVMConstFPCast__retval._ptr == NULL else _LLVMConstFPCast__retval


@cython.embedsignature(True)
def LLVMConstSelect(object ConstantCondition, object ConstantIfTrue, object ConstantIfFalse):
    r"""(No short description, might be part of a group.)

    Args:
        ConstantCondition (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ConstantIfTrue (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ConstantIfFalse (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstSelect__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstSelect(
        LLVMOpaqueValue.from_pyobj(ConstantCondition).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(ConstantIfTrue).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(ConstantIfFalse).get_element_ptr()))
    return None if _LLVMConstSelect__retval._ptr == NULL else _LLVMConstSelect__retval


@cython.embedsignature(True)
def LLVMConstExtractElement(object VectorConstant, object IndexConstant):
    r"""(No short description, might be part of a group.)

    Args:
        VectorConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        IndexConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstExtractElement__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstExtractElement(
        LLVMOpaqueValue.from_pyobj(VectorConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(IndexConstant).get_element_ptr()))
    return None if _LLVMConstExtractElement__retval._ptr == NULL else _LLVMConstExtractElement__retval


@cython.embedsignature(True)
def LLVMConstInsertElement(object VectorConstant, object ElementValueConstant, object IndexConstant):
    r"""(No short description, might be part of a group.)

    Args:
        VectorConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ElementValueConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        IndexConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstInsertElement__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstInsertElement(
        LLVMOpaqueValue.from_pyobj(VectorConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(ElementValueConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(IndexConstant).get_element_ptr()))
    return None if _LLVMConstInsertElement__retval._ptr == NULL else _LLVMConstInsertElement__retval


@cython.embedsignature(True)
def LLVMConstShuffleVector(object VectorAConstant, object VectorBConstant, object MaskConstant):
    r"""(No short description, might be part of a group.)

    Args:
        VectorAConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        VectorBConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        MaskConstant (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMConstShuffleVector__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstShuffleVector(
        LLVMOpaqueValue.from_pyobj(VectorAConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(VectorBConstant).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(MaskConstant).get_element_ptr()))
    return None if _LLVMConstShuffleVector__retval._ptr == NULL else _LLVMConstShuffleVector__retval


@cython.embedsignature(True)
def LLVMBlockAddress(object F, object BB):
    r"""(No short description, might be part of a group.)

    Args:
        F (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    _LLVMBlockAddress__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBlockAddress(
        LLVMOpaqueValue.from_pyobj(F).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr()))
    return None if _LLVMBlockAddress__retval._ptr == NULL else _LLVMBlockAddress__retval


@cython.embedsignature(True)
def LLVMConstInlineAsm(object Ty, object AsmString, object Constraints, int HasSideEffects, int IsAlignStack):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMGetInlineAsm instead. */

    Args:
        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        AsmString (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        Constraints (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        HasSideEffects (`~.int`):
            (undocumented)

        IsAlignStack (`~.int`):
            (undocumented)
    """
    _LLVMConstInlineAsm__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMConstInlineAsm(
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(AsmString)._ptr,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Constraints)._ptr,HasSideEffects,IsAlignStack))
    return None if _LLVMConstInlineAsm__retval._ptr == NULL else _LLVMConstInlineAsm__retval


@cython.embedsignature(True)
def LLVMGetGlobalParent(object Global):
    r"""(No short description, might be part of a group.)

    This group contains functions that operate on global values. Functions in
    this group relate to functions in the llvm`~.GlobalValue` class tree.

    See:
        `~.llvm``~.`~.GlobalValue``

    @{

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetGlobalParent__retval = LLVMOpaqueModule.from_ptr(ccore.LLVMGetGlobalParent(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr()))
    return None if _LLVMGetGlobalParent__retval._ptr == NULL else _LLVMGetGlobalParent__retval


@cython.embedsignature(True)
def LLVMIsDeclaration(object Global):
    r"""(No short description, might be part of a group.)

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsDeclaration__retval = ccore.LLVMIsDeclaration(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr())
    return _LLVMIsDeclaration__retval


@cython.embedsignature(True)
def LLVMGetLinkage(object Global):
    r"""(No short description, might be part of a group.)

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.LLVMLinkage`
    """
    _LLVMGetLinkage__retval = LLVMLinkage(ccore.LLVMGetLinkage(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr()))
    return _LLVMGetLinkage__retval


@cython.embedsignature(True)
def LLVMSetLinkage(object Global, object Linkage):
    r"""(No short description, might be part of a group.)

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Linkage (`~.LLVMLinkage`):
            (undocumented)
    """
    if not isinstance(Linkage,_LLVMLinkage__Base):
        raise TypeError("argument 'Linkage' must be of type '_LLVMLinkage__Base'")
    ccore.LLVMSetLinkage(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr(),Linkage.value)


@cython.embedsignature(True)
def LLVMGetSection(object Global):
    r"""(No short description, might be part of a group.)

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMGetSection__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetSection(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr()))
    return None if _LLVMGetSection__retval._ptr == NULL else _LLVMGetSection__retval


@cython.embedsignature(True)
def LLVMSetSection(object Global, object Section):
    r"""(No short description, might be part of a group.)

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Section (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetSection(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Section)._ptr)


@cython.embedsignature(True)
def LLVMGetVisibility(object Global):
    r"""(No short description, might be part of a group.)

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.LLVMVisibility`
    """
    _LLVMGetVisibility__retval = LLVMVisibility(ccore.LLVMGetVisibility(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr()))
    return _LLVMGetVisibility__retval


@cython.embedsignature(True)
def LLVMSetVisibility(object Global, object Viz):
    r"""(No short description, might be part of a group.)

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Viz (`~.LLVMVisibility`):
            (undocumented)
    """
    if not isinstance(Viz,_LLVMVisibility__Base):
        raise TypeError("argument 'Viz' must be of type '_LLVMVisibility__Base'")
    ccore.LLVMSetVisibility(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr(),Viz.value)


@cython.embedsignature(True)
def LLVMGetDLLStorageClass(object Global):
    r"""(No short description, might be part of a group.)

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.LLVMDLLStorageClass`
    """
    _LLVMGetDLLStorageClass__retval = LLVMDLLStorageClass(ccore.LLVMGetDLLStorageClass(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr()))
    return _LLVMGetDLLStorageClass__retval


@cython.embedsignature(True)
def LLVMSetDLLStorageClass(object Global, object Class):
    r"""(No short description, might be part of a group.)

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Class (`~.LLVMDLLStorageClass`):
            (undocumented)
    """
    if not isinstance(Class,_LLVMDLLStorageClass__Base):
        raise TypeError("argument 'Class' must be of type '_LLVMDLLStorageClass__Base'")
    ccore.LLVMSetDLLStorageClass(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr(),Class.value)


@cython.embedsignature(True)
def LLVMGetUnnamedAddress(object Global):
    r"""(No short description, might be part of a group.)

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.LLVMUnnamedAddr`
    """
    _LLVMGetUnnamedAddress__retval = LLVMUnnamedAddr(ccore.LLVMGetUnnamedAddress(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr()))
    return _LLVMGetUnnamedAddress__retval


@cython.embedsignature(True)
def LLVMSetUnnamedAddress(object Global, object UnnamedAddr):
    r"""(No short description, might be part of a group.)

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        UnnamedAddr (`~.LLVMUnnamedAddr`):
            (undocumented)
    """
    if not isinstance(UnnamedAddr,_LLVMUnnamedAddr__Base):
        raise TypeError("argument 'UnnamedAddr' must be of type '_LLVMUnnamedAddr__Base'")
    ccore.LLVMSetUnnamedAddress(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr(),UnnamedAddr.value)


@cython.embedsignature(True)
def LLVMGlobalGetValueType(object Global):
    r"""(No short description, might be part of a group.)

    Returns the "value type" of a global value.  This differs from the formal
    type of a global value which is always a pointer type.

    See:
        `~.llvm``~.`~.GlobalValue`.`~.getValueType``()

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGlobalGetValueType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMGlobalGetValueType(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr()))
    return None if _LLVMGlobalGetValueType__retval._ptr == NULL else _LLVMGlobalGetValueType__retval


@cython.embedsignature(True)
def LLVMHasUnnamedAddr(object Global):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMGetUnnamedAddress instead. */

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMHasUnnamedAddr__retval = ccore.LLVMHasUnnamedAddr(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr())
    return _LLVMHasUnnamedAddr__retval


@cython.embedsignature(True)
def LLVMSetUnnamedAddr(object Global, int HasUnnamedAddr):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMSetUnnamedAddress instead. */

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        HasUnnamedAddr (`~.int`):
            (undocumented)
    """
    ccore.LLVMSetUnnamedAddr(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr(),HasUnnamedAddr)


@cython.embedsignature(True)
def LLVMGetAlignment(object V):
    r"""(No short description, might be part of a group.)

    Obtain the preferred alignment of the value.

    See:
        `~.llvm``~.`~.AllocaInst`.`~.getAlignment``()

    See:
        `~.llvm``~.`~.LoadInst`.`~.getAlignment``()

    See:
        `~.llvm``~.`~.StoreInst`.`~.getAlignment``()

    See:
        `~.llvm``~.`~.AtomicRMWInst`.`~.setAlignment``()

    See:
        `~.llvm``~.`~.AtomicCmpXchgInst`.`~.setAlignment``()

    See:
        `~.llvm``~.`~.GlobalValue`.`~.getAlignment``()

    Args:
        V (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetAlignment__retval = ccore.LLVMGetAlignment(
        LLVMOpaqueValue.from_pyobj(V).get_element_ptr())
    return _LLVMGetAlignment__retval


@cython.embedsignature(True)
def LLVMSetAlignment(object V, unsigned int Bytes):
    r"""(No short description, might be part of a group.)

    Set the preferred alignment of the value.

    See:
        `~.llvm``~.`~.AllocaInst`.`~.setAlignment``()

    See:
        `~.llvm``~.`~.LoadInst`.`~.setAlignment``()

    See:
        `~.llvm``~.`~.StoreInst`.`~.setAlignment``()

    See:
        `~.llvm``~.`~.AtomicRMWInst`.`~.setAlignment``()

    See:
        `~.llvm``~.`~.AtomicCmpXchgInst`.`~.setAlignment``()

    See:
        `~.llvm``~.`~.GlobalValue`.`~.setAlignment``()

    Args:
        V (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Bytes (`~.int`):
            (undocumented)
    """
    ccore.LLVMSetAlignment(
        LLVMOpaqueValue.from_pyobj(V).get_element_ptr(),Bytes)


@cython.embedsignature(True)
def LLVMGlobalSetMetadata(object Global, unsigned int Kind, object MD):
    r"""(No short description, might be part of a group.)

    Sets a metadata attachment, erasing the existing metadata attachment if
    it already exists for the given kind.

    See:
        `~.llvm``~.`~.GlobalObject`.`~.setMetadata``()

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Kind (`~.int`):
            (undocumented)

        MD (`~.LLVMOpaqueMetadata`/`~.object`):
            (undocumented)
    """
    ccore.LLVMGlobalSetMetadata(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr(),Kind,
        LLVMOpaqueMetadata.from_pyobj(MD).get_element_ptr())


@cython.embedsignature(True)
def LLVMGlobalEraseMetadata(object Global, unsigned int Kind):
    r"""(No short description, might be part of a group.)

    Erases a metadata attachment of the given kind if it exists.

    See:
        `~.llvm``~.`~.GlobalObject`.`~.eraseMetadata``()

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Kind (`~.int`):
            (undocumented)
    """
    ccore.LLVMGlobalEraseMetadata(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr(),Kind)


@cython.embedsignature(True)
def LLVMGlobalClearMetadata(object Global):
    r"""(No short description, might be part of a group.)

    Removes all metadata attachments from this value.

    See:
        `~.llvm``~.`~.GlobalObject`.`~.clearMetadata``()

    Args:
        Global (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMGlobalClearMetadata(
        LLVMOpaqueValue.from_pyobj(Global).get_element_ptr())


@cython.embedsignature(True)
def LLVMGlobalCopyAllMetadata(object Value, object NumEntries):
    r"""(No short description, might be part of a group.)

    Retrieves an array of metadata entries representing the metadata attached to
    this value. The caller is responsible for freeing this array by calling
    ``LLVMDisposeValueMetadataEntries.``

    See:
        `~.llvm``~.`~.GlobalObject`.`~.getAllMetadata``()

    Args:
        Value (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        NumEntries (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _LLVMGlobalCopyAllMetadata__retval = LLVMOpaqueValueMetadataEntry.from_ptr(ccore.LLVMGlobalCopyAllMetadata(
        LLVMOpaqueValue.from_pyobj(Value).get_element_ptr(),
        <unsigned long *>rocm.llvm._util.types.Pointer.from_pyobj(NumEntries)._ptr))
    return None if _LLVMGlobalCopyAllMetadata__retval._ptr == NULL else _LLVMGlobalCopyAllMetadata__retval


@cython.embedsignature(True)
def LLVMDisposeValueMetadataEntries(object Entries):
    r"""(No short description, might be part of a group.)

    Destroys value metadata entries.

    Args:
        Entries (`~.LLVMOpaqueValueMetadataEntry`/`~.object`):
            (undocumented)
    """
    ccore.LLVMDisposeValueMetadataEntries(
        LLVMOpaqueValueMetadataEntry.from_pyobj(Entries).get_element_ptr())


@cython.embedsignature(True)
def LLVMValueMetadataEntriesGetKind(object Entries, unsigned int Index):
    r"""(No short description, might be part of a group.)

    Returns the kind of a value metadata entry at a specific index.

    Args:
        Entries (`~.LLVMOpaqueValueMetadataEntry`/`~.object`):
            (undocumented)

        Index (`~.int`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMValueMetadataEntriesGetKind__retval = ccore.LLVMValueMetadataEntriesGetKind(
        LLVMOpaqueValueMetadataEntry.from_pyobj(Entries).get_element_ptr(),Index)
    return _LLVMValueMetadataEntriesGetKind__retval


@cython.embedsignature(True)
def LLVMValueMetadataEntriesGetMetadata(object Entries, unsigned int Index):
    r"""(No short description, might be part of a group.)

    Returns the underlying metadata node of a value metadata entry at a
    specific index.

    Args:
        Entries (`~.LLVMOpaqueValueMetadataEntry`/`~.object`):
            (undocumented)

        Index (`~.int`):
            (undocumented)
    """
    _LLVMValueMetadataEntriesGetMetadata__retval = LLVMOpaqueMetadata.from_ptr(ccore.LLVMValueMetadataEntriesGetMetadata(
        LLVMOpaqueValueMetadataEntry.from_pyobj(Entries).get_element_ptr(),Index))
    return None if _LLVMValueMetadataEntriesGetMetadata__retval._ptr == NULL else _LLVMValueMetadataEntriesGetMetadata__retval


@cython.embedsignature(True)
def LLVMAddGlobal(object M, object Ty, object Name):
    r"""(No short description, might be part of a group.)

    This group contains functions that operate on global variable values.

    See:
        `~.llvm``~.`~.GlobalVariable``

    @{

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMAddGlobal__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMAddGlobal(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMAddGlobal__retval._ptr == NULL else _LLVMAddGlobal__retval


@cython.embedsignature(True)
def LLVMAddGlobalInAddressSpace(object M, object Ty, object Name, unsigned int AddressSpace):
    r"""(No short description, might be part of a group.)

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        AddressSpace (`~.int`):
            (undocumented)
    """
    _LLVMAddGlobalInAddressSpace__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMAddGlobalInAddressSpace(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr,AddressSpace))
    return None if _LLVMAddGlobalInAddressSpace__retval._ptr == NULL else _LLVMAddGlobalInAddressSpace__retval


@cython.embedsignature(True)
def LLVMGetNamedGlobal(object M, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMGetNamedGlobal__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetNamedGlobal(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMGetNamedGlobal__retval._ptr == NULL else _LLVMGetNamedGlobal__retval


@cython.embedsignature(True)
def LLVMGetFirstGlobal(object M):
    r"""(No short description, might be part of a group.)

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)
    """
    _LLVMGetFirstGlobal__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetFirstGlobal(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMGetFirstGlobal__retval._ptr == NULL else _LLVMGetFirstGlobal__retval


@cython.embedsignature(True)
def LLVMGetLastGlobal(object M):
    r"""(No short description, might be part of a group.)

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)
    """
    _LLVMGetLastGlobal__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetLastGlobal(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMGetLastGlobal__retval._ptr == NULL else _LLVMGetLastGlobal__retval


@cython.embedsignature(True)
def LLVMGetNextGlobal(object GlobalVar):
    r"""(No short description, might be part of a group.)

    Args:
        GlobalVar (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetNextGlobal__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetNextGlobal(
        LLVMOpaqueValue.from_pyobj(GlobalVar).get_element_ptr()))
    return None if _LLVMGetNextGlobal__retval._ptr == NULL else _LLVMGetNextGlobal__retval


@cython.embedsignature(True)
def LLVMGetPreviousGlobal(object GlobalVar):
    r"""(No short description, might be part of a group.)

    Args:
        GlobalVar (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetPreviousGlobal__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetPreviousGlobal(
        LLVMOpaqueValue.from_pyobj(GlobalVar).get_element_ptr()))
    return None if _LLVMGetPreviousGlobal__retval._ptr == NULL else _LLVMGetPreviousGlobal__retval


@cython.embedsignature(True)
def LLVMDeleteGlobal(object GlobalVar):
    r"""(No short description, might be part of a group.)

    Args:
        GlobalVar (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMDeleteGlobal(
        LLVMOpaqueValue.from_pyobj(GlobalVar).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetInitializer(object GlobalVar):
    r"""(No short description, might be part of a group.)

    Args:
        GlobalVar (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetInitializer__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetInitializer(
        LLVMOpaqueValue.from_pyobj(GlobalVar).get_element_ptr()))
    return None if _LLVMGetInitializer__retval._ptr == NULL else _LLVMGetInitializer__retval


@cython.embedsignature(True)
def LLVMSetInitializer(object GlobalVar, object ConstantVal):
    r"""(No short description, might be part of a group.)

    Args:
        GlobalVar (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ConstantVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetInitializer(
        LLVMOpaqueValue.from_pyobj(GlobalVar).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(ConstantVal).get_element_ptr())


@cython.embedsignature(True)
def LLVMIsThreadLocal(object GlobalVar):
    r"""(No short description, might be part of a group.)

    Args:
        GlobalVar (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsThreadLocal__retval = ccore.LLVMIsThreadLocal(
        LLVMOpaqueValue.from_pyobj(GlobalVar).get_element_ptr())
    return _LLVMIsThreadLocal__retval


@cython.embedsignature(True)
def LLVMSetThreadLocal(object GlobalVar, int IsThreadLocal):
    r"""(No short description, might be part of a group.)

    Args:
        GlobalVar (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        IsThreadLocal (`~.int`):
            (undocumented)
    """
    ccore.LLVMSetThreadLocal(
        LLVMOpaqueValue.from_pyobj(GlobalVar).get_element_ptr(),IsThreadLocal)


@cython.embedsignature(True)
def LLVMIsGlobalConstant(object GlobalVar):
    r"""(No short description, might be part of a group.)

    Args:
        GlobalVar (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsGlobalConstant__retval = ccore.LLVMIsGlobalConstant(
        LLVMOpaqueValue.from_pyobj(GlobalVar).get_element_ptr())
    return _LLVMIsGlobalConstant__retval


@cython.embedsignature(True)
def LLVMSetGlobalConstant(object GlobalVar, int IsConstant):
    r"""(No short description, might be part of a group.)

    Args:
        GlobalVar (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        IsConstant (`~.int`):
            (undocumented)
    """
    ccore.LLVMSetGlobalConstant(
        LLVMOpaqueValue.from_pyobj(GlobalVar).get_element_ptr(),IsConstant)


@cython.embedsignature(True)
def LLVMGetThreadLocalMode(object GlobalVar):
    r"""(No short description, might be part of a group.)

    Args:
        GlobalVar (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.LLVMThreadLocalMode`
    """
    _LLVMGetThreadLocalMode__retval = LLVMThreadLocalMode(ccore.LLVMGetThreadLocalMode(
        LLVMOpaqueValue.from_pyobj(GlobalVar).get_element_ptr()))
    return _LLVMGetThreadLocalMode__retval


@cython.embedsignature(True)
def LLVMSetThreadLocalMode(object GlobalVar, object Mode):
    r"""(No short description, might be part of a group.)

    Args:
        GlobalVar (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Mode (`~.LLVMThreadLocalMode`):
            (undocumented)
    """
    if not isinstance(Mode,_LLVMThreadLocalMode__Base):
        raise TypeError("argument 'Mode' must be of type '_LLVMThreadLocalMode__Base'")
    ccore.LLVMSetThreadLocalMode(
        LLVMOpaqueValue.from_pyobj(GlobalVar).get_element_ptr(),Mode.value)


@cython.embedsignature(True)
def LLVMIsExternallyInitialized(object GlobalVar):
    r"""(No short description, might be part of a group.)

    Args:
        GlobalVar (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsExternallyInitialized__retval = ccore.LLVMIsExternallyInitialized(
        LLVMOpaqueValue.from_pyobj(GlobalVar).get_element_ptr())
    return _LLVMIsExternallyInitialized__retval


@cython.embedsignature(True)
def LLVMSetExternallyInitialized(object GlobalVar, int IsExtInit):
    r"""(No short description, might be part of a group.)

    Args:
        GlobalVar (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        IsExtInit (`~.int`):
            (undocumented)
    """
    ccore.LLVMSetExternallyInitialized(
        LLVMOpaqueValue.from_pyobj(GlobalVar).get_element_ptr(),IsExtInit)


@cython.embedsignature(True)
def LLVMAddAlias2(object M, object ValueTy, unsigned int AddrSpace, object Aliasee, object Name):
    r"""(No short description, might be part of a group.)

    Add a GlobalAlias with the given value type, address space and aliasee.

    See:
        `~.llvm``~.`~.GlobalAlias`.`~.create``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        ValueTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        AddrSpace (`~.int`):
            (undocumented)

        Aliasee (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMAddAlias2__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMAddAlias2(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ValueTy).get_element_ptr(),AddrSpace,
        LLVMOpaqueValue.from_pyobj(Aliasee).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMAddAlias2__retval._ptr == NULL else _LLVMAddAlias2__retval


@cython.embedsignature(True)
def LLVMGetNamedGlobalAlias(object M, object Name, unsigned long NameLen):
    r"""(No short description, might be part of a group.)

    Obtain a GlobalAlias value from a Module by its name.

    The returned value corresponds to a llvm`~.GlobalAlias` value.

    See:
        `~.llvm``~.`~.Module`.`~.getNamedAlias``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        NameLen (`~.int`):
            (undocumented)
    """
    _LLVMGetNamedGlobalAlias__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetNamedGlobalAlias(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr,NameLen))
    return None if _LLVMGetNamedGlobalAlias__retval._ptr == NULL else _LLVMGetNamedGlobalAlias__retval


@cython.embedsignature(True)
def LLVMGetFirstGlobalAlias(object M):
    r"""(No short description, might be part of a group.)

    Obtain an iterator to the first GlobalAlias in a Module.

    See:
        `~.llvm``~.`~.Module`.`~.alias_begin``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)
    """
    _LLVMGetFirstGlobalAlias__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetFirstGlobalAlias(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMGetFirstGlobalAlias__retval._ptr == NULL else _LLVMGetFirstGlobalAlias__retval


@cython.embedsignature(True)
def LLVMGetLastGlobalAlias(object M):
    r"""(No short description, might be part of a group.)

    Obtain an iterator to the last GlobalAlias in a Module.

    See:
        `~.llvm``~.`~.Module`.`~.alias_end``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)
    """
    _LLVMGetLastGlobalAlias__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetLastGlobalAlias(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMGetLastGlobalAlias__retval._ptr == NULL else _LLVMGetLastGlobalAlias__retval


@cython.embedsignature(True)
def LLVMGetNextGlobalAlias(object GA):
    r"""(No short description, might be part of a group.)

    Advance a GlobalAlias iterator to the next GlobalAlias.

    Returns NULL if the iterator was already at the end and there are no more
    global aliases.

    Args:
        GA (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetNextGlobalAlias__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetNextGlobalAlias(
        LLVMOpaqueValue.from_pyobj(GA).get_element_ptr()))
    return None if _LLVMGetNextGlobalAlias__retval._ptr == NULL else _LLVMGetNextGlobalAlias__retval


@cython.embedsignature(True)
def LLVMGetPreviousGlobalAlias(object GA):
    r"""(No short description, might be part of a group.)

    Decrement a GlobalAlias iterator to the previous GlobalAlias.

    Returns NULL if the iterator was already at the beginning and there are
    no previous global aliases.

    Args:
        GA (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetPreviousGlobalAlias__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetPreviousGlobalAlias(
        LLVMOpaqueValue.from_pyobj(GA).get_element_ptr()))
    return None if _LLVMGetPreviousGlobalAlias__retval._ptr == NULL else _LLVMGetPreviousGlobalAlias__retval


@cython.embedsignature(True)
def LLVMAliasGetAliasee(object Alias):
    r"""(No short description, might be part of a group.)

    Retrieve the target value of an alias.

    Args:
        Alias (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMAliasGetAliasee__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMAliasGetAliasee(
        LLVMOpaqueValue.from_pyobj(Alias).get_element_ptr()))
    return None if _LLVMAliasGetAliasee__retval._ptr == NULL else _LLVMAliasGetAliasee__retval


@cython.embedsignature(True)
def LLVMAliasSetAliasee(object Alias, object Aliasee):
    r"""(No short description, might be part of a group.)

    Set the target value of an alias.

    Args:
        Alias (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Aliasee (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMAliasSetAliasee(
        LLVMOpaqueValue.from_pyobj(Alias).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Aliasee).get_element_ptr())


@cython.embedsignature(True)
def LLVMDeleteFunction(object Fn):
    r"""(No short description, might be part of a group.)

    Remove a function from its containing module and deletes it.

    See:
        `~.llvm``~.`~.Function`.`~.eraseFromParent``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMDeleteFunction(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr())


@cython.embedsignature(True)
def LLVMHasPersonalityFn(object Fn):
    r"""(No short description, might be part of a group.)

    Check whether the given function has a personality function.

    See:
        `~.llvm``~.`~.Function`.`~.hasPersonalityFn``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMHasPersonalityFn__retval = ccore.LLVMHasPersonalityFn(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr())
    return _LLVMHasPersonalityFn__retval


@cython.embedsignature(True)
def LLVMGetPersonalityFn(object Fn):
    r"""(No short description, might be part of a group.)

    Obtain the personality function attached to the function.

    See:
        `~.llvm``~.`~.Function`.`~.getPersonalityFn``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetPersonalityFn__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetPersonalityFn(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr()))
    return None if _LLVMGetPersonalityFn__retval._ptr == NULL else _LLVMGetPersonalityFn__retval


@cython.embedsignature(True)
def LLVMSetPersonalityFn(object Fn, object PersonalityFn):
    r"""(No short description, might be part of a group.)

    Set the personality function attached to the function.

    See:
        `~.llvm``~.`~.Function`.`~.setPersonalityFn``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        PersonalityFn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetPersonalityFn(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(PersonalityFn).get_element_ptr())


@cython.embedsignature(True)
def LLVMLookupIntrinsicID(object Name, unsigned long NameLen):
    r"""(No short description, might be part of a group.)

    Obtain the intrinsic ID number which matches the given function name.

    See:
        `~.llvm``~.`~.Function`.`~.lookupIntrinsicID``()

    Args:
        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        NameLen (`~.int`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMLookupIntrinsicID__retval = ccore.LLVMLookupIntrinsicID(
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr,NameLen)
    return _LLVMLookupIntrinsicID__retval


@cython.embedsignature(True)
def LLVMGetIntrinsicID(object Fn):
    r"""(No short description, might be part of a group.)

    Obtain the ID number from a function instance.

    See:
        `~.llvm``~.`~.Function`.`~.getIntrinsicID``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetIntrinsicID__retval = ccore.LLVMGetIntrinsicID(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr())
    return _LLVMGetIntrinsicID__retval


@cython.embedsignature(True)
def LLVMGetIntrinsicDeclaration(object Mod, unsigned int ID, object ParamTypes, unsigned long ParamCount):
    r"""(No short description, might be part of a group.)

    Create or insert the declaration of an intrinsic.  For overloaded intrinsics,
    parameter types must be provided to uniquely identify an overload.

    See:
        `~.llvm``~.`~.Intrinsic`.`~.getDeclaration``()

    Args:
        Mod (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        ID (`~.int`):
            (undocumented)

        ParamTypes (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        ParamCount (`~.int`):
            (undocumented)
    """
    _LLVMGetIntrinsicDeclaration__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetIntrinsicDeclaration(
        LLVMOpaqueModule.from_pyobj(Mod).get_element_ptr(),ID,
        <ccore.LLVMTypeRef*>rocm.llvm._util.types.Pointer.from_pyobj(ParamTypes)._ptr,ParamCount))
    return None if _LLVMGetIntrinsicDeclaration__retval._ptr == NULL else _LLVMGetIntrinsicDeclaration__retval


@cython.embedsignature(True)
def LLVMIntrinsicGetType(object Ctx, unsigned int ID, object ParamTypes, unsigned long ParamCount):
    r"""(No short description, might be part of a group.)

    Retrieves the type of an intrinsic.  For overloaded intrinsics, parameter
    types must be provided to uniquely identify an overload.

    See:
        `~.llvm``~.`~.Intrinsic`.`~.getType``()

    Args:
        Ctx (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        ID (`~.int`):
            (undocumented)

        ParamTypes (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        ParamCount (`~.int`):
            (undocumented)
    """
    _LLVMIntrinsicGetType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMIntrinsicGetType(
        LLVMOpaqueContext.from_pyobj(Ctx).get_element_ptr(),ID,
        <ccore.LLVMTypeRef*>rocm.llvm._util.types.Pointer.from_pyobj(ParamTypes)._ptr,ParamCount))
    return None if _LLVMIntrinsicGetType__retval._ptr == NULL else _LLVMIntrinsicGetType__retval


@cython.embedsignature(True)
def LLVMIntrinsicGetName(unsigned int ID, object NameLength):
    r"""(No short description, might be part of a group.)

    Retrieves the name of an intrinsic.

    See:
        `~.llvm``~.`~.Intrinsic`.`~.getName``()

    Args:
        ID (`~.int`):
            (undocumented)

        NameLength (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMIntrinsicGetName__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMIntrinsicGetName(ID,
        <unsigned long *>rocm.llvm._util.types.Pointer.from_pyobj(NameLength)._ptr))
    return None if _LLVMIntrinsicGetName__retval._ptr == NULL else _LLVMIntrinsicGetName__retval


@cython.embedsignature(True)
def LLVMIntrinsicCopyOverloadedName(unsigned int ID, object ParamTypes, unsigned long ParamCount, object NameLength):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMIntrinsicCopyOverloadedName2 instead. */

    Args:
        ID (`~.int`):
            (undocumented)

        ParamTypes (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        ParamCount (`~.int`):
            (undocumented)

        NameLength (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMIntrinsicCopyOverloadedName__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMIntrinsicCopyOverloadedName(ID,
        <ccore.LLVMTypeRef*>rocm.llvm._util.types.Pointer.from_pyobj(ParamTypes)._ptr,ParamCount,
        <unsigned long *>rocm.llvm._util.types.Pointer.from_pyobj(NameLength)._ptr))
    return None if _LLVMIntrinsicCopyOverloadedName__retval._ptr == NULL else _LLVMIntrinsicCopyOverloadedName__retval


@cython.embedsignature(True)
def LLVMIntrinsicCopyOverloadedName2(object Mod, unsigned int ID, object ParamTypes, unsigned long ParamCount, object NameLength):
    r"""(No short description, might be part of a group.)

    Copies the name of an overloaded intrinsic identified by a given list of
    parameter types.

    Unlike LLVMIntrinsicGetName, the caller is responsible for freeing the
    returned string.

    This version also supports unnamed types.

    See:
        `~.llvm``~.`~.Intrinsic`.`~.getName``()

    Args:
        Mod (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        ID (`~.int`):
            (undocumented)

        ParamTypes (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        ParamCount (`~.int`):
            (undocumented)

        NameLength (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMIntrinsicCopyOverloadedName2__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMIntrinsicCopyOverloadedName2(
        LLVMOpaqueModule.from_pyobj(Mod).get_element_ptr(),ID,
        <ccore.LLVMTypeRef*>rocm.llvm._util.types.Pointer.from_pyobj(ParamTypes)._ptr,ParamCount,
        <unsigned long *>rocm.llvm._util.types.Pointer.from_pyobj(NameLength)._ptr))
    return None if _LLVMIntrinsicCopyOverloadedName2__retval._ptr == NULL else _LLVMIntrinsicCopyOverloadedName2__retval


@cython.embedsignature(True)
def LLVMIntrinsicIsOverloaded(unsigned int ID):
    r"""(No short description, might be part of a group.)

    Obtain if the intrinsic identified by the given ID is overloaded.

    See:
        `~.llvm``~.`~.Intrinsic`.`~.isOverloaded``()

    Args:
        ID (`~.int`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIntrinsicIsOverloaded__retval = ccore.LLVMIntrinsicIsOverloaded(ID)
    return _LLVMIntrinsicIsOverloaded__retval


@cython.embedsignature(True)
def LLVMGetFunctionCallConv(object Fn):
    r"""(No short description, might be part of a group.)

    Obtain the calling function of a function.

    The returned value corresponds to the LLVMCallConv enumeration.

    See:
        `~.llvm``~.`~.Function`.`~.getCallingConv``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetFunctionCallConv__retval = ccore.LLVMGetFunctionCallConv(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr())
    return _LLVMGetFunctionCallConv__retval


@cython.embedsignature(True)
def LLVMSetFunctionCallConv(object Fn, unsigned int CC):
    r"""(No short description, might be part of a group.)

    Set the calling convention of a function.

    See:
        `~.llvm``~.`~.Function`.`~.setCallingConv``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            Function to operate on

        CC (`~.int`):
            LLVMCallConv to set calling convention to
    """
    ccore.LLVMSetFunctionCallConv(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr(),CC)


@cython.embedsignature(True)
def LLVMGetGC(object Fn):
    r"""(No short description, might be part of a group.)

    Obtain the name of the garbage collector to use during code
    generation.

    See:
        `~.llvm``~.`~.Function`.`~.getGC``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMGetGC__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetGC(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr()))
    return None if _LLVMGetGC__retval._ptr == NULL else _LLVMGetGC__retval


@cython.embedsignature(True)
def LLVMSetGC(object Fn, object Name):
    r"""(No short description, might be part of a group.)

    Define the garbage collector to use during code generation.

    See:
        `~.llvm``~.`~.Function`.`~.setGC``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetGC(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr)


@cython.embedsignature(True)
def LLVMAddAttributeAtIndex(object F, unsigned int Idx, object A):
    r"""(No short description, might be part of a group.)

    Add an attribute to a function.

    See:
        `~.llvm``~.`~.Function`.`~.addAttribute``()

    Args:
        F (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)

        A (`~.LLVMOpaqueAttributeRef`/`~.object`):
            (undocumented)
    """
    ccore.LLVMAddAttributeAtIndex(
        LLVMOpaqueValue.from_pyobj(F).get_element_ptr(),Idx,
        LLVMOpaqueAttributeRef.from_pyobj(A).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetAttributeCountAtIndex(object F, unsigned int Idx):
    r"""(No short description, might be part of a group.)

    Args:
        F (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetAttributeCountAtIndex__retval = ccore.LLVMGetAttributeCountAtIndex(
        LLVMOpaqueValue.from_pyobj(F).get_element_ptr(),Idx)
    return _LLVMGetAttributeCountAtIndex__retval


@cython.embedsignature(True)
def LLVMGetAttributesAtIndex(object F, unsigned int Idx, object Attrs):
    r"""(No short description, might be part of a group.)

    Args:
        F (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)

        Attrs (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    ccore.LLVMGetAttributesAtIndex(
        LLVMOpaqueValue.from_pyobj(F).get_element_ptr(),Idx,
        <ccore.LLVMAttributeRef*>rocm.llvm._util.types.Pointer.from_pyobj(Attrs)._ptr)


@cython.embedsignature(True)
def LLVMGetEnumAttributeAtIndex(object F, unsigned int Idx, unsigned int KindID):
    r"""(No short description, might be part of a group.)

    Args:
        F (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)

        KindID (`~.int`):
            (undocumented)
    """
    _LLVMGetEnumAttributeAtIndex__retval = LLVMOpaqueAttributeRef.from_ptr(ccore.LLVMGetEnumAttributeAtIndex(
        LLVMOpaqueValue.from_pyobj(F).get_element_ptr(),Idx,KindID))
    return None if _LLVMGetEnumAttributeAtIndex__retval._ptr == NULL else _LLVMGetEnumAttributeAtIndex__retval


@cython.embedsignature(True)
def LLVMGetStringAttributeAtIndex(object F, unsigned int Idx, object K, unsigned int KLen):
    r"""(No short description, might be part of a group.)

    Args:
        F (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)

        K (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        KLen (`~.int`):
            (undocumented)
    """
    _LLVMGetStringAttributeAtIndex__retval = LLVMOpaqueAttributeRef.from_ptr(ccore.LLVMGetStringAttributeAtIndex(
        LLVMOpaqueValue.from_pyobj(F).get_element_ptr(),Idx,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(K)._ptr,KLen))
    return None if _LLVMGetStringAttributeAtIndex__retval._ptr == NULL else _LLVMGetStringAttributeAtIndex__retval


@cython.embedsignature(True)
def LLVMRemoveEnumAttributeAtIndex(object F, unsigned int Idx, unsigned int KindID):
    r"""(No short description, might be part of a group.)

    Args:
        F (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)

        KindID (`~.int`):
            (undocumented)
    """
    ccore.LLVMRemoveEnumAttributeAtIndex(
        LLVMOpaqueValue.from_pyobj(F).get_element_ptr(),Idx,KindID)


@cython.embedsignature(True)
def LLVMRemoveStringAttributeAtIndex(object F, unsigned int Idx, object K, unsigned int KLen):
    r"""(No short description, might be part of a group.)

    Args:
        F (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)

        K (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        KLen (`~.int`):
            (undocumented)
    """
    ccore.LLVMRemoveStringAttributeAtIndex(
        LLVMOpaqueValue.from_pyobj(F).get_element_ptr(),Idx,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(K)._ptr,KLen)


@cython.embedsignature(True)
def LLVMAddTargetDependentFunctionAttr(object Fn, object A, object V):
    r"""(No short description, might be part of a group.)

    Add a target-dependent attribute to a function

    See:
        `~.llvm``~.`~.AttrBuilder`.`~.addAttribute``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        A (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        V (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    ccore.LLVMAddTargetDependentFunctionAttr(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(A)._ptr,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(V)._ptr)


@cython.embedsignature(True)
def LLVMCountParams(object Fn):
    r"""(No short description, might be part of a group.)

    Obtain the number of parameters in a function.

    See:
        `~.llvm``~.`~.Function`.`~.arg_size``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMCountParams__retval = ccore.LLVMCountParams(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr())
    return _LLVMCountParams__retval


@cython.embedsignature(True)
def LLVMGetParams(object Fn, object Params):
    r"""(No short description, might be part of a group.)

    Obtain the parameters in a function.

    The takes a pointer to a pre-allocated array of LLVMValueRef that is
    at least LLVMCountParams() long. This array will be filled with
    LLVMValueRef instances which correspond to the parameters the
    function receives. Each LLVMValueRef corresponds to a llvm`~.Argument`
    instance.

    See:
        `~.llvm``~.`~.Function`.`~.arg_begin``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Params (`~.rocm.llvm._util.types.ListOfPointer`/`~.object`):
            (undocumented)
    """
    ccore.LLVMGetParams(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr(),
        <ccore.LLVMValueRef*>rocm.llvm._util.types.ListOfPointer.from_pyobj(Params)._ptr)


@cython.embedsignature(True)
def LLVMGetParam(object Fn, unsigned int Index):
    r"""(No short description, might be part of a group.)

    Obtain the parameter at the specified index.

    Parameters are indexed from 0.

    See:
        `~.llvm``~.`~.Function`.`~.arg_begin``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Index (`~.int`):
            (undocumented)
    """
    _LLVMGetParam__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetParam(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr(),Index))
    return None if _LLVMGetParam__retval._ptr == NULL else _LLVMGetParam__retval


@cython.embedsignature(True)
def LLVMGetParamParent(object Inst):
    r"""(No short description, might be part of a group.)

    Obtain the function to which this argument belongs.

    Unlike other functions in this group, this one takes an LLVMValueRef
    that corresponds to a llvm`~.Attribute`.

    The returned LLVMValueRef is the llvm`~.Function` to which this
    argument belongs.

    Args:
        Inst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetParamParent__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetParamParent(
        LLVMOpaqueValue.from_pyobj(Inst).get_element_ptr()))
    return None if _LLVMGetParamParent__retval._ptr == NULL else _LLVMGetParamParent__retval


@cython.embedsignature(True)
def LLVMGetFirstParam(object Fn):
    r"""(No short description, might be part of a group.)

    Obtain the first parameter to a function.

    See:
        `~.llvm``~.`~.Function`.`~.arg_begin``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetFirstParam__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetFirstParam(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr()))
    return None if _LLVMGetFirstParam__retval._ptr == NULL else _LLVMGetFirstParam__retval


@cython.embedsignature(True)
def LLVMGetLastParam(object Fn):
    r"""(No short description, might be part of a group.)

    Obtain the last parameter to a function.

    See:
        `~.llvm``~.`~.Function`.`~.arg_end``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetLastParam__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetLastParam(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr()))
    return None if _LLVMGetLastParam__retval._ptr == NULL else _LLVMGetLastParam__retval


@cython.embedsignature(True)
def LLVMGetNextParam(object Arg):
    r"""(No short description, might be part of a group.)

    Obtain the next parameter to a function.

    This takes an LLVMValueRef obtained from LLVMGetFirstParam() (which is
    actually a wrapped iterator) and obtains the next parameter from the
    underlying iterator.

    Args:
        Arg (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetNextParam__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetNextParam(
        LLVMOpaqueValue.from_pyobj(Arg).get_element_ptr()))
    return None if _LLVMGetNextParam__retval._ptr == NULL else _LLVMGetNextParam__retval


@cython.embedsignature(True)
def LLVMGetPreviousParam(object Arg):
    r"""(No short description, might be part of a group.)

    Obtain the previous parameter to a function.

    This is the opposite of LLVMGetNextParam().

    Args:
        Arg (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetPreviousParam__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetPreviousParam(
        LLVMOpaqueValue.from_pyobj(Arg).get_element_ptr()))
    return None if _LLVMGetPreviousParam__retval._ptr == NULL else _LLVMGetPreviousParam__retval


@cython.embedsignature(True)
def LLVMSetParamAlignment(object Arg, unsigned int Align):
    r"""(No short description, might be part of a group.)

    Set the alignment for a function parameter.

    See:
        `~.llvm``~.`~.Argument`.`~.addAttr``()

    See:
        `~.llvm``~.`~.AttrBuilder`.`~.addAlignmentAttr``()

    Args:
        Arg (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Align (`~.int`):
            (undocumented)
    """
    ccore.LLVMSetParamAlignment(
        LLVMOpaqueValue.from_pyobj(Arg).get_element_ptr(),Align)


@cython.embedsignature(True)
def LLVMAddGlobalIFunc(object M, object Name, unsigned long NameLen, object Ty, unsigned int AddrSpace, object Resolver):
    r"""(No short description, might be part of a group.)

    Add a global indirect function to a module under a specified name.

    See:
        `~.llvm``~.`~.GlobalIFunc`.`~.create``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        NameLen (`~.int`):
            (undocumented)

        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        AddrSpace (`~.int`):
            (undocumented)

        Resolver (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMAddGlobalIFunc__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMAddGlobalIFunc(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr,NameLen,
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),AddrSpace,
        LLVMOpaqueValue.from_pyobj(Resolver).get_element_ptr()))
    return None if _LLVMAddGlobalIFunc__retval._ptr == NULL else _LLVMAddGlobalIFunc__retval


@cython.embedsignature(True)
def LLVMGetNamedGlobalIFunc(object M, object Name, unsigned long NameLen):
    r"""(No short description, might be part of a group.)

    Obtain a GlobalIFunc value from a Module by its name.

    The returned value corresponds to a llvm`~.GlobalIFunc` value.

    See:
        `~.llvm``~.`~.Module`.`~.getNamedIFunc``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        NameLen (`~.int`):
            (undocumented)
    """
    _LLVMGetNamedGlobalIFunc__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetNamedGlobalIFunc(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr,NameLen))
    return None if _LLVMGetNamedGlobalIFunc__retval._ptr == NULL else _LLVMGetNamedGlobalIFunc__retval


@cython.embedsignature(True)
def LLVMGetFirstGlobalIFunc(object M):
    r"""(No short description, might be part of a group.)

    Obtain an iterator to the first GlobalIFunc in a Module.

    See:
        `~.llvm``~.`~.Module`.`~.ifunc_begin``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)
    """
    _LLVMGetFirstGlobalIFunc__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetFirstGlobalIFunc(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMGetFirstGlobalIFunc__retval._ptr == NULL else _LLVMGetFirstGlobalIFunc__retval


@cython.embedsignature(True)
def LLVMGetLastGlobalIFunc(object M):
    r"""(No short description, might be part of a group.)

    Obtain an iterator to the last GlobalIFunc in a Module.

    See:
        `~.llvm``~.`~.Module`.`~.ifunc_end``()

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)
    """
    _LLVMGetLastGlobalIFunc__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetLastGlobalIFunc(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMGetLastGlobalIFunc__retval._ptr == NULL else _LLVMGetLastGlobalIFunc__retval


@cython.embedsignature(True)
def LLVMGetNextGlobalIFunc(object IFunc):
    r"""(No short description, might be part of a group.)

    Advance a GlobalIFunc iterator to the next GlobalIFunc.

    Returns NULL if the iterator was already at the end and there are no more
    global aliases.

    Args:
        IFunc (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetNextGlobalIFunc__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetNextGlobalIFunc(
        LLVMOpaqueValue.from_pyobj(IFunc).get_element_ptr()))
    return None if _LLVMGetNextGlobalIFunc__retval._ptr == NULL else _LLVMGetNextGlobalIFunc__retval


@cython.embedsignature(True)
def LLVMGetPreviousGlobalIFunc(object IFunc):
    r"""(No short description, might be part of a group.)

    Decrement a GlobalIFunc iterator to the previous GlobalIFunc.

    Returns NULL if the iterator was already at the beginning and there are
    no previous global aliases.

    Args:
        IFunc (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetPreviousGlobalIFunc__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetPreviousGlobalIFunc(
        LLVMOpaqueValue.from_pyobj(IFunc).get_element_ptr()))
    return None if _LLVMGetPreviousGlobalIFunc__retval._ptr == NULL else _LLVMGetPreviousGlobalIFunc__retval


@cython.embedsignature(True)
def LLVMGetGlobalIFuncResolver(object IFunc):
    r"""(No short description, might be part of a group.)

    Retrieves the resolver function associated with this indirect function, or
    NULL if it doesn't not exist.

    See:
        `~.llvm``~.`~.GlobalIFunc`.`~.getResolver``()

    Args:
        IFunc (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetGlobalIFuncResolver__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetGlobalIFuncResolver(
        LLVMOpaqueValue.from_pyobj(IFunc).get_element_ptr()))
    return None if _LLVMGetGlobalIFuncResolver__retval._ptr == NULL else _LLVMGetGlobalIFuncResolver__retval


@cython.embedsignature(True)
def LLVMSetGlobalIFuncResolver(object IFunc, object Resolver):
    r"""(No short description, might be part of a group.)

    Sets the resolver function associated with this indirect function.

    See:
        `~.llvm``~.`~.GlobalIFunc`.`~.setResolver``()

    Args:
        IFunc (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Resolver (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetGlobalIFuncResolver(
        LLVMOpaqueValue.from_pyobj(IFunc).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Resolver).get_element_ptr())


@cython.embedsignature(True)
def LLVMEraseGlobalIFunc(object IFunc):
    r"""(No short description, might be part of a group.)

    Remove a global indirect function from its parent module and delete it.

    See:
        `~.llvm``~.`~.GlobalIFunc`.`~.eraseFromParent``()

    Args:
        IFunc (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMEraseGlobalIFunc(
        LLVMOpaqueValue.from_pyobj(IFunc).get_element_ptr())


@cython.embedsignature(True)
def LLVMRemoveGlobalIFunc(object IFunc):
    r"""(No short description, might be part of a group.)

    Remove a global indirect function from its parent module.

    This unlinks the global indirect function from its containing module but
    keeps it alive.

    See:
        `~.llvm``~.`~.GlobalIFunc`.`~.removeFromParent``()

    Args:
        IFunc (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMRemoveGlobalIFunc(
        LLVMOpaqueValue.from_pyobj(IFunc).get_element_ptr())


@cython.embedsignature(True)
def LLVMMDStringInContext2(object C, object Str, unsigned long SLen):
    r"""(No short description, might be part of a group.)

    Create an MDString value from a given string value.

    The MDString value does not take ownership of the given string, it remains
    the responsibility of the caller to free it.

    See:
        `~.llvm``~.`~.MDString`.`~.get``()

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        Str (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        SLen (`~.int`):
            (undocumented)
    """
    _LLVMMDStringInContext2__retval = LLVMOpaqueMetadata.from_ptr(ccore.LLVMMDStringInContext2(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Str)._ptr,SLen))
    return None if _LLVMMDStringInContext2__retval._ptr == NULL else _LLVMMDStringInContext2__retval


@cython.embedsignature(True)
def LLVMMDNodeInContext2(object C, object MDs, unsigned long Count):
    r"""(No short description, might be part of a group.)

    Create an MDNode value with the given array of operands.

    See:
        `~.llvm``~.`~.MDNode`.`~.get``()

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        MDs (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        Count (`~.int`):
            (undocumented)
    """
    _LLVMMDNodeInContext2__retval = LLVMOpaqueMetadata.from_ptr(ccore.LLVMMDNodeInContext2(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        <ccore.LLVMMetadataRef*>rocm.llvm._util.types.Pointer.from_pyobj(MDs)._ptr,Count))
    return None if _LLVMMDNodeInContext2__retval._ptr == NULL else _LLVMMDNodeInContext2__retval


@cython.embedsignature(True)
def LLVMMetadataAsValue(object C, object MD):
    r"""(No short description, might be part of a group.)

    Obtain a Metadata as a Value.

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        MD (`~.LLVMOpaqueMetadata`/`~.object`):
            (undocumented)
    """
    _LLVMMetadataAsValue__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMMetadataAsValue(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        LLVMOpaqueMetadata.from_pyobj(MD).get_element_ptr()))
    return None if _LLVMMetadataAsValue__retval._ptr == NULL else _LLVMMetadataAsValue__retval


@cython.embedsignature(True)
def LLVMValueAsMetadata(object Val):
    r"""(No short description, might be part of a group.)

    Obtain a Value as a Metadata.

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMValueAsMetadata__retval = LLVMOpaqueMetadata.from_ptr(ccore.LLVMValueAsMetadata(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMValueAsMetadata__retval._ptr == NULL else _LLVMValueAsMetadata__retval


@cython.embedsignature(True)
def LLVMGetMDString(object V, object Length):
    r"""(No short description, might be part of a group.)

    Obtain the underlying string from a MDString value.

    Args:
        V (`~.LLVMOpaqueValue`/`~.object`):
            Instance to obtain string from.

        Length (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            Memory address which will hold length of returned string.

    Returns:
        `~.bytes`: String data in MDString.
    """
    _LLVMGetMDString__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetMDString(
        LLVMOpaqueValue.from_pyobj(V).get_element_ptr(),
        <unsigned int *>rocm.llvm._util.types.Pointer.from_pyobj(Length)._ptr))
    return None if _LLVMGetMDString__retval._ptr == NULL else _LLVMGetMDString__retval


@cython.embedsignature(True)
def LLVMGetMDNodeNumOperands(object V):
    r"""(No short description, might be part of a group.)

    Obtain the number of operands from an MDNode value.

    Args:
        V (`~.LLVMOpaqueValue`/`~.object`):
            MDNode to get number of operands from.

    Returns:
        `~.int`: Number of operands of the MDNode.
    """
    cdef unsigned int _LLVMGetMDNodeNumOperands__retval = ccore.LLVMGetMDNodeNumOperands(
        LLVMOpaqueValue.from_pyobj(V).get_element_ptr())
    return _LLVMGetMDNodeNumOperands__retval


@cython.embedsignature(True)
def LLVMGetMDNodeOperands(object V, object Dest):
    r"""(No short description, might be part of a group.)

    Obtain the given MDNode's operands.

    The passed LLVMValueRef pointer should point to enough memory to hold all of
    the operands of the given MDNode (see LLVMGetMDNodeNumOperands) as
    LLVMValueRefs. This memory will be populated with the LLVMValueRefs of the
    MDNode's operands.

    Args:
        V (`~.LLVMOpaqueValue`/`~.object`):
            MDNode to get the operands from.

        Dest (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            Destination array for operands.
    """
    ccore.LLVMGetMDNodeOperands(
        LLVMOpaqueValue.from_pyobj(V).get_element_ptr(),
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(Dest)._ptr)


@cython.embedsignature(True)
def LLVMMDStringInContext(object C, object Str, unsigned int SLen):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMMDStringInContext2 instead. */

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        Str (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        SLen (`~.int`):
            (undocumented)
    """
    _LLVMMDStringInContext__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMMDStringInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Str)._ptr,SLen))
    return None if _LLVMMDStringInContext__retval._ptr == NULL else _LLVMMDStringInContext__retval


@cython.embedsignature(True)
def LLVMMDString(object Str, unsigned int SLen):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMMDStringInContext2 instead. */

    Args:
        Str (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        SLen (`~.int`):
            (undocumented)
    """
    _LLVMMDString__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMMDString(
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Str)._ptr,SLen))
    return None if _LLVMMDString__retval._ptr == NULL else _LLVMMDString__retval


@cython.embedsignature(True)
def LLVMMDNodeInContext(object C, object Vals, unsigned int Count):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMMDNodeInContext2 instead. */

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        Vals (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        Count (`~.int`):
            (undocumented)
    """
    _LLVMMDNodeInContext__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMMDNodeInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(Vals)._ptr,Count))
    return None if _LLVMMDNodeInContext__retval._ptr == NULL else _LLVMMDNodeInContext__retval


@cython.embedsignature(True)
def LLVMMDNode(object Vals, unsigned int Count):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMMDNodeInContext2 instead. */

    Args:
        Vals (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        Count (`~.int`):
            (undocumented)
    """
    _LLVMMDNode__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMMDNode(
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(Vals)._ptr,Count))
    return None if _LLVMMDNode__retval._ptr == NULL else _LLVMMDNode__retval


@cython.embedsignature(True)
def LLVMBasicBlockAsValue(object BB):
    r"""(No short description, might be part of a group.)

    Convert a basic block instance to a value type.

    Args:
        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    _LLVMBasicBlockAsValue__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBasicBlockAsValue(
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr()))
    return None if _LLVMBasicBlockAsValue__retval._ptr == NULL else _LLVMBasicBlockAsValue__retval


@cython.embedsignature(True)
def LLVMValueIsBasicBlock(object Val):
    r"""(No short description, might be part of a group.)

    Determine whether an LLVMValueRef is itself a basic block.

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMValueIsBasicBlock__retval = ccore.LLVMValueIsBasicBlock(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr())
    return _LLVMValueIsBasicBlock__retval


@cython.embedsignature(True)
def LLVMValueAsBasicBlock(object Val):
    r"""(No short description, might be part of a group.)

    Convert an LLVMValueRef to an LLVMBasicBlockRef instance.

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMValueAsBasicBlock__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMValueAsBasicBlock(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr()))
    return None if _LLVMValueAsBasicBlock__retval._ptr == NULL else _LLVMValueAsBasicBlock__retval


@cython.embedsignature(True)
def LLVMGetBasicBlockName(object BB):
    r"""(No short description, might be part of a group.)

    Obtain the string name of a basic block.

    Args:
        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMGetBasicBlockName__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetBasicBlockName(
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr()))
    return None if _LLVMGetBasicBlockName__retval._ptr == NULL else _LLVMGetBasicBlockName__retval


@cython.embedsignature(True)
def LLVMGetBasicBlockParent(object BB):
    r"""(No short description, might be part of a group.)

    Obtain the function to which a basic block belongs.

    See:
        `~.llvm``~.`~.BasicBlock`.`~.getParent``()

    Args:
        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    _LLVMGetBasicBlockParent__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetBasicBlockParent(
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr()))
    return None if _LLVMGetBasicBlockParent__retval._ptr == NULL else _LLVMGetBasicBlockParent__retval


@cython.embedsignature(True)
def LLVMGetBasicBlockTerminator(object BB):
    r"""(No short description, might be part of a group.)

    Obtain the terminator instruction for a basic block.

    If the basic block does not have a terminator (it is not well-formed
    if it doesn't), then NULL is returned.

    The returned LLVMValueRef corresponds to an llvm`~.Instruction`.

    See:
        `~.llvm``~.`~.BasicBlock`.`~.getTerminator``()

    Args:
        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    _LLVMGetBasicBlockTerminator__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetBasicBlockTerminator(
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr()))
    return None if _LLVMGetBasicBlockTerminator__retval._ptr == NULL else _LLVMGetBasicBlockTerminator__retval


@cython.embedsignature(True)
def LLVMCountBasicBlocks(object Fn):
    r"""(No short description, might be part of a group.)

    Obtain the number of basic blocks in a function.

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            Function value to operate on.

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMCountBasicBlocks__retval = ccore.LLVMCountBasicBlocks(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr())
    return _LLVMCountBasicBlocks__retval


@cython.embedsignature(True)
def LLVMGetBasicBlocks(object Fn, object BasicBlocks):
    r"""(No short description, might be part of a group.)

    Obtain all of the basic blocks in a function.

    This operates on a function value. The BasicBlocks parameter is a
    pointer to a pre-allocated array of LLVMBasicBlockRef of at least
    LLVMCountBasicBlocks() in length. This array is populated with
    LLVMBasicBlockRef instances.

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        BasicBlocks (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    ccore.LLVMGetBasicBlocks(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr(),
        <ccore.LLVMBasicBlockRef*>rocm.llvm._util.types.Pointer.from_pyobj(BasicBlocks)._ptr)


@cython.embedsignature(True)
def LLVMGetFirstBasicBlock(object Fn):
    r"""(No short description, might be part of a group.)

    Obtain the first basic block in a function.

    The returned basic block can be used as an iterator. You will likely
    eventually call into LLVMGetNextBasicBlock() with it.

    See:
        `~.llvm``~.`~.Function`.`~.begin``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetFirstBasicBlock__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMGetFirstBasicBlock(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr()))
    return None if _LLVMGetFirstBasicBlock__retval._ptr == NULL else _LLVMGetFirstBasicBlock__retval


@cython.embedsignature(True)
def LLVMGetLastBasicBlock(object Fn):
    r"""(No short description, might be part of a group.)

    Obtain the last basic block in a function.

    See:
        `~.llvm``~.`~.Function`.`~.end``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetLastBasicBlock__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMGetLastBasicBlock(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr()))
    return None if _LLVMGetLastBasicBlock__retval._ptr == NULL else _LLVMGetLastBasicBlock__retval


@cython.embedsignature(True)
def LLVMGetNextBasicBlock(object BB):
    r"""(No short description, might be part of a group.)

    Advance a basic block iterator.

    Args:
        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    _LLVMGetNextBasicBlock__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMGetNextBasicBlock(
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr()))
    return None if _LLVMGetNextBasicBlock__retval._ptr == NULL else _LLVMGetNextBasicBlock__retval


@cython.embedsignature(True)
def LLVMGetPreviousBasicBlock(object BB):
    r"""(No short description, might be part of a group.)

    Go backwards in a basic block iterator.

    Args:
        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    _LLVMGetPreviousBasicBlock__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMGetPreviousBasicBlock(
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr()))
    return None if _LLVMGetPreviousBasicBlock__retval._ptr == NULL else _LLVMGetPreviousBasicBlock__retval


@cython.embedsignature(True)
def LLVMGetEntryBasicBlock(object Fn):
    r"""(No short description, might be part of a group.)

    Obtain the basic block that corresponds to the entry point of a
    function.

    See:
        `~.llvm``~.`~.Function`.`~.getEntryBlock``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetEntryBasicBlock__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMGetEntryBasicBlock(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr()))
    return None if _LLVMGetEntryBasicBlock__retval._ptr == NULL else _LLVMGetEntryBasicBlock__retval


@cython.embedsignature(True)
def LLVMInsertExistingBasicBlockAfterInsertBlock(object Builder, object BB):
    r"""(No short description, might be part of a group.)

    Insert the given basic block after the insertion point of the given builder.

    The insertion point must be valid.

    See:
        `~.llvm``~.`~.Function`.`~.BasicBlockListType`.`~.insertAfter``()

    Args:
        Builder (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    ccore.LLVMInsertExistingBasicBlockAfterInsertBlock(
        LLVMOpaqueBuilder.from_pyobj(Builder).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr())


@cython.embedsignature(True)
def LLVMAppendExistingBasicBlock(object Fn, object BB):
    r"""(No short description, might be part of a group.)

    Append the given basic block to the basic block list of the given function.

    See:
        `~.llvm``~.`~.Function`.`~.BasicBlockListType`.`~.push_back``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    ccore.LLVMAppendExistingBasicBlock(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr())


@cython.embedsignature(True)
def LLVMCreateBasicBlockInContext(object C, object Name):
    r"""(No short description, might be part of a group.)

    Create a new basic block without inserting it into a function.

    See:
        `~.llvm``~.`~.BasicBlock`.`~.Create``()

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMCreateBasicBlockInContext__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMCreateBasicBlockInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMCreateBasicBlockInContext__retval._ptr == NULL else _LLVMCreateBasicBlockInContext__retval


@cython.embedsignature(True)
def LLVMAppendBasicBlockInContext(object C, object Fn, object Name):
    r"""(No short description, might be part of a group.)

    Append a basic block to the end of a function.

    See:
        `~.llvm``~.`~.BasicBlock`.`~.Create``()

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMAppendBasicBlockInContext__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMAppendBasicBlockInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMAppendBasicBlockInContext__retval._ptr == NULL else _LLVMAppendBasicBlockInContext__retval


@cython.embedsignature(True)
def LLVMAppendBasicBlock(object Fn, object Name):
    r"""(No short description, might be part of a group.)

    Append a basic block to the end of a function using the global
    context.

    See:
        `~.llvm``~.`~.BasicBlock`.`~.Create``()

    Args:
        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMAppendBasicBlock__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMAppendBasicBlock(
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMAppendBasicBlock__retval._ptr == NULL else _LLVMAppendBasicBlock__retval


@cython.embedsignature(True)
def LLVMInsertBasicBlockInContext(object C, object BB, object Name):
    r"""(No short description, might be part of a group.)

    Insert a basic block in a function before another basic block.

    The function to add to is determined by the function of the
    passed basic block.

    See:
        `~.llvm``~.`~.BasicBlock`.`~.Create``()

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMInsertBasicBlockInContext__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMInsertBasicBlockInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMInsertBasicBlockInContext__retval._ptr == NULL else _LLVMInsertBasicBlockInContext__retval


@cython.embedsignature(True)
def LLVMInsertBasicBlock(object InsertBeforeBB, object Name):
    r"""(No short description, might be part of a group.)

    Insert a basic block in a function using the global context.

    See:
        `~.llvm``~.`~.BasicBlock`.`~.Create``()

    Args:
        InsertBeforeBB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMInsertBasicBlock__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMInsertBasicBlock(
        LLVMOpaqueBasicBlock.from_pyobj(InsertBeforeBB).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMInsertBasicBlock__retval._ptr == NULL else _LLVMInsertBasicBlock__retval


@cython.embedsignature(True)
def LLVMDeleteBasicBlock(object BB):
    r"""(No short description, might be part of a group.)

    Remove a basic block from a function and delete it.

    This deletes the basic block from its containing function and deletes
    the basic block itself.

    See:
        `~.llvm``~.`~.BasicBlock`.`~.eraseFromParent``()

    Args:
        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    ccore.LLVMDeleteBasicBlock(
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr())


@cython.embedsignature(True)
def LLVMRemoveBasicBlockFromParent(object BB):
    r"""(No short description, might be part of a group.)

    Remove a basic block from a function.

    This deletes the basic block from its containing function but keep
    the basic block alive.

    See:
        `~.llvm``~.`~.BasicBlock`.`~.removeFromParent``()

    Args:
        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    ccore.LLVMRemoveBasicBlockFromParent(
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr())


@cython.embedsignature(True)
def LLVMMoveBasicBlockBefore(object BB, object MovePos):
    r"""(No short description, might be part of a group.)

    Move a basic block to before another one.

    See:
        `~.llvm``~.`~.BasicBlock`.`~.moveBefore``()

    Args:
        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)

        MovePos (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    ccore.LLVMMoveBasicBlockBefore(
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(MovePos).get_element_ptr())


@cython.embedsignature(True)
def LLVMMoveBasicBlockAfter(object BB, object MovePos):
    r"""(No short description, might be part of a group.)

    Move a basic block to after another one.

    See:
        `~.llvm``~.`~.BasicBlock`.`~.moveAfter``()

    Args:
        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)

        MovePos (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    ccore.LLVMMoveBasicBlockAfter(
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(MovePos).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetFirstInstruction(object BB):
    r"""(No short description, might be part of a group.)

    Obtain the first instruction in a basic block.

    The returned LLVMValueRef corresponds to a llvm`~.Instruction`
    instance.

    Args:
        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    _LLVMGetFirstInstruction__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetFirstInstruction(
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr()))
    return None if _LLVMGetFirstInstruction__retval._ptr == NULL else _LLVMGetFirstInstruction__retval


@cython.embedsignature(True)
def LLVMGetLastInstruction(object BB):
    r"""(No short description, might be part of a group.)

    Obtain the last instruction in a basic block.

    The returned LLVMValueRef corresponds to an LLVM:Instruction.

    Args:
        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    _LLVMGetLastInstruction__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetLastInstruction(
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr()))
    return None if _LLVMGetLastInstruction__retval._ptr == NULL else _LLVMGetLastInstruction__retval


@cython.embedsignature(True)
def LLVMHasMetadata(object Val):
    r"""(No short description, might be part of a group.)

    Determine whether an instruction has any metadata attached.

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMHasMetadata__retval = ccore.LLVMHasMetadata(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr())
    return _LLVMHasMetadata__retval


@cython.embedsignature(True)
def LLVMGetMetadata(object Val, unsigned int KindID):
    r"""(No short description, might be part of a group.)

    Return metadata associated with an instruction value.

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        KindID (`~.int`):
            (undocumented)
    """
    _LLVMGetMetadata__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetMetadata(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),KindID))
    return None if _LLVMGetMetadata__retval._ptr == NULL else _LLVMGetMetadata__retval


@cython.embedsignature(True)
def LLVMSetMetadata(object Val, unsigned int KindID, object Node):
    r"""(No short description, might be part of a group.)

    Set metadata associated with an instruction value.

    Args:
        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        KindID (`~.int`):
            (undocumented)

        Node (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetMetadata(
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),KindID,
        LLVMOpaqueValue.from_pyobj(Node).get_element_ptr())


@cython.embedsignature(True)
def LLVMInstructionGetAllMetadataOtherThanDebugLoc(object Instr, object NumEntries):
    r"""(No short description, might be part of a group.)

    Returns the metadata associated with an instruction value, but filters out
    all the debug locations.

    See:
        `~.llvm``~.`~.Instruction`.`~.getAllMetadataOtherThanDebugLoc``()

    Args:
        Instr (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        NumEntries (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _LLVMInstructionGetAllMetadataOtherThanDebugLoc__retval = LLVMOpaqueValueMetadataEntry.from_ptr(ccore.LLVMInstructionGetAllMetadataOtherThanDebugLoc(
        LLVMOpaqueValue.from_pyobj(Instr).get_element_ptr(),
        <unsigned long *>rocm.llvm._util.types.Pointer.from_pyobj(NumEntries)._ptr))
    return None if _LLVMInstructionGetAllMetadataOtherThanDebugLoc__retval._ptr == NULL else _LLVMInstructionGetAllMetadataOtherThanDebugLoc__retval


@cython.embedsignature(True)
def LLVMGetInstructionParent(object Inst):
    r"""(No short description, might be part of a group.)

    Obtain the basic block to which an instruction belongs.

    See:
        `~.llvm``~.`~.Instruction`.`~.getParent``()

    Args:
        Inst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetInstructionParent__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMGetInstructionParent(
        LLVMOpaqueValue.from_pyobj(Inst).get_element_ptr()))
    return None if _LLVMGetInstructionParent__retval._ptr == NULL else _LLVMGetInstructionParent__retval


@cython.embedsignature(True)
def LLVMGetNextInstruction(object Inst):
    r"""(No short description, might be part of a group.)

    Obtain the instruction that occurs after the one specified.

    The next instruction will be from the same basic block.

    If this is the last instruction in a basic block, NULL will be
    returned.

    Args:
        Inst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetNextInstruction__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetNextInstruction(
        LLVMOpaqueValue.from_pyobj(Inst).get_element_ptr()))
    return None if _LLVMGetNextInstruction__retval._ptr == NULL else _LLVMGetNextInstruction__retval


@cython.embedsignature(True)
def LLVMGetPreviousInstruction(object Inst):
    r"""(No short description, might be part of a group.)

    Obtain the instruction that occurred before this one.

    If the instruction is the first instruction in a basic block, NULL
    will be returned.

    Args:
        Inst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetPreviousInstruction__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetPreviousInstruction(
        LLVMOpaqueValue.from_pyobj(Inst).get_element_ptr()))
    return None if _LLVMGetPreviousInstruction__retval._ptr == NULL else _LLVMGetPreviousInstruction__retval


@cython.embedsignature(True)
def LLVMInstructionRemoveFromParent(object Inst):
    r"""(No short description, might be part of a group.)

    Remove an instruction.

    The instruction specified is removed from its containing building
    block but is kept alive.

    See:
        `~.llvm``~.`~.Instruction`.`~.removeFromParent``()

    Args:
        Inst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMInstructionRemoveFromParent(
        LLVMOpaqueValue.from_pyobj(Inst).get_element_ptr())


@cython.embedsignature(True)
def LLVMInstructionEraseFromParent(object Inst):
    r"""(No short description, might be part of a group.)

    Remove and delete an instruction.

    The instruction specified is removed from its containing building
    block and then deleted.

    See:
        `~.llvm``~.`~.Instruction`.`~.eraseFromParent``()

    Args:
        Inst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMInstructionEraseFromParent(
        LLVMOpaqueValue.from_pyobj(Inst).get_element_ptr())


@cython.embedsignature(True)
def LLVMDeleteInstruction(object Inst):
    r"""(No short description, might be part of a group.)

    Delete an instruction.

    The instruction specified is deleted. It must have previously been
    removed from its containing building block.

    See:
        `~.llvm``~.`~.Value`.`~.deleteValue``()

    Args:
        Inst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMDeleteInstruction(
        LLVMOpaqueValue.from_pyobj(Inst).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetInstructionOpcode(object Inst):
    r"""(No short description, might be part of a group.)

    Obtain the code opcode for an individual instruction.

    See:
        `~.llvm``~.`~.Instruction`.`~.getOpCode``()

    Args:
        Inst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.LLVMOpcode`
    """
    _LLVMGetInstructionOpcode__retval = LLVMOpcode(ccore.LLVMGetInstructionOpcode(
        LLVMOpaqueValue.from_pyobj(Inst).get_element_ptr()))
    return _LLVMGetInstructionOpcode__retval


@cython.embedsignature(True)
def LLVMGetICmpPredicate(object Inst):
    r"""(No short description, might be part of a group.)

    Obtain the predicate of an instruction.

    This is only valid for instructions that correspond to llvm`~.ICmpInst`
    or llvm`~.ConstantExpr` whose opcode is llvm`~.Instruction.ICmp`.

    See:
        `~.llvm``~.`~.ICmpInst`.`~.getPredicate``()

    Args:
        Inst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.LLVMIntPredicate`
    """
    _LLVMGetICmpPredicate__retval = LLVMIntPredicate(ccore.LLVMGetICmpPredicate(
        LLVMOpaqueValue.from_pyobj(Inst).get_element_ptr()))
    return _LLVMGetICmpPredicate__retval


@cython.embedsignature(True)
def LLVMGetFCmpPredicate(object Inst):
    r"""(No short description, might be part of a group.)

    Obtain the float predicate of an instruction.

    This is only valid for instructions that correspond to llvm`~.FCmpInst`
    or llvm`~.ConstantExpr` whose opcode is llvm`~.Instruction.FCmp`.

    See:
        `~.llvm``~.`~.FCmpInst`.`~.getPredicate``()

    Args:
        Inst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.LLVMRealPredicate`
    """
    _LLVMGetFCmpPredicate__retval = LLVMRealPredicate(ccore.LLVMGetFCmpPredicate(
        LLVMOpaqueValue.from_pyobj(Inst).get_element_ptr()))
    return _LLVMGetFCmpPredicate__retval


@cython.embedsignature(True)
def LLVMInstructionClone(object Inst):
    r"""(No short description, might be part of a group.)

    Create a copy of 'this' instruction that is identical in all ways
    except the following:
      * The instruction has no parent
      * The instruction has no name

    See:
        `~.llvm``~.`~.Instruction`.`~.clone``()

    Args:
        Inst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMInstructionClone__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMInstructionClone(
        LLVMOpaqueValue.from_pyobj(Inst).get_element_ptr()))
    return None if _LLVMInstructionClone__retval._ptr == NULL else _LLVMInstructionClone__retval


@cython.embedsignature(True)
def LLVMIsATerminatorInst(object Inst):
    r"""(No short description, might be part of a group.)

    Determine whether an instruction is a terminator. This routine is named to
    be compatible with historical functions that did this by querying the
    underlying C++ type.

    See:
        `~.llvm``~.`~.Instruction`.`~.isTerminator``()

    Args:
        Inst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMIsATerminatorInst__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMIsATerminatorInst(
        LLVMOpaqueValue.from_pyobj(Inst).get_element_ptr()))
    return None if _LLVMIsATerminatorInst__retval._ptr == NULL else _LLVMIsATerminatorInst__retval


@cython.embedsignature(True)
def LLVMGetNumArgOperands(object Instr):
    r"""(No short description, might be part of a group.)

    Obtain the argument count for a call instruction.

    This expects an LLVMValueRef that corresponds to a llvm`~.CallInst`,
    llvm`~.InvokeInst`, or llvm:FuncletPadInst.

    See:
        `~.llvm``~.`~.CallInst`.`~.getNumArgOperands``()

    See:
        `~.llvm``~.`~.InvokeInst`.`~.getNumArgOperands``()

    See:
        `~.llvm``~.`~.FuncletPadInst`.`~.getNumArgOperands``()

    Args:
        Instr (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetNumArgOperands__retval = ccore.LLVMGetNumArgOperands(
        LLVMOpaqueValue.from_pyobj(Instr).get_element_ptr())
    return _LLVMGetNumArgOperands__retval


@cython.embedsignature(True)
def LLVMSetInstructionCallConv(object Instr, unsigned int CC):
    r"""(No short description, might be part of a group.)

    Set the calling convention for a call instruction.

    This expects an LLVMValueRef that corresponds to a llvm`~.CallInst` or
    llvm`~.InvokeInst`.

    See:
        `~.llvm``~.`~.CallInst`.`~.setCallingConv``()

    See:
        `~.llvm``~.`~.InvokeInst`.`~.setCallingConv``()

    Args:
        Instr (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        CC (`~.int`):
            (undocumented)
    """
    ccore.LLVMSetInstructionCallConv(
        LLVMOpaqueValue.from_pyobj(Instr).get_element_ptr(),CC)


@cython.embedsignature(True)
def LLVMGetInstructionCallConv(object Instr):
    r"""(No short description, might be part of a group.)

    Obtain the calling convention for a call instruction.

    This is the opposite of LLVMSetInstructionCallConv(). Reads its
    usage.

    See:
        `~.LLVMSetInstructionCallConv`()

    Args:
        Instr (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetInstructionCallConv__retval = ccore.LLVMGetInstructionCallConv(
        LLVMOpaqueValue.from_pyobj(Instr).get_element_ptr())
    return _LLVMGetInstructionCallConv__retval


@cython.embedsignature(True)
def LLVMSetInstrParamAlignment(object Instr, unsigned int Idx, unsigned int Align):
    r"""(No short description, might be part of a group.)

    Args:
        Instr (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)

        Align (`~.int`):
            (undocumented)
    """
    ccore.LLVMSetInstrParamAlignment(
        LLVMOpaqueValue.from_pyobj(Instr).get_element_ptr(),Idx,Align)


@cython.embedsignature(True)
def LLVMAddCallSiteAttribute(object C, unsigned int Idx, object A):
    r"""(No short description, might be part of a group.)

    Args:
        C (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)

        A (`~.LLVMOpaqueAttributeRef`/`~.object`):
            (undocumented)
    """
    ccore.LLVMAddCallSiteAttribute(
        LLVMOpaqueValue.from_pyobj(C).get_element_ptr(),Idx,
        LLVMOpaqueAttributeRef.from_pyobj(A).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetCallSiteAttributeCount(object C, unsigned int Idx):
    r"""(No short description, might be part of a group.)

    Args:
        C (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetCallSiteAttributeCount__retval = ccore.LLVMGetCallSiteAttributeCount(
        LLVMOpaqueValue.from_pyobj(C).get_element_ptr(),Idx)
    return _LLVMGetCallSiteAttributeCount__retval


@cython.embedsignature(True)
def LLVMGetCallSiteAttributes(object C, unsigned int Idx, object Attrs):
    r"""(No short description, might be part of a group.)

    Args:
        C (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)

        Attrs (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    ccore.LLVMGetCallSiteAttributes(
        LLVMOpaqueValue.from_pyobj(C).get_element_ptr(),Idx,
        <ccore.LLVMAttributeRef*>rocm.llvm._util.types.Pointer.from_pyobj(Attrs)._ptr)


@cython.embedsignature(True)
def LLVMGetCallSiteEnumAttribute(object C, unsigned int Idx, unsigned int KindID):
    r"""(No short description, might be part of a group.)

    Args:
        C (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)

        KindID (`~.int`):
            (undocumented)
    """
    _LLVMGetCallSiteEnumAttribute__retval = LLVMOpaqueAttributeRef.from_ptr(ccore.LLVMGetCallSiteEnumAttribute(
        LLVMOpaqueValue.from_pyobj(C).get_element_ptr(),Idx,KindID))
    return None if _LLVMGetCallSiteEnumAttribute__retval._ptr == NULL else _LLVMGetCallSiteEnumAttribute__retval


@cython.embedsignature(True)
def LLVMGetCallSiteStringAttribute(object C, unsigned int Idx, object K, unsigned int KLen):
    r"""(No short description, might be part of a group.)

    Args:
        C (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)

        K (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        KLen (`~.int`):
            (undocumented)
    """
    _LLVMGetCallSiteStringAttribute__retval = LLVMOpaqueAttributeRef.from_ptr(ccore.LLVMGetCallSiteStringAttribute(
        LLVMOpaqueValue.from_pyobj(C).get_element_ptr(),Idx,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(K)._ptr,KLen))
    return None if _LLVMGetCallSiteStringAttribute__retval._ptr == NULL else _LLVMGetCallSiteStringAttribute__retval


@cython.embedsignature(True)
def LLVMRemoveCallSiteEnumAttribute(object C, unsigned int Idx, unsigned int KindID):
    r"""(No short description, might be part of a group.)

    Args:
        C (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)

        KindID (`~.int`):
            (undocumented)
    """
    ccore.LLVMRemoveCallSiteEnumAttribute(
        LLVMOpaqueValue.from_pyobj(C).get_element_ptr(),Idx,KindID)


@cython.embedsignature(True)
def LLVMRemoveCallSiteStringAttribute(object C, unsigned int Idx, object K, unsigned int KLen):
    r"""(No short description, might be part of a group.)

    Args:
        C (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)

        K (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        KLen (`~.int`):
            (undocumented)
    """
    ccore.LLVMRemoveCallSiteStringAttribute(
        LLVMOpaqueValue.from_pyobj(C).get_element_ptr(),Idx,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(K)._ptr,KLen)


@cython.embedsignature(True)
def LLVMGetCalledFunctionType(object C):
    r"""(No short description, might be part of a group.)

    Obtain the function type called by this instruction.

    See:
        `~.llvm``~.`~.CallBase`.`~.getFunctionType``()

    Args:
        C (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetCalledFunctionType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMGetCalledFunctionType(
        LLVMOpaqueValue.from_pyobj(C).get_element_ptr()))
    return None if _LLVMGetCalledFunctionType__retval._ptr == NULL else _LLVMGetCalledFunctionType__retval


@cython.embedsignature(True)
def LLVMGetCalledValue(object Instr):
    r"""(No short description, might be part of a group.)

    Obtain the pointer to the function invoked by this instruction.

    This expects an LLVMValueRef that corresponds to a llvm`~.CallInst` or
    llvm`~.InvokeInst`.

    See:
        `~.llvm``~.`~.CallInst`.`~.getCalledOperand``()

    See:
        `~.llvm``~.`~.InvokeInst`.`~.getCalledOperand``()

    Args:
        Instr (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetCalledValue__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetCalledValue(
        LLVMOpaqueValue.from_pyobj(Instr).get_element_ptr()))
    return None if _LLVMGetCalledValue__retval._ptr == NULL else _LLVMGetCalledValue__retval


@cython.embedsignature(True)
def LLVMIsTailCall(object CallInst):
    r"""(No short description, might be part of a group.)

    Obtain whether a call instruction is a tail call.

    This only works on llvm`~.CallInst` instructions.

    See:
        `~.llvm``~.`~.CallInst`.`~.isTailCall``()

    Args:
        CallInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsTailCall__retval = ccore.LLVMIsTailCall(
        LLVMOpaqueValue.from_pyobj(CallInst).get_element_ptr())
    return _LLVMIsTailCall__retval


@cython.embedsignature(True)
def LLVMSetTailCall(object CallInst, int IsTailCall):
    r"""(No short description, might be part of a group.)

    Set whether a call instruction is a tail call.

    This only works on llvm`~.CallInst` instructions.

    See:
        `~.llvm``~.`~.CallInst`.`~.setTailCall``()

    Args:
        CallInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        IsTailCall (`~.int`):
            (undocumented)
    """
    ccore.LLVMSetTailCall(
        LLVMOpaqueValue.from_pyobj(CallInst).get_element_ptr(),IsTailCall)


@cython.embedsignature(True)
def LLVMGetNormalDest(object InvokeInst):
    r"""(No short description, might be part of a group.)

    Return the normal destination basic block.

    This only works on llvm`~.InvokeInst` instructions.

    See:
        `~.llvm``~.`~.InvokeInst`.`~.getNormalDest``()

    Args:
        InvokeInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetNormalDest__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMGetNormalDest(
        LLVMOpaqueValue.from_pyobj(InvokeInst).get_element_ptr()))
    return None if _LLVMGetNormalDest__retval._ptr == NULL else _LLVMGetNormalDest__retval


@cython.embedsignature(True)
def LLVMGetUnwindDest(object InvokeInst):
    r"""(No short description, might be part of a group.)

    Return the unwind destination basic block.

    Works on llvm`~.InvokeInst`, llvm`~.CleanupReturnInst`, and
    llvm`~.CatchSwitchInst` instructions.

    See:
        `~.llvm``~.`~.InvokeInst`.`~.getUnwindDest``()

    See:
        `~.llvm``~.`~.CleanupReturnInst`.`~.getUnwindDest``()

    See:
        `~.llvm``~.`~.CatchSwitchInst`.`~.getUnwindDest``()

    Args:
        InvokeInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetUnwindDest__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMGetUnwindDest(
        LLVMOpaqueValue.from_pyobj(InvokeInst).get_element_ptr()))
    return None if _LLVMGetUnwindDest__retval._ptr == NULL else _LLVMGetUnwindDest__retval


@cython.embedsignature(True)
def LLVMSetNormalDest(object InvokeInst, object B):
    r"""(No short description, might be part of a group.)

    Set the normal destination basic block.

    This only works on llvm`~.InvokeInst` instructions.

    See:
        `~.llvm``~.`~.InvokeInst`.`~.setNormalDest``()

    Args:
        InvokeInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        B (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetNormalDest(
        LLVMOpaqueValue.from_pyobj(InvokeInst).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(B).get_element_ptr())


@cython.embedsignature(True)
def LLVMSetUnwindDest(object InvokeInst, object B):
    r"""(No short description, might be part of a group.)

    Set the unwind destination basic block.

    Works on llvm`~.InvokeInst`, llvm`~.CleanupReturnInst`, and
    llvm`~.CatchSwitchInst` instructions.

    See:
        `~.llvm``~.`~.InvokeInst`.`~.setUnwindDest``()

    See:
        `~.llvm``~.`~.CleanupReturnInst`.`~.setUnwindDest``()

    See:
        `~.llvm``~.`~.CatchSwitchInst`.`~.setUnwindDest``()

    Args:
        InvokeInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        B (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetUnwindDest(
        LLVMOpaqueValue.from_pyobj(InvokeInst).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(B).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetNumSuccessors(object Term):
    r"""(No short description, might be part of a group.)

    Return the number of successors that this terminator has.

    See:
        `~.llvm``~.`~.Instruction`.`~.getNumSuccessors``

    Args:
        Term (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetNumSuccessors__retval = ccore.LLVMGetNumSuccessors(
        LLVMOpaqueValue.from_pyobj(Term).get_element_ptr())
    return _LLVMGetNumSuccessors__retval


@cython.embedsignature(True)
def LLVMGetSuccessor(object Term, unsigned int i):
    r"""(No short description, might be part of a group.)

    Return the specified successor.

    See:
        `~.llvm``~.`~.Instruction`.`~.getSuccessor``

    Args:
        Term (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        i (`~.int`):
            (undocumented)
    """
    _LLVMGetSuccessor__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMGetSuccessor(
        LLVMOpaqueValue.from_pyobj(Term).get_element_ptr(),i))
    return None if _LLVMGetSuccessor__retval._ptr == NULL else _LLVMGetSuccessor__retval


@cython.embedsignature(True)
def LLVMSetSuccessor(object Term, unsigned int i, object block):
    r"""(No short description, might be part of a group.)

    Update the specified successor to point at the provided block.

    See:
        `~.llvm``~.`~.Instruction`.`~.setSuccessor``

    Args:
        Term (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        i (`~.int`):
            (undocumented)

        block (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetSuccessor(
        LLVMOpaqueValue.from_pyobj(Term).get_element_ptr(),i,
        LLVMOpaqueBasicBlock.from_pyobj(block).get_element_ptr())


@cython.embedsignature(True)
def LLVMIsConditional(object Branch):
    r"""(No short description, might be part of a group.)

    Return if a branch is conditional.

    This only works on llvm`~.BranchInst` instructions.

    See:
        `~.llvm``~.`~.BranchInst`.`~.isConditional``

    Args:
        Branch (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsConditional__retval = ccore.LLVMIsConditional(
        LLVMOpaqueValue.from_pyobj(Branch).get_element_ptr())
    return _LLVMIsConditional__retval


@cython.embedsignature(True)
def LLVMGetCondition(object Branch):
    r"""(No short description, might be part of a group.)

    Return the condition of a branch instruction.

    This only works on llvm`~.BranchInst` instructions.

    See:
        `~.llvm``~.`~.BranchInst`.`~.getCondition``

    Args:
        Branch (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetCondition__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetCondition(
        LLVMOpaqueValue.from_pyobj(Branch).get_element_ptr()))
    return None if _LLVMGetCondition__retval._ptr == NULL else _LLVMGetCondition__retval


@cython.embedsignature(True)
def LLVMSetCondition(object Branch, object Cond):
    r"""(No short description, might be part of a group.)

    Set the condition of a branch instruction.

    This only works on llvm`~.BranchInst` instructions.

    See:
        `~.llvm``~.`~.BranchInst`.`~.setCondition``

    Args:
        Branch (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Cond (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetCondition(
        LLVMOpaqueValue.from_pyobj(Branch).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Cond).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetSwitchDefaultDest(object SwitchInstr):
    r"""(No short description, might be part of a group.)

    Obtain the default destination basic block of a switch instruction.

    This only works on llvm`~.SwitchInst` instructions.

    See:
        `~.llvm``~.`~.SwitchInst`.`~.getDefaultDest``()

    Args:
        SwitchInstr (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetSwitchDefaultDest__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMGetSwitchDefaultDest(
        LLVMOpaqueValue.from_pyobj(SwitchInstr).get_element_ptr()))
    return None if _LLVMGetSwitchDefaultDest__retval._ptr == NULL else _LLVMGetSwitchDefaultDest__retval


@cython.embedsignature(True)
def LLVMGetAllocatedType(object Alloca):
    r"""(No short description, might be part of a group.)

    Obtain the type that is being allocated by the alloca instruction.

    Args:
        Alloca (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetAllocatedType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMGetAllocatedType(
        LLVMOpaqueValue.from_pyobj(Alloca).get_element_ptr()))
    return None if _LLVMGetAllocatedType__retval._ptr == NULL else _LLVMGetAllocatedType__retval


@cython.embedsignature(True)
def LLVMIsInBounds(object GEP):
    r"""(No short description, might be part of a group.)

    Check whether the given GEP operator is inbounds.

    Args:
        GEP (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsInBounds__retval = ccore.LLVMIsInBounds(
        LLVMOpaqueValue.from_pyobj(GEP).get_element_ptr())
    return _LLVMIsInBounds__retval


@cython.embedsignature(True)
def LLVMSetIsInBounds(object GEP, int InBounds):
    r"""(No short description, might be part of a group.)

    Set the given GEP instruction to be inbounds or not.

    Args:
        GEP (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        InBounds (`~.int`):
            (undocumented)
    """
    ccore.LLVMSetIsInBounds(
        LLVMOpaqueValue.from_pyobj(GEP).get_element_ptr(),InBounds)


@cython.embedsignature(True)
def LLVMGetGEPSourceElementType(object GEP):
    r"""(No short description, might be part of a group.)

    Get the source element type of the given GEP operator.

    Args:
        GEP (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetGEPSourceElementType__retval = LLVMOpaqueType.from_ptr(ccore.LLVMGetGEPSourceElementType(
        LLVMOpaqueValue.from_pyobj(GEP).get_element_ptr()))
    return None if _LLVMGetGEPSourceElementType__retval._ptr == NULL else _LLVMGetGEPSourceElementType__retval


@cython.embedsignature(True)
def LLVMAddIncoming(object PhiNode, object IncomingValues, object IncomingBlocks, unsigned int Count):
    r"""(No short description, might be part of a group.)

    Add an incoming value to the end of a PHI list.

    Args:
        PhiNode (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        IncomingValues (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        IncomingBlocks (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        Count (`~.int`):
            (undocumented)
    """
    ccore.LLVMAddIncoming(
        LLVMOpaqueValue.from_pyobj(PhiNode).get_element_ptr(),
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(IncomingValues)._ptr,
        <ccore.LLVMBasicBlockRef*>rocm.llvm._util.types.Pointer.from_pyobj(IncomingBlocks)._ptr,Count)


@cython.embedsignature(True)
def LLVMCountIncoming(object PhiNode):
    r"""(No short description, might be part of a group.)

    Obtain the number of incoming basic blocks to a PHI node.

    Args:
        PhiNode (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMCountIncoming__retval = ccore.LLVMCountIncoming(
        LLVMOpaqueValue.from_pyobj(PhiNode).get_element_ptr())
    return _LLVMCountIncoming__retval


@cython.embedsignature(True)
def LLVMGetIncomingValue(object PhiNode, unsigned int Index):
    r"""(No short description, might be part of a group.)

    Obtain an incoming value to a PHI node as an LLVMValueRef.

    Args:
        PhiNode (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Index (`~.int`):
            (undocumented)
    """
    _LLVMGetIncomingValue__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetIncomingValue(
        LLVMOpaqueValue.from_pyobj(PhiNode).get_element_ptr(),Index))
    return None if _LLVMGetIncomingValue__retval._ptr == NULL else _LLVMGetIncomingValue__retval


@cython.embedsignature(True)
def LLVMGetIncomingBlock(object PhiNode, unsigned int Index):
    r"""(No short description, might be part of a group.)

    Obtain an incoming value to a PHI node as an LLVMBasicBlockRef.

    Args:
        PhiNode (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Index (`~.int`):
            (undocumented)
    """
    _LLVMGetIncomingBlock__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMGetIncomingBlock(
        LLVMOpaqueValue.from_pyobj(PhiNode).get_element_ptr(),Index))
    return None if _LLVMGetIncomingBlock__retval._ptr == NULL else _LLVMGetIncomingBlock__retval


@cython.embedsignature(True)
def LLVMGetNumIndices(object Inst):
    r"""(No short description, might be part of a group.)

    Obtain the number of indices.
    NB: This also works on GEP operators.

    Args:
        Inst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetNumIndices__retval = ccore.LLVMGetNumIndices(
        LLVMOpaqueValue.from_pyobj(Inst).get_element_ptr())
    return _LLVMGetNumIndices__retval


@cython.embedsignature(True)
def LLVMGetIndices(object Inst):
    r"""(No short description, might be part of a group.)

    Obtain the indices as an array.

    Args:
        Inst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetIndices__retval = rocm.llvm._util.types.Pointer.from_ptr(<void*>ccore.LLVMGetIndices(
        LLVMOpaqueValue.from_pyobj(Inst).get_element_ptr()))
    return None if _LLVMGetIndices__retval._ptr == NULL else _LLVMGetIndices__retval


@cython.embedsignature(True)
def LLVMCreateBuilderInContext(object C):
    r"""(No short description, might be part of a group.)

    An instruction builder represents a point within a basic block and is
    the exclusive means of building instructions using the C interface.

    @{

    Args:
        C (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)
    """
    _LLVMCreateBuilderInContext__retval = LLVMOpaqueBuilder.from_ptr(ccore.LLVMCreateBuilderInContext(
        LLVMOpaqueContext.from_pyobj(C).get_element_ptr()))
    return None if _LLVMCreateBuilderInContext__retval._ptr == NULL else _LLVMCreateBuilderInContext__retval


@cython.embedsignature(True)
def LLVMCreateBuilder():
    r"""(No short description, might be part of a group.)
    """
    _LLVMCreateBuilder__retval = LLVMOpaqueBuilder.from_ptr(ccore.LLVMCreateBuilder())
    return None if _LLVMCreateBuilder__retval._ptr == NULL else _LLVMCreateBuilder__retval


@cython.embedsignature(True)
def LLVMPositionBuilder(object Builder, object Block, object Instr):
    r"""(No short description, might be part of a group.)

    Args:
        Builder (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Block (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)

        Instr (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMPositionBuilder(
        LLVMOpaqueBuilder.from_pyobj(Builder).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(Block).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Instr).get_element_ptr())


@cython.embedsignature(True)
def LLVMPositionBuilderBefore(object Builder, object Instr):
    r"""(No short description, might be part of a group.)

    Args:
        Builder (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Instr (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMPositionBuilderBefore(
        LLVMOpaqueBuilder.from_pyobj(Builder).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Instr).get_element_ptr())


@cython.embedsignature(True)
def LLVMPositionBuilderAtEnd(object Builder, object Block):
    r"""(No short description, might be part of a group.)

    Args:
        Builder (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Block (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    ccore.LLVMPositionBuilderAtEnd(
        LLVMOpaqueBuilder.from_pyobj(Builder).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(Block).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetInsertBlock(object Builder):
    r"""(No short description, might be part of a group.)

    Args:
        Builder (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)
    """
    _LLVMGetInsertBlock__retval = LLVMOpaqueBasicBlock.from_ptr(ccore.LLVMGetInsertBlock(
        LLVMOpaqueBuilder.from_pyobj(Builder).get_element_ptr()))
    return None if _LLVMGetInsertBlock__retval._ptr == NULL else _LLVMGetInsertBlock__retval


@cython.embedsignature(True)
def LLVMClearInsertionPosition(object Builder):
    r"""(No short description, might be part of a group.)

    Args:
        Builder (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)
    """
    ccore.LLVMClearInsertionPosition(
        LLVMOpaqueBuilder.from_pyobj(Builder).get_element_ptr())


@cython.embedsignature(True)
def LLVMInsertIntoBuilder(object Builder, object Instr):
    r"""(No short description, might be part of a group.)

    Args:
        Builder (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Instr (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMInsertIntoBuilder(
        LLVMOpaqueBuilder.from_pyobj(Builder).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Instr).get_element_ptr())


@cython.embedsignature(True)
def LLVMInsertIntoBuilderWithName(object Builder, object Instr, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        Builder (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Instr (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    ccore.LLVMInsertIntoBuilderWithName(
        LLVMOpaqueBuilder.from_pyobj(Builder).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Instr).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr)


@cython.embedsignature(True)
def LLVMDisposeBuilder(object Builder):
    r"""(No short description, might be part of a group.)

    Args:
        Builder (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)
    """
    ccore.LLVMDisposeBuilder(
        LLVMOpaqueBuilder.from_pyobj(Builder).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetCurrentDebugLocation2(object Builder):
    r"""(No short description, might be part of a group.)

    Get location information used by debugging information.

    See:
        `~.llvm``~.`~.IRBuilder`.`~.getCurrentDebugLocation``()

    Args:
        Builder (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)
    """
    _LLVMGetCurrentDebugLocation2__retval = LLVMOpaqueMetadata.from_ptr(ccore.LLVMGetCurrentDebugLocation2(
        LLVMOpaqueBuilder.from_pyobj(Builder).get_element_ptr()))
    return None if _LLVMGetCurrentDebugLocation2__retval._ptr == NULL else _LLVMGetCurrentDebugLocation2__retval


@cython.embedsignature(True)
def LLVMSetCurrentDebugLocation2(object Builder, object Loc):
    r"""(No short description, might be part of a group.)

    Set location information used by debugging information.

    To clear the location metadata of the given instruction, pass NULL to ``Loc.``

    See:
        `~.llvm``~.`~.IRBuilder`.`~.SetCurrentDebugLocation``()

    Args:
        Builder (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Loc (`~.LLVMOpaqueMetadata`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetCurrentDebugLocation2(
        LLVMOpaqueBuilder.from_pyobj(Builder).get_element_ptr(),
        LLVMOpaqueMetadata.from_pyobj(Loc).get_element_ptr())


@cython.embedsignature(True)
def LLVMSetInstDebugLocation(object Builder, object Inst):
    r"""(No short description, might be part of a group.)

    Attempts to set the debug location for the given instruction using the
    current debug location for the given builder.  If the builder has no current
    debug location, this function is a no-op.

    Deprecated:
        LLVMSetInstDebugLocation is deprecated in favor of the more general
        LLVMAddMetadataToInst.

    See:
        `~.llvm``~.`~.IRBuilder`.`~.SetInstDebugLocation``()

    Args:
        Builder (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Inst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetInstDebugLocation(
        LLVMOpaqueBuilder.from_pyobj(Builder).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Inst).get_element_ptr())


@cython.embedsignature(True)
def LLVMAddMetadataToInst(object Builder, object Inst):
    r"""(No short description, might be part of a group.)

    Adds the metadata registered with the given builder to the given instruction.

    See:
        `~.llvm``~.`~.IRBuilder`.`~.AddMetadataToInst``()

    Args:
        Builder (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Inst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMAddMetadataToInst(
        LLVMOpaqueBuilder.from_pyobj(Builder).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Inst).get_element_ptr())


@cython.embedsignature(True)
def LLVMBuilderGetDefaultFPMathTag(object Builder):
    r"""(No short description, might be part of a group.)

    Get the dafult floating-point math metadata for a given builder.

    See:
        `~.llvm``~.`~.IRBuilder`.`~.getDefaultFPMathTag``()

    Args:
        Builder (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)
    """
    _LLVMBuilderGetDefaultFPMathTag__retval = LLVMOpaqueMetadata.from_ptr(ccore.LLVMBuilderGetDefaultFPMathTag(
        LLVMOpaqueBuilder.from_pyobj(Builder).get_element_ptr()))
    return None if _LLVMBuilderGetDefaultFPMathTag__retval._ptr == NULL else _LLVMBuilderGetDefaultFPMathTag__retval


@cython.embedsignature(True)
def LLVMBuilderSetDefaultFPMathTag(object Builder, object FPMathTag):
    r"""(No short description, might be part of a group.)

    Set the default floating-point math metadata for the given builder.

    To clear the metadata, pass NULL to ``FPMathTag.``

    See:
        `~.llvm``~.`~.IRBuilder`.`~.setDefaultFPMathTag``()

    Args:
        Builder (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        FPMathTag (`~.LLVMOpaqueMetadata`/`~.object`):
            (undocumented)
    """
    ccore.LLVMBuilderSetDefaultFPMathTag(
        LLVMOpaqueBuilder.from_pyobj(Builder).get_element_ptr(),
        LLVMOpaqueMetadata.from_pyobj(FPMathTag).get_element_ptr())


@cython.embedsignature(True)
def LLVMSetCurrentDebugLocation(object Builder, object L):
    r"""(No short description, might be part of a group.)

    Deprecated: Passing the NULL location will crash.
    Use LLVMGetCurrentDebugLocation2 instead.

    Args:
        Builder (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        L (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetCurrentDebugLocation(
        LLVMOpaqueBuilder.from_pyobj(Builder).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(L).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetCurrentDebugLocation(object Builder):
    r"""(No short description, might be part of a group.)

    Deprecated: Returning the NULL location will crash.
    Use LLVMGetCurrentDebugLocation2 instead.

    Args:
        Builder (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)
    """
    _LLVMGetCurrentDebugLocation__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetCurrentDebugLocation(
        LLVMOpaqueBuilder.from_pyobj(Builder).get_element_ptr()))
    return None if _LLVMGetCurrentDebugLocation__retval._ptr == NULL else _LLVMGetCurrentDebugLocation__retval


@cython.embedsignature(True)
def LLVMBuildRetVoid(object arg0):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)
    """
    _LLVMBuildRetVoid__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildRetVoid(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr()))
    return None if _LLVMBuildRetVoid__retval._ptr == NULL else _LLVMBuildRetVoid__retval


@cython.embedsignature(True)
def LLVMBuildRet(object arg0, object V):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        V (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMBuildRet__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildRet(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(V).get_element_ptr()))
    return None if _LLVMBuildRet__retval._ptr == NULL else _LLVMBuildRet__retval


@cython.embedsignature(True)
def LLVMBuildAggregateRet(object arg0, object RetVals, unsigned int N):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        RetVals (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        N (`~.int`):
            (undocumented)
    """
    _LLVMBuildAggregateRet__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildAggregateRet(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(RetVals)._ptr,N))
    return None if _LLVMBuildAggregateRet__retval._ptr == NULL else _LLVMBuildAggregateRet__retval


@cython.embedsignature(True)
def LLVMBuildBr(object arg0, object Dest):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Dest (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    _LLVMBuildBr__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildBr(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(Dest).get_element_ptr()))
    return None if _LLVMBuildBr__retval._ptr == NULL else _LLVMBuildBr__retval


@cython.embedsignature(True)
def LLVMBuildCondBr(object arg0, object If, object Then, object Else):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        If (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Then (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)

        Else (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    _LLVMBuildCondBr__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildCondBr(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(If).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(Then).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(Else).get_element_ptr()))
    return None if _LLVMBuildCondBr__retval._ptr == NULL else _LLVMBuildCondBr__retval


@cython.embedsignature(True)
def LLVMBuildSwitch(object arg0, object V, object Else, unsigned int NumCases):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        V (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Else (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)

        NumCases (`~.int`):
            (undocumented)
    """
    _LLVMBuildSwitch__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildSwitch(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(V).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(Else).get_element_ptr(),NumCases))
    return None if _LLVMBuildSwitch__retval._ptr == NULL else _LLVMBuildSwitch__retval


@cython.embedsignature(True)
def LLVMBuildIndirectBr(object B, object Addr, unsigned int NumDests):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Addr (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        NumDests (`~.int`):
            (undocumented)
    """
    _LLVMBuildIndirectBr__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildIndirectBr(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Addr).get_element_ptr(),NumDests))
    return None if _LLVMBuildIndirectBr__retval._ptr == NULL else _LLVMBuildIndirectBr__retval


@cython.embedsignature(True)
def LLVMBuildInvoke2(object arg0, object Ty, object Fn, object Args, unsigned int NumArgs, object Then, object Catch, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Args (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        NumArgs (`~.int`):
            (undocumented)

        Then (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)

        Catch (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildInvoke2__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildInvoke2(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr(),
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(Args)._ptr,NumArgs,
        LLVMOpaqueBasicBlock.from_pyobj(Then).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(Catch).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildInvoke2__retval._ptr == NULL else _LLVMBuildInvoke2__retval


@cython.embedsignature(True)
def LLVMBuildUnreachable(object arg0):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)
    """
    _LLVMBuildUnreachable__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildUnreachable(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr()))
    return None if _LLVMBuildUnreachable__retval._ptr == NULL else _LLVMBuildUnreachable__retval


@cython.embedsignature(True)
def LLVMBuildResume(object B, object Exn):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Exn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMBuildResume__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildResume(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Exn).get_element_ptr()))
    return None if _LLVMBuildResume__retval._ptr == NULL else _LLVMBuildResume__retval


@cython.embedsignature(True)
def LLVMBuildLandingPad(object B, object Ty, object PersFn, unsigned int NumClauses, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        PersFn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        NumClauses (`~.int`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildLandingPad__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildLandingPad(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(PersFn).get_element_ptr(),NumClauses,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildLandingPad__retval._ptr == NULL else _LLVMBuildLandingPad__retval


@cython.embedsignature(True)
def LLVMBuildCleanupRet(object B, object CatchPad, object BB):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        CatchPad (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    _LLVMBuildCleanupRet__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildCleanupRet(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(CatchPad).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr()))
    return None if _LLVMBuildCleanupRet__retval._ptr == NULL else _LLVMBuildCleanupRet__retval


@cython.embedsignature(True)
def LLVMBuildCatchRet(object B, object CatchPad, object BB):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        CatchPad (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        BB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    _LLVMBuildCatchRet__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildCatchRet(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(CatchPad).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(BB).get_element_ptr()))
    return None if _LLVMBuildCatchRet__retval._ptr == NULL else _LLVMBuildCatchRet__retval


@cython.embedsignature(True)
def LLVMBuildCatchPad(object B, object ParentPad, object Args, unsigned int NumArgs, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        ParentPad (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Args (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        NumArgs (`~.int`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildCatchPad__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildCatchPad(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(ParentPad).get_element_ptr(),
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(Args)._ptr,NumArgs,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildCatchPad__retval._ptr == NULL else _LLVMBuildCatchPad__retval


@cython.embedsignature(True)
def LLVMBuildCleanupPad(object B, object ParentPad, object Args, unsigned int NumArgs, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        ParentPad (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Args (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        NumArgs (`~.int`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildCleanupPad__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildCleanupPad(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(ParentPad).get_element_ptr(),
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(Args)._ptr,NumArgs,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildCleanupPad__retval._ptr == NULL else _LLVMBuildCleanupPad__retval


@cython.embedsignature(True)
def LLVMBuildCatchSwitch(object B, object ParentPad, object UnwindBB, unsigned int NumHandlers, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        ParentPad (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        UnwindBB (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)

        NumHandlers (`~.int`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildCatchSwitch__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildCatchSwitch(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(ParentPad).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(UnwindBB).get_element_ptr(),NumHandlers,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildCatchSwitch__retval._ptr == NULL else _LLVMBuildCatchSwitch__retval


@cython.embedsignature(True)
def LLVMAddCase(object Switch, object OnVal, object Dest):
    r"""(No short description, might be part of a group.)

    Args:
        Switch (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        OnVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Dest (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    ccore.LLVMAddCase(
        LLVMOpaqueValue.from_pyobj(Switch).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(OnVal).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(Dest).get_element_ptr())


@cython.embedsignature(True)
def LLVMAddDestination(object IndirectBr, object Dest):
    r"""(No short description, might be part of a group.)

    Args:
        IndirectBr (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Dest (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    ccore.LLVMAddDestination(
        LLVMOpaqueValue.from_pyobj(IndirectBr).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(Dest).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetNumClauses(object LandingPad):
    r"""(No short description, might be part of a group.)

    Args:
        LandingPad (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetNumClauses__retval = ccore.LLVMGetNumClauses(
        LLVMOpaqueValue.from_pyobj(LandingPad).get_element_ptr())
    return _LLVMGetNumClauses__retval


@cython.embedsignature(True)
def LLVMGetClause(object LandingPad, unsigned int Idx):
    r"""(No short description, might be part of a group.)

    Args:
        LandingPad (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)
    """
    _LLVMGetClause__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetClause(
        LLVMOpaqueValue.from_pyobj(LandingPad).get_element_ptr(),Idx))
    return None if _LLVMGetClause__retval._ptr == NULL else _LLVMGetClause__retval


@cython.embedsignature(True)
def LLVMAddClause(object LandingPad, object ClauseVal):
    r"""(No short description, might be part of a group.)

    Args:
        LandingPad (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ClauseVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMAddClause(
        LLVMOpaqueValue.from_pyobj(LandingPad).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(ClauseVal).get_element_ptr())


@cython.embedsignature(True)
def LLVMIsCleanup(object LandingPad):
    r"""(No short description, might be part of a group.)

    Args:
        LandingPad (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsCleanup__retval = ccore.LLVMIsCleanup(
        LLVMOpaqueValue.from_pyobj(LandingPad).get_element_ptr())
    return _LLVMIsCleanup__retval


@cython.embedsignature(True)
def LLVMSetCleanup(object LandingPad, int Val):
    r"""(No short description, might be part of a group.)

    Args:
        LandingPad (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Val (`~.int`):
            (undocumented)
    """
    ccore.LLVMSetCleanup(
        LLVMOpaqueValue.from_pyobj(LandingPad).get_element_ptr(),Val)


@cython.embedsignature(True)
def LLVMAddHandler(object CatchSwitch, object Dest):
    r"""(No short description, might be part of a group.)

    Args:
        CatchSwitch (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Dest (`~.LLVMOpaqueBasicBlock`/`~.object`):
            (undocumented)
    """
    ccore.LLVMAddHandler(
        LLVMOpaqueValue.from_pyobj(CatchSwitch).get_element_ptr(),
        LLVMOpaqueBasicBlock.from_pyobj(Dest).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetNumHandlers(object CatchSwitch):
    r"""(No short description, might be part of a group.)

    Args:
        CatchSwitch (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetNumHandlers__retval = ccore.LLVMGetNumHandlers(
        LLVMOpaqueValue.from_pyobj(CatchSwitch).get_element_ptr())
    return _LLVMGetNumHandlers__retval


@cython.embedsignature(True)
def LLVMGetHandlers(object CatchSwitch, object Handlers):
    r"""(No short description, might be part of a group.)

    Obtain the basic blocks acting as handlers for a catchswitch instruction.

    The Handlers parameter should point to a pre-allocated array of
    LLVMBasicBlockRefs at least LLVMGetNumHandlers() large. On return, the
    first LLVMGetNumHandlers() entries in the array will be populated
    with LLVMBasicBlockRef instances.

    Args:
        CatchSwitch (`~.LLVMOpaqueValue`/`~.object`):
            The catchswitch instruction to operate on.

        Handlers (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            Memory address of an array to be filled with basic blocks.
    """
    ccore.LLVMGetHandlers(
        LLVMOpaqueValue.from_pyobj(CatchSwitch).get_element_ptr(),
        <ccore.LLVMBasicBlockRef*>rocm.llvm._util.types.Pointer.from_pyobj(Handlers)._ptr)


@cython.embedsignature(True)
def LLVMGetArgOperand(object Funclet, unsigned int i):
    r"""(No short description, might be part of a group.)

    Args:
        Funclet (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        i (`~.int`):
            (undocumented)
    """
    _LLVMGetArgOperand__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetArgOperand(
        LLVMOpaqueValue.from_pyobj(Funclet).get_element_ptr(),i))
    return None if _LLVMGetArgOperand__retval._ptr == NULL else _LLVMGetArgOperand__retval


@cython.embedsignature(True)
def LLVMSetArgOperand(object Funclet, unsigned int i, object value):
    r"""(No short description, might be part of a group.)

    Args:
        Funclet (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        i (`~.int`):
            (undocumented)

        value (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetArgOperand(
        LLVMOpaqueValue.from_pyobj(Funclet).get_element_ptr(),i,
        LLVMOpaqueValue.from_pyobj(value).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetParentCatchSwitch(object CatchPad):
    r"""(No short description, might be part of a group.)

    Get the parent catchswitch instruction of a catchpad instruction.

    This only works on llvm`~.CatchPadInst` instructions.

    See:
        `~.llvm``~.`~.CatchPadInst`.`~.getCatchSwitch``()

    Args:
        CatchPad (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMGetParentCatchSwitch__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMGetParentCatchSwitch(
        LLVMOpaqueValue.from_pyobj(CatchPad).get_element_ptr()))
    return None if _LLVMGetParentCatchSwitch__retval._ptr == NULL else _LLVMGetParentCatchSwitch__retval


@cython.embedsignature(True)
def LLVMSetParentCatchSwitch(object CatchPad, object CatchSwitch):
    r"""(No short description, might be part of a group.)

    Set the parent catchswitch instruction of a catchpad instruction.

    This only works on llvm`~.CatchPadInst` instructions.

    See:
        `~.llvm``~.`~.CatchPadInst`.`~.setCatchSwitch``()

    Args:
        CatchPad (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        CatchSwitch (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    ccore.LLVMSetParentCatchSwitch(
        LLVMOpaqueValue.from_pyobj(CatchPad).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(CatchSwitch).get_element_ptr())


@cython.embedsignature(True)
def LLVMBuildAdd(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildAdd__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildAdd(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildAdd__retval._ptr == NULL else _LLVMBuildAdd__retval


@cython.embedsignature(True)
def LLVMBuildNSWAdd(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildNSWAdd__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildNSWAdd(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildNSWAdd__retval._ptr == NULL else _LLVMBuildNSWAdd__retval


@cython.embedsignature(True)
def LLVMBuildNUWAdd(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildNUWAdd__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildNUWAdd(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildNUWAdd__retval._ptr == NULL else _LLVMBuildNUWAdd__retval


@cython.embedsignature(True)
def LLVMBuildFAdd(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildFAdd__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildFAdd(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildFAdd__retval._ptr == NULL else _LLVMBuildFAdd__retval


@cython.embedsignature(True)
def LLVMBuildSub(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildSub__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildSub(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildSub__retval._ptr == NULL else _LLVMBuildSub__retval


@cython.embedsignature(True)
def LLVMBuildNSWSub(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildNSWSub__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildNSWSub(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildNSWSub__retval._ptr == NULL else _LLVMBuildNSWSub__retval


@cython.embedsignature(True)
def LLVMBuildNUWSub(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildNUWSub__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildNUWSub(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildNUWSub__retval._ptr == NULL else _LLVMBuildNUWSub__retval


@cython.embedsignature(True)
def LLVMBuildFSub(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildFSub__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildFSub(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildFSub__retval._ptr == NULL else _LLVMBuildFSub__retval


@cython.embedsignature(True)
def LLVMBuildMul(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildMul__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildMul(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildMul__retval._ptr == NULL else _LLVMBuildMul__retval


@cython.embedsignature(True)
def LLVMBuildNSWMul(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildNSWMul__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildNSWMul(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildNSWMul__retval._ptr == NULL else _LLVMBuildNSWMul__retval


@cython.embedsignature(True)
def LLVMBuildNUWMul(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildNUWMul__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildNUWMul(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildNUWMul__retval._ptr == NULL else _LLVMBuildNUWMul__retval


@cython.embedsignature(True)
def LLVMBuildFMul(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildFMul__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildFMul(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildFMul__retval._ptr == NULL else _LLVMBuildFMul__retval


@cython.embedsignature(True)
def LLVMBuildUDiv(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildUDiv__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildUDiv(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildUDiv__retval._ptr == NULL else _LLVMBuildUDiv__retval


@cython.embedsignature(True)
def LLVMBuildExactUDiv(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildExactUDiv__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildExactUDiv(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildExactUDiv__retval._ptr == NULL else _LLVMBuildExactUDiv__retval


@cython.embedsignature(True)
def LLVMBuildSDiv(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildSDiv__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildSDiv(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildSDiv__retval._ptr == NULL else _LLVMBuildSDiv__retval


@cython.embedsignature(True)
def LLVMBuildExactSDiv(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildExactSDiv__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildExactSDiv(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildExactSDiv__retval._ptr == NULL else _LLVMBuildExactSDiv__retval


@cython.embedsignature(True)
def LLVMBuildFDiv(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildFDiv__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildFDiv(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildFDiv__retval._ptr == NULL else _LLVMBuildFDiv__retval


@cython.embedsignature(True)
def LLVMBuildURem(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildURem__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildURem(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildURem__retval._ptr == NULL else _LLVMBuildURem__retval


@cython.embedsignature(True)
def LLVMBuildSRem(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildSRem__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildSRem(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildSRem__retval._ptr == NULL else _LLVMBuildSRem__retval


@cython.embedsignature(True)
def LLVMBuildFRem(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildFRem__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildFRem(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildFRem__retval._ptr == NULL else _LLVMBuildFRem__retval


@cython.embedsignature(True)
def LLVMBuildShl(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildShl__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildShl(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildShl__retval._ptr == NULL else _LLVMBuildShl__retval


@cython.embedsignature(True)
def LLVMBuildLShr(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildLShr__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildLShr(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildLShr__retval._ptr == NULL else _LLVMBuildLShr__retval


@cython.embedsignature(True)
def LLVMBuildAShr(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildAShr__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildAShr(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildAShr__retval._ptr == NULL else _LLVMBuildAShr__retval


@cython.embedsignature(True)
def LLVMBuildAnd(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildAnd__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildAnd(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildAnd__retval._ptr == NULL else _LLVMBuildAnd__retval


@cython.embedsignature(True)
def LLVMBuildOr(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildOr__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildOr(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildOr__retval._ptr == NULL else _LLVMBuildOr__retval


@cython.embedsignature(True)
def LLVMBuildXor(object arg0, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildXor__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildXor(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildXor__retval._ptr == NULL else _LLVMBuildXor__retval


@cython.embedsignature(True)
def LLVMBuildBinOp(object B, object Op, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Op (`~.LLVMOpcode`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    if not isinstance(Op,_LLVMOpcode__Base):
        raise TypeError("argument 'Op' must be of type '_LLVMOpcode__Base'")
    _LLVMBuildBinOp__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildBinOp(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),Op.value,
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildBinOp__retval._ptr == NULL else _LLVMBuildBinOp__retval


@cython.embedsignature(True)
def LLVMBuildNeg(object arg0, object V, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        V (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildNeg__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildNeg(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(V).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildNeg__retval._ptr == NULL else _LLVMBuildNeg__retval


@cython.embedsignature(True)
def LLVMBuildNSWNeg(object B, object V, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        V (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildNSWNeg__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildNSWNeg(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(V).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildNSWNeg__retval._ptr == NULL else _LLVMBuildNSWNeg__retval


@cython.embedsignature(True)
def LLVMBuildNUWNeg(object B, object V, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        V (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildNUWNeg__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildNUWNeg(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(V).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildNUWNeg__retval._ptr == NULL else _LLVMBuildNUWNeg__retval


@cython.embedsignature(True)
def LLVMBuildFNeg(object arg0, object V, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        V (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildFNeg__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildFNeg(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(V).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildFNeg__retval._ptr == NULL else _LLVMBuildFNeg__retval


@cython.embedsignature(True)
def LLVMBuildNot(object arg0, object V, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        V (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildNot__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildNot(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(V).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildNot__retval._ptr == NULL else _LLVMBuildNot__retval


@cython.embedsignature(True)
def LLVMBuildMalloc(object arg0, object Ty, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildMalloc__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildMalloc(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildMalloc__retval._ptr == NULL else _LLVMBuildMalloc__retval


@cython.embedsignature(True)
def LLVMBuildArrayMalloc(object arg0, object Ty, object Val, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildArrayMalloc__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildArrayMalloc(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildArrayMalloc__retval._ptr == NULL else _LLVMBuildArrayMalloc__retval


@cython.embedsignature(True)
def LLVMBuildMemSet(object B, object Ptr, object Val, object Len, unsigned int Align):
    r"""(No short description, might be part of a group.)

    Creates and inserts a memset to the specified pointer and the
    specified value.

    See:
        `~.llvm``~.`~.IRRBuilder`.`~.CreateMemSet``()

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Ptr (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Len (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Align (`~.int`):
            (undocumented)
    """
    _LLVMBuildMemSet__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildMemSet(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Ptr).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Len).get_element_ptr(),Align))
    return None if _LLVMBuildMemSet__retval._ptr == NULL else _LLVMBuildMemSet__retval


@cython.embedsignature(True)
def LLVMBuildMemCpy(object B, object Dst, unsigned int DstAlign, object Src, unsigned int SrcAlign, object Size):
    r"""(No short description, might be part of a group.)

    Creates and inserts a memcpy between the specified pointers.

    See:
        `~.llvm``~.`~.IRRBuilder`.`~.CreateMemCpy``()

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Dst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DstAlign (`~.int`):
            (undocumented)

        Src (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        SrcAlign (`~.int`):
            (undocumented)

        Size (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMBuildMemCpy__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildMemCpy(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Dst).get_element_ptr(),DstAlign,
        LLVMOpaqueValue.from_pyobj(Src).get_element_ptr(),SrcAlign,
        LLVMOpaqueValue.from_pyobj(Size).get_element_ptr()))
    return None if _LLVMBuildMemCpy__retval._ptr == NULL else _LLVMBuildMemCpy__retval


@cython.embedsignature(True)
def LLVMBuildMemMove(object B, object Dst, unsigned int DstAlign, object Src, unsigned int SrcAlign, object Size):
    r"""(No short description, might be part of a group.)

    Creates and inserts a memmove between the specified pointers.

    See:
        `~.llvm``~.`~.IRRBuilder`.`~.CreateMemMove``()

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Dst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DstAlign (`~.int`):
            (undocumented)

        Src (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        SrcAlign (`~.int`):
            (undocumented)

        Size (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMBuildMemMove__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildMemMove(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Dst).get_element_ptr(),DstAlign,
        LLVMOpaqueValue.from_pyobj(Src).get_element_ptr(),SrcAlign,
        LLVMOpaqueValue.from_pyobj(Size).get_element_ptr()))
    return None if _LLVMBuildMemMove__retval._ptr == NULL else _LLVMBuildMemMove__retval


@cython.embedsignature(True)
def LLVMBuildAlloca(object arg0, object Ty, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildAlloca__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildAlloca(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildAlloca__retval._ptr == NULL else _LLVMBuildAlloca__retval


@cython.embedsignature(True)
def LLVMBuildArrayAlloca(object arg0, object Ty, object Val, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildArrayAlloca__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildArrayAlloca(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildArrayAlloca__retval._ptr == NULL else _LLVMBuildArrayAlloca__retval


@cython.embedsignature(True)
def LLVMBuildFree(object arg0, object PointerVal):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        PointerVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMBuildFree__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildFree(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(PointerVal).get_element_ptr()))
    return None if _LLVMBuildFree__retval._ptr == NULL else _LLVMBuildFree__retval


@cython.embedsignature(True)
def LLVMBuildLoad2(object arg0, object Ty, object PointerVal, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        PointerVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildLoad2__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildLoad2(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(PointerVal).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildLoad2__retval._ptr == NULL else _LLVMBuildLoad2__retval


@cython.embedsignature(True)
def LLVMBuildStore(object arg0, object Val, object Ptr):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Ptr (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)
    """
    _LLVMBuildStore__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildStore(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Ptr).get_element_ptr()))
    return None if _LLVMBuildStore__retval._ptr == NULL else _LLVMBuildStore__retval


@cython.embedsignature(True)
def LLVMBuildGEP2(object B, object Ty, object Pointer, object Indices, unsigned int NumIndices, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Pointer (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Indices (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        NumIndices (`~.int`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildGEP2__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildGEP2(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Pointer).get_element_ptr(),
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(Indices)._ptr,NumIndices,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildGEP2__retval._ptr == NULL else _LLVMBuildGEP2__retval


@cython.embedsignature(True)
def LLVMBuildInBoundsGEP2(object B, object Ty, object Pointer, object Indices, unsigned int NumIndices, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Pointer (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Indices (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        NumIndices (`~.int`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildInBoundsGEP2__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildInBoundsGEP2(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Pointer).get_element_ptr(),
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(Indices)._ptr,NumIndices,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildInBoundsGEP2__retval._ptr == NULL else _LLVMBuildInBoundsGEP2__retval


@cython.embedsignature(True)
def LLVMBuildStructGEP2(object B, object Ty, object Pointer, unsigned int Idx, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Pointer (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Idx (`~.int`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildStructGEP2__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildStructGEP2(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Pointer).get_element_ptr(),Idx,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildStructGEP2__retval._ptr == NULL else _LLVMBuildStructGEP2__retval


@cython.embedsignature(True)
def LLVMBuildGlobalString(object B, object Str, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Str (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildGlobalString__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildGlobalString(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Str)._ptr,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildGlobalString__retval._ptr == NULL else _LLVMBuildGlobalString__retval


@cython.embedsignature(True)
def LLVMBuildGlobalStringPtr(object B, object Str, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Str (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildGlobalStringPtr__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildGlobalStringPtr(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Str)._ptr,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildGlobalStringPtr__retval._ptr == NULL else _LLVMBuildGlobalStringPtr__retval


@cython.embedsignature(True)
def LLVMGetVolatile(object MemoryAccessInst):
    r"""(No short description, might be part of a group.)

    Args:
        MemoryAccessInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMGetVolatile__retval = ccore.LLVMGetVolatile(
        LLVMOpaqueValue.from_pyobj(MemoryAccessInst).get_element_ptr())
    return _LLVMGetVolatile__retval


@cython.embedsignature(True)
def LLVMSetVolatile(object MemoryAccessInst, int IsVolatile):
    r"""(No short description, might be part of a group.)

    Args:
        MemoryAccessInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        IsVolatile (`~.int`):
            (undocumented)
    """
    ccore.LLVMSetVolatile(
        LLVMOpaqueValue.from_pyobj(MemoryAccessInst).get_element_ptr(),IsVolatile)


@cython.embedsignature(True)
def LLVMGetWeak(object CmpXchgInst):
    r"""(No short description, might be part of a group.)

    Args:
        CmpXchgInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMGetWeak__retval = ccore.LLVMGetWeak(
        LLVMOpaqueValue.from_pyobj(CmpXchgInst).get_element_ptr())
    return _LLVMGetWeak__retval


@cython.embedsignature(True)
def LLVMSetWeak(object CmpXchgInst, int IsWeak):
    r"""(No short description, might be part of a group.)

    Args:
        CmpXchgInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        IsWeak (`~.int`):
            (undocumented)
    """
    ccore.LLVMSetWeak(
        LLVMOpaqueValue.from_pyobj(CmpXchgInst).get_element_ptr(),IsWeak)


@cython.embedsignature(True)
def LLVMGetOrdering(object MemoryAccessInst):
    r"""(No short description, might be part of a group.)

    Args:
        MemoryAccessInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.LLVMAtomicOrdering`
    """
    _LLVMGetOrdering__retval = LLVMAtomicOrdering(ccore.LLVMGetOrdering(
        LLVMOpaqueValue.from_pyobj(MemoryAccessInst).get_element_ptr()))
    return _LLVMGetOrdering__retval


@cython.embedsignature(True)
def LLVMSetOrdering(object MemoryAccessInst, object Ordering):
    r"""(No short description, might be part of a group.)

    Args:
        MemoryAccessInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Ordering (`~.LLVMAtomicOrdering`):
            (undocumented)
    """
    if not isinstance(Ordering,_LLVMAtomicOrdering__Base):
        raise TypeError("argument 'Ordering' must be of type '_LLVMAtomicOrdering__Base'")
    ccore.LLVMSetOrdering(
        LLVMOpaqueValue.from_pyobj(MemoryAccessInst).get_element_ptr(),Ordering.value)


@cython.embedsignature(True)
def LLVMGetAtomicRMWBinOp(object AtomicRMWInst):
    r"""(No short description, might be part of a group.)

    Args:
        AtomicRMWInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.LLVMAtomicRMWBinOp`
    """
    _LLVMGetAtomicRMWBinOp__retval = LLVMAtomicRMWBinOp(ccore.LLVMGetAtomicRMWBinOp(
        LLVMOpaqueValue.from_pyobj(AtomicRMWInst).get_element_ptr()))
    return _LLVMGetAtomicRMWBinOp__retval


@cython.embedsignature(True)
def LLVMSetAtomicRMWBinOp(object AtomicRMWInst, object BinOp):
    r"""(No short description, might be part of a group.)

    Args:
        AtomicRMWInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        BinOp (`~.LLVMAtomicRMWBinOp`):
            (undocumented)
    """
    if not isinstance(BinOp,_LLVMAtomicRMWBinOp__Base):
        raise TypeError("argument 'BinOp' must be of type '_LLVMAtomicRMWBinOp__Base'")
    ccore.LLVMSetAtomicRMWBinOp(
        LLVMOpaqueValue.from_pyobj(AtomicRMWInst).get_element_ptr(),BinOp.value)


@cython.embedsignature(True)
def LLVMBuildTrunc(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildTrunc__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildTrunc(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildTrunc__retval._ptr == NULL else _LLVMBuildTrunc__retval


@cython.embedsignature(True)
def LLVMBuildZExt(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildZExt__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildZExt(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildZExt__retval._ptr == NULL else _LLVMBuildZExt__retval


@cython.embedsignature(True)
def LLVMBuildSExt(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildSExt__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildSExt(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildSExt__retval._ptr == NULL else _LLVMBuildSExt__retval


@cython.embedsignature(True)
def LLVMBuildFPToUI(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildFPToUI__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildFPToUI(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildFPToUI__retval._ptr == NULL else _LLVMBuildFPToUI__retval


@cython.embedsignature(True)
def LLVMBuildFPToSI(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildFPToSI__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildFPToSI(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildFPToSI__retval._ptr == NULL else _LLVMBuildFPToSI__retval


@cython.embedsignature(True)
def LLVMBuildUIToFP(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildUIToFP__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildUIToFP(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildUIToFP__retval._ptr == NULL else _LLVMBuildUIToFP__retval


@cython.embedsignature(True)
def LLVMBuildSIToFP(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildSIToFP__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildSIToFP(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildSIToFP__retval._ptr == NULL else _LLVMBuildSIToFP__retval


@cython.embedsignature(True)
def LLVMBuildFPTrunc(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildFPTrunc__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildFPTrunc(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildFPTrunc__retval._ptr == NULL else _LLVMBuildFPTrunc__retval


@cython.embedsignature(True)
def LLVMBuildFPExt(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildFPExt__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildFPExt(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildFPExt__retval._ptr == NULL else _LLVMBuildFPExt__retval


@cython.embedsignature(True)
def LLVMBuildPtrToInt(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildPtrToInt__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildPtrToInt(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildPtrToInt__retval._ptr == NULL else _LLVMBuildPtrToInt__retval


@cython.embedsignature(True)
def LLVMBuildIntToPtr(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildIntToPtr__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildIntToPtr(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildIntToPtr__retval._ptr == NULL else _LLVMBuildIntToPtr__retval


@cython.embedsignature(True)
def LLVMBuildBitCast(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildBitCast__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildBitCast(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildBitCast__retval._ptr == NULL else _LLVMBuildBitCast__retval


@cython.embedsignature(True)
def LLVMBuildAddrSpaceCast(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildAddrSpaceCast__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildAddrSpaceCast(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildAddrSpaceCast__retval._ptr == NULL else _LLVMBuildAddrSpaceCast__retval


@cython.embedsignature(True)
def LLVMBuildZExtOrBitCast(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildZExtOrBitCast__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildZExtOrBitCast(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildZExtOrBitCast__retval._ptr == NULL else _LLVMBuildZExtOrBitCast__retval


@cython.embedsignature(True)
def LLVMBuildSExtOrBitCast(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildSExtOrBitCast__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildSExtOrBitCast(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildSExtOrBitCast__retval._ptr == NULL else _LLVMBuildSExtOrBitCast__retval


@cython.embedsignature(True)
def LLVMBuildTruncOrBitCast(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildTruncOrBitCast__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildTruncOrBitCast(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildTruncOrBitCast__retval._ptr == NULL else _LLVMBuildTruncOrBitCast__retval


@cython.embedsignature(True)
def LLVMBuildCast(object B, object Op, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Op (`~.LLVMOpcode`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    if not isinstance(Op,_LLVMOpcode__Base):
        raise TypeError("argument 'Op' must be of type '_LLVMOpcode__Base'")
    _LLVMBuildCast__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildCast(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),Op.value,
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildCast__retval._ptr == NULL else _LLVMBuildCast__retval


@cython.embedsignature(True)
def LLVMBuildPointerCast(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildPointerCast__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildPointerCast(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildPointerCast__retval._ptr == NULL else _LLVMBuildPointerCast__retval


@cython.embedsignature(True)
def LLVMBuildIntCast2(object arg0, object Val, object DestTy, int IsSigned, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        IsSigned (`~.int`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildIntCast2__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildIntCast2(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),IsSigned,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildIntCast2__retval._ptr == NULL else _LLVMBuildIntCast2__retval


@cython.embedsignature(True)
def LLVMBuildFPCast(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildFPCast__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildFPCast(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildFPCast__retval._ptr == NULL else _LLVMBuildFPCast__retval


@cython.embedsignature(True)
def LLVMBuildIntCast(object arg0, object Val, object DestTy, object Name):
    r"""(No short description, might be part of a group.)

    Deprecated: This cast is always signed. Use LLVMBuildIntCast2 instead. */

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildIntCast__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildIntCast(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildIntCast__retval._ptr == NULL else _LLVMBuildIntCast__retval


@cython.embedsignature(True)
def LLVMGetCastOpcode(object Src, int SrcIsSigned, object DestTy, int DestIsSigned):
    r"""(No short description, might be part of a group.)

    Args:
        Src (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        SrcIsSigned (`~.int`):
            (undocumented)

        DestTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        DestIsSigned (`~.int`):
            (undocumented)

    Returns:
        `~.LLVMOpcode`
    """
    _LLVMGetCastOpcode__retval = LLVMOpcode(ccore.LLVMGetCastOpcode(
        LLVMOpaqueValue.from_pyobj(Src).get_element_ptr(),SrcIsSigned,
        LLVMOpaqueType.from_pyobj(DestTy).get_element_ptr(),DestIsSigned))
    return _LLVMGetCastOpcode__retval


@cython.embedsignature(True)
def LLVMBuildICmp(object arg0, object Op, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Op (`~.LLVMIntPredicate`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    if not isinstance(Op,_LLVMIntPredicate__Base):
        raise TypeError("argument 'Op' must be of type '_LLVMIntPredicate__Base'")
    _LLVMBuildICmp__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildICmp(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),Op.value,
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildICmp__retval._ptr == NULL else _LLVMBuildICmp__retval


@cython.embedsignature(True)
def LLVMBuildFCmp(object arg0, object Op, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Op (`~.LLVMRealPredicate`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    if not isinstance(Op,_LLVMRealPredicate__Base):
        raise TypeError("argument 'Op' must be of type '_LLVMRealPredicate__Base'")
    _LLVMBuildFCmp__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildFCmp(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),Op.value,
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildFCmp__retval._ptr == NULL else _LLVMBuildFCmp__retval


@cython.embedsignature(True)
def LLVMBuildPhi(object arg0, object Ty, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildPhi__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildPhi(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildPhi__retval._ptr == NULL else _LLVMBuildPhi__retval


@cython.embedsignature(True)
def LLVMBuildCall2(object arg0, object arg1, object Fn, object Args, unsigned int NumArgs, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        arg1 (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Fn (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Args (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        NumArgs (`~.int`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildCall2__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildCall2(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(arg1).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Fn).get_element_ptr(),
        <ccore.LLVMValueRef*>rocm.llvm._util.types.Pointer.from_pyobj(Args)._ptr,NumArgs,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildCall2__retval._ptr == NULL else _LLVMBuildCall2__retval


@cython.embedsignature(True)
def LLVMBuildSelect(object arg0, object If, object Then, object Else, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        If (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Then (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Else (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildSelect__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildSelect(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(If).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Then).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Else).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildSelect__retval._ptr == NULL else _LLVMBuildSelect__retval


@cython.embedsignature(True)
def LLVMBuildVAArg(object arg0, object List, object Ty, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        List (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Ty (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildVAArg__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildVAArg(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(List).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(Ty).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildVAArg__retval._ptr == NULL else _LLVMBuildVAArg__retval


@cython.embedsignature(True)
def LLVMBuildExtractElement(object arg0, object VecVal, object Index, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        VecVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Index (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildExtractElement__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildExtractElement(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(VecVal).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Index).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildExtractElement__retval._ptr == NULL else _LLVMBuildExtractElement__retval


@cython.embedsignature(True)
def LLVMBuildInsertElement(object arg0, object VecVal, object EltVal, object Index, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        VecVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        EltVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Index (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildInsertElement__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildInsertElement(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(VecVal).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(EltVal).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Index).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildInsertElement__retval._ptr == NULL else _LLVMBuildInsertElement__retval


@cython.embedsignature(True)
def LLVMBuildShuffleVector(object arg0, object V1, object V2, object Mask, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        V1 (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        V2 (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Mask (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildShuffleVector__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildShuffleVector(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(V1).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(V2).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Mask).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildShuffleVector__retval._ptr == NULL else _LLVMBuildShuffleVector__retval


@cython.embedsignature(True)
def LLVMBuildExtractValue(object arg0, object AggVal, unsigned int Index, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        AggVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Index (`~.int`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildExtractValue__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildExtractValue(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(AggVal).get_element_ptr(),Index,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildExtractValue__retval._ptr == NULL else _LLVMBuildExtractValue__retval


@cython.embedsignature(True)
def LLVMBuildInsertValue(object arg0, object AggVal, object EltVal, unsigned int Index, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        AggVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        EltVal (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Index (`~.int`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildInsertValue__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildInsertValue(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(AggVal).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(EltVal).get_element_ptr(),Index,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildInsertValue__retval._ptr == NULL else _LLVMBuildInsertValue__retval


@cython.embedsignature(True)
def LLVMBuildFreeze(object arg0, object Val, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildFreeze__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildFreeze(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildFreeze__retval._ptr == NULL else _LLVMBuildFreeze__retval


@cython.embedsignature(True)
def LLVMBuildIsNull(object arg0, object Val, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildIsNull__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildIsNull(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildIsNull__retval._ptr == NULL else _LLVMBuildIsNull__retval


@cython.embedsignature(True)
def LLVMBuildIsNotNull(object arg0, object Val, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildIsNotNull__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildIsNotNull(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildIsNotNull__retval._ptr == NULL else _LLVMBuildIsNotNull__retval


@cython.embedsignature(True)
def LLVMBuildPtrDiff2(object arg0, object ElemTy, object LHS, object RHS, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        arg0 (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        ElemTy (`~.LLVMOpaqueType`/`~.object`):
            (undocumented)

        LHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        RHS (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMBuildPtrDiff2__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildPtrDiff2(
        LLVMOpaqueBuilder.from_pyobj(arg0).get_element_ptr(),
        LLVMOpaqueType.from_pyobj(ElemTy).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(LHS).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(RHS).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildPtrDiff2__retval._ptr == NULL else _LLVMBuildPtrDiff2__retval


@cython.embedsignature(True)
def LLVMBuildFence(object B, object ordering, int singleThread, object Name):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        ordering (`~.LLVMAtomicOrdering`):
            (undocumented)

        singleThread (`~.int`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    if not isinstance(ordering,_LLVMAtomicOrdering__Base):
        raise TypeError("argument 'ordering' must be of type '_LLVMAtomicOrdering__Base'")
    _LLVMBuildFence__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildFence(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),ordering.value,singleThread,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))
    return None if _LLVMBuildFence__retval._ptr == NULL else _LLVMBuildFence__retval


@cython.embedsignature(True)
def LLVMBuildAtomicRMW(object B, object op, object PTR, object Val, object ordering, int singleThread):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        op (`~.LLVMAtomicRMWBinOp`):
            (undocumented)

        PTR (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Val (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        ordering (`~.LLVMAtomicOrdering`):
            (undocumented)

        singleThread (`~.int`):
            (undocumented)
    """
    if not isinstance(op,_LLVMAtomicRMWBinOp__Base):
        raise TypeError("argument 'op' must be of type '_LLVMAtomicRMWBinOp__Base'")                    
    if not isinstance(ordering,_LLVMAtomicOrdering__Base):
        raise TypeError("argument 'ordering' must be of type '_LLVMAtomicOrdering__Base'")
    _LLVMBuildAtomicRMW__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildAtomicRMW(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),op.value,
        LLVMOpaqueValue.from_pyobj(PTR).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Val).get_element_ptr(),ordering.value,singleThread))
    return None if _LLVMBuildAtomicRMW__retval._ptr == NULL else _LLVMBuildAtomicRMW__retval


@cython.embedsignature(True)
def LLVMBuildAtomicCmpXchg(object B, object Ptr, object Cmp, object New, object SuccessOrdering, object FailureOrdering, int SingleThread):
    r"""(No short description, might be part of a group.)

    Args:
        B (`~.LLVMOpaqueBuilder`/`~.object`):
            (undocumented)

        Ptr (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Cmp (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        New (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        SuccessOrdering (`~.LLVMAtomicOrdering`):
            (undocumented)

        FailureOrdering (`~.LLVMAtomicOrdering`):
            (undocumented)

        SingleThread (`~.int`):
            (undocumented)
    """
    if not isinstance(SuccessOrdering,_LLVMAtomicOrdering__Base):
        raise TypeError("argument 'SuccessOrdering' must be of type '_LLVMAtomicOrdering__Base'")                    
    if not isinstance(FailureOrdering,_LLVMAtomicOrdering__Base):
        raise TypeError("argument 'FailureOrdering' must be of type '_LLVMAtomicOrdering__Base'")
    _LLVMBuildAtomicCmpXchg__retval = LLVMOpaqueValue.from_ptr(ccore.LLVMBuildAtomicCmpXchg(
        LLVMOpaqueBuilder.from_pyobj(B).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Ptr).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(Cmp).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(New).get_element_ptr(),SuccessOrdering.value,FailureOrdering.value,SingleThread))
    return None if _LLVMBuildAtomicCmpXchg__retval._ptr == NULL else _LLVMBuildAtomicCmpXchg__retval


@cython.embedsignature(True)
def LLVMGetNumMaskElements(object ShuffleVectorInst):
    r"""(No short description, might be part of a group.)

    Get the number of elements in the mask of a ShuffleVector instruction.

    Args:
        ShuffleVectorInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned int _LLVMGetNumMaskElements__retval = ccore.LLVMGetNumMaskElements(
        LLVMOpaqueValue.from_pyobj(ShuffleVectorInst).get_element_ptr())
    return _LLVMGetNumMaskElements__retval


@cython.embedsignature(True)
def LLVMGetUndefMaskElem():
    r"""(No short description, might be part of a group.)

    Returns:
        `~.int`: a constant that specifies that the result of a ``ShuffleVectorInst``
            is undefined.
    """
    cdef int _LLVMGetUndefMaskElem__retval = ccore.LLVMGetUndefMaskElem()
    return _LLVMGetUndefMaskElem__retval


@cython.embedsignature(True)
def LLVMGetMaskValue(object ShuffleVectorInst, unsigned int Elt):
    r"""(No short description, might be part of a group.)

    Get the mask value at position Elt in the mask of a ShuffleVector
    instruction.

    \Returns the result of ``LLVMGetUndefMaskElem()`` if the mask value is undef
    at that position.

    Args:
        ShuffleVectorInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Elt (`~.int`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMGetMaskValue__retval = ccore.LLVMGetMaskValue(
        LLVMOpaqueValue.from_pyobj(ShuffleVectorInst).get_element_ptr(),Elt)
    return _LLVMGetMaskValue__retval


@cython.embedsignature(True)
def LLVMIsAtomicSingleThread(object AtomicInst):
    r"""(No short description, might be part of a group.)

    Args:
        AtomicInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsAtomicSingleThread__retval = ccore.LLVMIsAtomicSingleThread(
        LLVMOpaqueValue.from_pyobj(AtomicInst).get_element_ptr())
    return _LLVMIsAtomicSingleThread__retval


@cython.embedsignature(True)
def LLVMSetAtomicSingleThread(object AtomicInst, int SingleThread):
    r"""(No short description, might be part of a group.)

    Args:
        AtomicInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        SingleThread (`~.int`):
            (undocumented)
    """
    ccore.LLVMSetAtomicSingleThread(
        LLVMOpaqueValue.from_pyobj(AtomicInst).get_element_ptr(),SingleThread)


@cython.embedsignature(True)
def LLVMGetCmpXchgSuccessOrdering(object CmpXchgInst):
    r"""(No short description, might be part of a group.)

    Args:
        CmpXchgInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.LLVMAtomicOrdering`
    """
    _LLVMGetCmpXchgSuccessOrdering__retval = LLVMAtomicOrdering(ccore.LLVMGetCmpXchgSuccessOrdering(
        LLVMOpaqueValue.from_pyobj(CmpXchgInst).get_element_ptr()))
    return _LLVMGetCmpXchgSuccessOrdering__retval


@cython.embedsignature(True)
def LLVMSetCmpXchgSuccessOrdering(object CmpXchgInst, object Ordering):
    r"""(No short description, might be part of a group.)

    Args:
        CmpXchgInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Ordering (`~.LLVMAtomicOrdering`):
            (undocumented)
    """
    if not isinstance(Ordering,_LLVMAtomicOrdering__Base):
        raise TypeError("argument 'Ordering' must be of type '_LLVMAtomicOrdering__Base'")
    ccore.LLVMSetCmpXchgSuccessOrdering(
        LLVMOpaqueValue.from_pyobj(CmpXchgInst).get_element_ptr(),Ordering.value)


@cython.embedsignature(True)
def LLVMGetCmpXchgFailureOrdering(object CmpXchgInst):
    r"""(No short description, might be part of a group.)

    Args:
        CmpXchgInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.LLVMAtomicOrdering`
    """
    _LLVMGetCmpXchgFailureOrdering__retval = LLVMAtomicOrdering(ccore.LLVMGetCmpXchgFailureOrdering(
        LLVMOpaqueValue.from_pyobj(CmpXchgInst).get_element_ptr()))
    return _LLVMGetCmpXchgFailureOrdering__retval


@cython.embedsignature(True)
def LLVMSetCmpXchgFailureOrdering(object CmpXchgInst, object Ordering):
    r"""(No short description, might be part of a group.)

    Args:
        CmpXchgInst (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

        Ordering (`~.LLVMAtomicOrdering`):
            (undocumented)
    """
    if not isinstance(Ordering,_LLVMAtomicOrdering__Base):
        raise TypeError("argument 'Ordering' must be of type '_LLVMAtomicOrdering__Base'")
    ccore.LLVMSetCmpXchgFailureOrdering(
        LLVMOpaqueValue.from_pyobj(CmpXchgInst).get_element_ptr(),Ordering.value)


@cython.embedsignature(True)
def LLVMCreateModuleProviderForExistingModule(object M):
    r"""(No short description, might be part of a group.)

    Changes the type of M so it can be passed to FunctionPassManagers and the
    JIT.  They take ModuleProviders for historical reasons.

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)
    """
    _LLVMCreateModuleProviderForExistingModule__retval = LLVMOpaqueModuleProvider.from_ptr(ccore.LLVMCreateModuleProviderForExistingModule(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMCreateModuleProviderForExistingModule__retval._ptr == NULL else _LLVMCreateModuleProviderForExistingModule__retval


@cython.embedsignature(True)
def LLVMDisposeModuleProvider(object M):
    r"""(No short description, might be part of a group.)

    Destroys the module M.

    Args:
        M (`~.LLVMOpaqueModuleProvider`/`~.object`):
            (undocumented)
    """
    ccore.LLVMDisposeModuleProvider(
        LLVMOpaqueModuleProvider.from_pyobj(M).get_element_ptr())


@cython.embedsignature(True)
def LLVMCreateMemoryBufferWithContentsOfFile(object Path):
    r"""(No short description, might be part of a group.)

    @{

    Args:
        Path (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

    Returns:
        A `~.tuple` of size 3 that contains (in that order):

        * `~.int`
        * OutMemBuf (`~.LLVMOpaqueMemoryBuffer`):
            (undocumented)
        * OutMessage (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    OutMemBuf = LLVMOpaqueMemoryBuffer.from_ptr(NULL)
    OutMessage = rocm.llvm._util.types.CStr.from_ptr(NULL)
    cdef int _LLVMCreateMemoryBufferWithContentsOfFile__retval = ccore.LLVMCreateMemoryBufferWithContentsOfFile(
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Path)._ptr,<ccore.LLVMOpaqueMemoryBuffer**>&OutMemBuf._ptr,
        <char **>&OutMessage._ptr)
    return (_LLVMCreateMemoryBufferWithContentsOfFile__retval,None if OutMemBuf._ptr == NULL else OutMemBuf,None if OutMessage._ptr == NULL else OutMessage)


@cython.embedsignature(True)
def LLVMCreateMemoryBufferWithSTDIN():
    r"""(No short description, might be part of a group.)

    Returns:
        A `~.tuple` of size 3 that contains (in that order):

        * `~.int`
        * OutMemBuf (`~.LLVMOpaqueMemoryBuffer`):
            (undocumented)
        * OutMessage (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    OutMemBuf = LLVMOpaqueMemoryBuffer.from_ptr(NULL)
    OutMessage = rocm.llvm._util.types.CStr.from_ptr(NULL)
    cdef int _LLVMCreateMemoryBufferWithSTDIN__retval = ccore.LLVMCreateMemoryBufferWithSTDIN(<ccore.LLVMOpaqueMemoryBuffer**>&OutMemBuf._ptr,
        <char **>&OutMessage._ptr)
    return (_LLVMCreateMemoryBufferWithSTDIN__retval,None if OutMemBuf._ptr == NULL else OutMemBuf,None if OutMessage._ptr == NULL else OutMessage)


@cython.embedsignature(True)
def LLVMCreateMemoryBufferWithMemoryRange(object InputData, unsigned long InputDataLength, object BufferName, int RequiresNullTerminator):
    r"""(No short description, might be part of a group.)

    Args:
        InputData (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        InputDataLength (`~.int`):
            (undocumented)

        BufferName (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        RequiresNullTerminator (`~.int`):
            (undocumented)
    """
    _LLVMCreateMemoryBufferWithMemoryRange__retval = LLVMOpaqueMemoryBuffer.from_ptr(ccore.LLVMCreateMemoryBufferWithMemoryRange(
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(InputData)._ptr,InputDataLength,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(BufferName)._ptr,RequiresNullTerminator))
    return None if _LLVMCreateMemoryBufferWithMemoryRange__retval._ptr == NULL else _LLVMCreateMemoryBufferWithMemoryRange__retval


@cython.embedsignature(True)
def LLVMCreateMemoryBufferWithMemoryRangeCopy(object InputData, unsigned long InputDataLength, object BufferName):
    r"""(No short description, might be part of a group.)

    Args:
        InputData (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)

        InputDataLength (`~.int`):
            (undocumented)

        BufferName (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMCreateMemoryBufferWithMemoryRangeCopy__retval = LLVMOpaqueMemoryBuffer.from_ptr(ccore.LLVMCreateMemoryBufferWithMemoryRangeCopy(
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(InputData)._ptr,InputDataLength,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(BufferName)._ptr))
    return None if _LLVMCreateMemoryBufferWithMemoryRangeCopy__retval._ptr == NULL else _LLVMCreateMemoryBufferWithMemoryRangeCopy__retval


@cython.embedsignature(True)
def LLVMGetBufferStart(object MemBuf):
    r"""(No short description, might be part of a group.)

    Args:
        MemBuf (`~.LLVMOpaqueMemoryBuffer`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMGetBufferStart__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>ccore.LLVMGetBufferStart(
        LLVMOpaqueMemoryBuffer.from_pyobj(MemBuf).get_element_ptr()))
    return None if _LLVMGetBufferStart__retval._ptr == NULL else _LLVMGetBufferStart__retval


@cython.embedsignature(True)
def LLVMGetBufferSize(object MemBuf):
    r"""(No short description, might be part of a group.)

    Args:
        MemBuf (`~.LLVMOpaqueMemoryBuffer`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned long _LLVMGetBufferSize__retval = ccore.LLVMGetBufferSize(
        LLVMOpaqueMemoryBuffer.from_pyobj(MemBuf).get_element_ptr())
    return _LLVMGetBufferSize__retval


@cython.embedsignature(True)
def LLVMDisposeMemoryBuffer(object MemBuf):
    r"""(No short description, might be part of a group.)

    Args:
        MemBuf (`~.LLVMOpaqueMemoryBuffer`/`~.object`):
            (undocumented)
    """
    ccore.LLVMDisposeMemoryBuffer(
        LLVMOpaqueMemoryBuffer.from_pyobj(MemBuf).get_element_ptr())


@cython.embedsignature(True)
def LLVMGetGlobalPassRegistry():
    r"""(No short description, might be part of a group.)

    Return the global pass registry, for use with initialization functions.

    See:
        `~.llvm``~.`~.PassRegistry`.`~.getPassRegistry``
    """
    _LLVMGetGlobalPassRegistry__retval = LLVMOpaquePassRegistry.from_ptr(ccore.LLVMGetGlobalPassRegistry())
    return None if _LLVMGetGlobalPassRegistry__retval._ptr == NULL else _LLVMGetGlobalPassRegistry__retval


@cython.embedsignature(True)
def LLVMCreatePassManager():
    r"""(No short description, might be part of a group.)

    Constructs a new whole-module pass pipeline. This type of pipeline is
    suitable for link-time optimization and whole-module transformations.

    See:
        `~.llvm``~.`~.PassManager`.`~.PassManager``
    """
    _LLVMCreatePassManager__retval = LLVMOpaquePassManager.from_ptr(ccore.LLVMCreatePassManager())
    return None if _LLVMCreatePassManager__retval._ptr == NULL else _LLVMCreatePassManager__retval


@cython.embedsignature(True)
def LLVMCreateFunctionPassManagerForModule(object M):
    r"""(No short description, might be part of a group.)

    Constructs a new function-by-function pass pipeline over the module
    provider. It does not take ownership of the module provider. This type of
    pipeline is suitable for code generation and JIT compilation tasks.

    See:
        `~.llvm``~.`~.FunctionPassManager`.`~.FunctionPassManager``

    Args:
        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)
    """
    _LLVMCreateFunctionPassManagerForModule__retval = LLVMOpaquePassManager.from_ptr(ccore.LLVMCreateFunctionPassManagerForModule(
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr()))
    return None if _LLVMCreateFunctionPassManagerForModule__retval._ptr == NULL else _LLVMCreateFunctionPassManagerForModule__retval


@cython.embedsignature(True)
def LLVMCreateFunctionPassManager(object MP):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMCreateFunctionPassManagerForModule instead. */

    Args:
        MP (`~.LLVMOpaqueModuleProvider`/`~.object`):
            (undocumented)
    """
    _LLVMCreateFunctionPassManager__retval = LLVMOpaquePassManager.from_ptr(ccore.LLVMCreateFunctionPassManager(
        LLVMOpaqueModuleProvider.from_pyobj(MP).get_element_ptr()))
    return None if _LLVMCreateFunctionPassManager__retval._ptr == NULL else _LLVMCreateFunctionPassManager__retval


@cython.embedsignature(True)
def LLVMRunPassManager(object PM, object M):
    r"""(No short description, might be part of a group.)

    Initializes, executes on the provided module, and finalizes all of the
    passes scheduled in the pass manager. Returns 1 if any of the passes
    modified the module, 0 otherwise.

    See:
        `~.llvm``~.`~.PassManager`.`~.run``(`~.Module`&)

    Args:
        PM (`~.LLVMOpaquePassManager`/`~.object`):
            (undocumented)

        M (`~.LLVMOpaqueModule`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMRunPassManager__retval = ccore.LLVMRunPassManager(
        LLVMOpaquePassManager.from_pyobj(PM).get_element_ptr(),
        LLVMOpaqueModule.from_pyobj(M).get_element_ptr())
    return _LLVMRunPassManager__retval


@cython.embedsignature(True)
def LLVMInitializeFunctionPassManager(object FPM):
    r"""(No short description, might be part of a group.)

    Initializes all of the function passes scheduled in the function pass
    manager. Returns 1 if any of the passes modified the module, 0 otherwise.

    See:
        `~.llvm``~.`~.FunctionPassManager`.`~.doInitialization``

    Args:
        FPM (`~.LLVMOpaquePassManager`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMInitializeFunctionPassManager__retval = ccore.LLVMInitializeFunctionPassManager(
        LLVMOpaquePassManager.from_pyobj(FPM).get_element_ptr())
    return _LLVMInitializeFunctionPassManager__retval


@cython.embedsignature(True)
def LLVMRunFunctionPassManager(object FPM, object F):
    r"""(No short description, might be part of a group.)

    Executes all of the function passes scheduled in the function pass manager
    on the provided function. Returns 1 if any of the passes modified the
    function, false otherwise.

    See:
        `~.llvm``~.`~.FunctionPassManager`.`~.run``(`~.Function`&)

    Args:
        FPM (`~.LLVMOpaquePassManager`/`~.object`):
            (undocumented)

        F (`~.LLVMOpaqueValue`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMRunFunctionPassManager__retval = ccore.LLVMRunFunctionPassManager(
        LLVMOpaquePassManager.from_pyobj(FPM).get_element_ptr(),
        LLVMOpaqueValue.from_pyobj(F).get_element_ptr())
    return _LLVMRunFunctionPassManager__retval


@cython.embedsignature(True)
def LLVMFinalizeFunctionPassManager(object FPM):
    r"""(No short description, might be part of a group.)

    Finalizes all of the function passes scheduled in the function pass
    manager. Returns 1 if any of the passes modified the module, 0 otherwise.

    See:
        `~.llvm``~.`~.FunctionPassManager`.`~.doFinalization``

    Args:
        FPM (`~.LLVMOpaquePassManager`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMFinalizeFunctionPassManager__retval = ccore.LLVMFinalizeFunctionPassManager(
        LLVMOpaquePassManager.from_pyobj(FPM).get_element_ptr())
    return _LLVMFinalizeFunctionPassManager__retval


@cython.embedsignature(True)
def LLVMDisposePassManager(object PM):
    r"""(No short description, might be part of a group.)

    Frees the memory of a pass pipeline. For function pipelines, does not free
    the module provider.

    See:
        `~.llvm``~.`~.PassManagerBase`.`~`~.PassManagerBase`.

    Args:
        PM (`~.LLVMOpaquePassManager`/`~.object`):
            (undocumented)
    """
    ccore.LLVMDisposePassManager(
        LLVMOpaquePassManager.from_pyobj(PM).get_element_ptr())


@cython.embedsignature(True)
def LLVMStartMultithreaded():
    r"""(No short description, might be part of a group.)

    Deprecated: Multi-threading can only be enabled/disabled with the compile
    time define LLVM_ENABLE_THREADS.  This function always returns
    LLVMIsMultithreaded().

    Returns:
        `~.int`
    """
    cdef int _LLVMStartMultithreaded__retval = ccore.LLVMStartMultithreaded()
    return _LLVMStartMultithreaded__retval


@cython.embedsignature(True)
def LLVMStopMultithreaded():
    r"""(No short description, might be part of a group.)

    Deprecated: Multi-threading can only be enabled/disabled with the compile
    time define LLVM_ENABLE_THREADS.
    """
    ccore.LLVMStopMultithreaded()


@cython.embedsignature(True)
def LLVMIsMultithreaded():
    r"""(No short description, might be part of a group.)

    Check whether LLVM is executing in thread-safe mode or not.

    See:
        `~.llvm``~.`~.llvm_is_multithreaded``

    Returns:
        `~.int`
    """
    cdef int _LLVMIsMultithreaded__retval = ccore.LLVMIsMultithreaded()
    return _LLVMIsMultithreaded__retval

__all__ = [
    "_LLVMOpcode__Base",
    "LLVMOpcode",
    "_LLVMTypeKind__Base",
    "LLVMTypeKind",
    "_LLVMLinkage__Base",
    "LLVMLinkage",
    "_LLVMVisibility__Base",
    "LLVMVisibility",
    "_LLVMUnnamedAddr__Base",
    "LLVMUnnamedAddr",
    "_LLVMDLLStorageClass__Base",
    "LLVMDLLStorageClass",
    "_LLVMCallConv__Base",
    "LLVMCallConv",
    "_LLVMValueKind__Base",
    "LLVMValueKind",
    "_LLVMIntPredicate__Base",
    "LLVMIntPredicate",
    "_LLVMRealPredicate__Base",
    "LLVMRealPredicate",
    "_LLVMLandingPadClauseTy__Base",
    "LLVMLandingPadClauseTy",
    "_LLVMThreadLocalMode__Base",
    "LLVMThreadLocalMode",
    "_LLVMAtomicOrdering__Base",
    "LLVMAtomicOrdering",
    "_LLVMAtomicRMWBinOp__Base",
    "LLVMAtomicRMWBinOp",
    "_LLVMDiagnosticSeverity__Base",
    "LLVMDiagnosticSeverity",
    "_LLVMInlineAsmDialect__Base",
    "LLVMInlineAsmDialect",
    "_LLVMModuleFlagBehavior__Base",
    "LLVMModuleFlagBehavior",
    "LLVMInitializeCore",
    "LLVMShutdown",
    "LLVMGetVersion",
    "LLVMCreateMessage",
    "LLVMDisposeMessage",
    "LLVMDiagnosticHandler",
    "LLVMYieldCallback",
    "LLVMContextCreate",
    "LLVMGetGlobalContext",
    "LLVMContextSetDiagnosticHandler",
    "LLVMContextGetDiagnosticHandler",
    "LLVMContextGetDiagnosticContext",
    "LLVMContextSetYieldCallback",
    "LLVMContextShouldDiscardValueNames",
    "LLVMContextSetDiscardValueNames",
    "LLVMContextSetOpaquePointers",
    "LLVMContextDispose",
    "LLVMGetDiagInfoDescription",
    "LLVMGetDiagInfoSeverity",
    "LLVMGetMDKindIDInContext",
    "LLVMGetMDKindID",
    "LLVMGetEnumAttributeKindForName",
    "LLVMGetLastEnumAttributeKind",
    "LLVMCreateEnumAttribute",
    "LLVMGetEnumAttributeKind",
    "LLVMGetEnumAttributeValue",
    "LLVMCreateTypeAttribute",
    "LLVMGetTypeAttributeValue",
    "LLVMCreateStringAttribute",
    "LLVMGetStringAttributeKind",
    "LLVMGetStringAttributeValue",
    "LLVMIsEnumAttribute",
    "LLVMIsStringAttribute",
    "LLVMIsTypeAttribute",
    "LLVMGetTypeByName2",
    "LLVMModuleCreateWithName",
    "LLVMModuleCreateWithNameInContext",
    "LLVMCloneModule",
    "LLVMDisposeModule",
    "LLVMGetModuleIdentifier",
    "LLVMSetModuleIdentifier",
    "LLVMGetSourceFileName",
    "LLVMSetSourceFileName",
    "LLVMGetDataLayoutStr",
    "LLVMGetDataLayout",
    "LLVMSetDataLayout",
    "LLVMGetTarget",
    "LLVMSetTarget",
    "LLVMCopyModuleFlagsMetadata",
    "LLVMDisposeModuleFlagsMetadata",
    "LLVMModuleFlagEntriesGetFlagBehavior",
    "LLVMModuleFlagEntriesGetKey",
    "LLVMModuleFlagEntriesGetMetadata",
    "LLVMGetModuleFlag",
    "LLVMAddModuleFlag",
    "LLVMDumpModule",
    "LLVMPrintModuleToFile",
    "LLVMPrintModuleToString",
    "LLVMGetModuleInlineAsm",
    "LLVMSetModuleInlineAsm2",
    "LLVMAppendModuleInlineAsm",
    "LLVMGetInlineAsm",
    "LLVMGetModuleContext",
    "LLVMGetTypeByName",
    "LLVMGetFirstNamedMetadata",
    "LLVMGetLastNamedMetadata",
    "LLVMGetNextNamedMetadata",
    "LLVMGetPreviousNamedMetadata",
    "LLVMGetNamedMetadata",
    "LLVMGetOrInsertNamedMetadata",
    "LLVMGetNamedMetadataName",
    "LLVMGetNamedMetadataNumOperands",
    "LLVMGetNamedMetadataOperands",
    "LLVMAddNamedMetadataOperand",
    "LLVMGetDebugLocDirectory",
    "LLVMGetDebugLocFilename",
    "LLVMGetDebugLocLine",
    "LLVMGetDebugLocColumn",
    "LLVMAddFunction",
    "LLVMGetNamedFunction",
    "LLVMGetFirstFunction",
    "LLVMGetLastFunction",
    "LLVMGetNextFunction",
    "LLVMGetPreviousFunction",
    "LLVMSetModuleInlineAsm",
    "LLVMGetTypeKind",
    "LLVMTypeIsSized",
    "LLVMGetTypeContext",
    "LLVMDumpType",
    "LLVMPrintTypeToString",
    "LLVMInt1TypeInContext",
    "LLVMInt8TypeInContext",
    "LLVMInt16TypeInContext",
    "LLVMInt32TypeInContext",
    "LLVMInt64TypeInContext",
    "LLVMInt128TypeInContext",
    "LLVMIntTypeInContext",
    "LLVMInt1Type",
    "LLVMInt8Type",
    "LLVMInt16Type",
    "LLVMInt32Type",
    "LLVMInt64Type",
    "LLVMInt128Type",
    "LLVMIntType",
    "LLVMGetIntTypeWidth",
    "LLVMHalfTypeInContext",
    "LLVMBFloatTypeInContext",
    "LLVMFloatTypeInContext",
    "LLVMDoubleTypeInContext",
    "LLVMX86FP80TypeInContext",
    "LLVMFP128TypeInContext",
    "LLVMPPCFP128TypeInContext",
    "LLVMHalfType",
    "LLVMBFloatType",
    "LLVMFloatType",
    "LLVMDoubleType",
    "LLVMX86FP80Type",
    "LLVMFP128Type",
    "LLVMPPCFP128Type",
    "LLVMFunctionType",
    "LLVMIsFunctionVarArg",
    "LLVMGetReturnType",
    "LLVMCountParamTypes",
    "LLVMGetParamTypes",
    "LLVMStructTypeInContext",
    "LLVMStructType",
    "LLVMStructCreateNamed",
    "LLVMGetStructName",
    "LLVMStructSetBody",
    "LLVMCountStructElementTypes",
    "LLVMGetStructElementTypes",
    "LLVMStructGetTypeAtIndex",
    "LLVMIsPackedStruct",
    "LLVMIsOpaqueStruct",
    "LLVMIsLiteralStruct",
    "LLVMGetElementType",
    "LLVMGetSubtypes",
    "LLVMGetNumContainedTypes",
    "LLVMArrayType",
    "LLVMGetArrayLength",
    "LLVMPointerType",
    "LLVMPointerTypeIsOpaque",
    "LLVMPointerTypeInContext",
    "LLVMGetPointerAddressSpace",
    "LLVMVectorType",
    "LLVMScalableVectorType",
    "LLVMGetVectorSize",
    "LLVMVoidTypeInContext",
    "LLVMLabelTypeInContext",
    "LLVMX86MMXTypeInContext",
    "LLVMX86AMXTypeInContext",
    "LLVMTokenTypeInContext",
    "LLVMMetadataTypeInContext",
    "LLVMVoidType",
    "LLVMLabelType",
    "LLVMX86MMXType",
    "LLVMX86AMXType",
    "LLVMTargetExtTypeInContext",
    "LLVMTypeOf",
    "LLVMGetValueKind",
    "LLVMGetValueName2",
    "LLVMSetValueName2",
    "LLVMDumpValue",
    "LLVMPrintValueToString",
    "LLVMReplaceAllUsesWith",
    "LLVMIsConstant",
    "LLVMIsUndef",
    "LLVMIsPoison",
    "LLVMIsAArgument",
    "LLVMIsABasicBlock",
    "LLVMIsAInlineAsm",
    "LLVMIsAUser",
    "LLVMIsAConstant",
    "LLVMIsABlockAddress",
    "LLVMIsAConstantAggregateZero",
    "LLVMIsAConstantArray",
    "LLVMIsAConstantDataSequential",
    "LLVMIsAConstantDataArray",
    "LLVMIsAConstantDataVector",
    "LLVMIsAConstantExpr",
    "LLVMIsAConstantFP",
    "LLVMIsAConstantInt",
    "LLVMIsAConstantPointerNull",
    "LLVMIsAConstantStruct",
    "LLVMIsAConstantTokenNone",
    "LLVMIsAConstantVector",
    "LLVMIsAGlobalValue",
    "LLVMIsAGlobalAlias",
    "LLVMIsAGlobalObject",
    "LLVMIsAFunction",
    "LLVMIsAGlobalVariable",
    "LLVMIsAGlobalIFunc",
    "LLVMIsAUndefValue",
    "LLVMIsAPoisonValue",
    "LLVMIsAInstruction",
    "LLVMIsAUnaryOperator",
    "LLVMIsABinaryOperator",
    "LLVMIsACallInst",
    "LLVMIsAIntrinsicInst",
    "LLVMIsADbgInfoIntrinsic",
    "LLVMIsADbgVariableIntrinsic",
    "LLVMIsADbgDeclareInst",
    "LLVMIsADbgLabelInst",
    "LLVMIsAMemIntrinsic",
    "LLVMIsAMemCpyInst",
    "LLVMIsAMemMoveInst",
    "LLVMIsAMemSetInst",
    "LLVMIsACmpInst",
    "LLVMIsAFCmpInst",
    "LLVMIsAICmpInst",
    "LLVMIsAExtractElementInst",
    "LLVMIsAGetElementPtrInst",
    "LLVMIsAInsertElementInst",
    "LLVMIsAInsertValueInst",
    "LLVMIsALandingPadInst",
    "LLVMIsAPHINode",
    "LLVMIsASelectInst",
    "LLVMIsAShuffleVectorInst",
    "LLVMIsAStoreInst",
    "LLVMIsABranchInst",
    "LLVMIsAIndirectBrInst",
    "LLVMIsAInvokeInst",
    "LLVMIsAReturnInst",
    "LLVMIsASwitchInst",
    "LLVMIsAUnreachableInst",
    "LLVMIsAResumeInst",
    "LLVMIsACleanupReturnInst",
    "LLVMIsACatchReturnInst",
    "LLVMIsACatchSwitchInst",
    "LLVMIsACallBrInst",
    "LLVMIsAFuncletPadInst",
    "LLVMIsACatchPadInst",
    "LLVMIsACleanupPadInst",
    "LLVMIsAUnaryInstruction",
    "LLVMIsAAllocaInst",
    "LLVMIsACastInst",
    "LLVMIsAAddrSpaceCastInst",
    "LLVMIsABitCastInst",
    "LLVMIsAFPExtInst",
    "LLVMIsAFPToSIInst",
    "LLVMIsAFPToUIInst",
    "LLVMIsAFPTruncInst",
    "LLVMIsAIntToPtrInst",
    "LLVMIsAPtrToIntInst",
    "LLVMIsASExtInst",
    "LLVMIsASIToFPInst",
    "LLVMIsATruncInst",
    "LLVMIsAUIToFPInst",
    "LLVMIsAZExtInst",
    "LLVMIsAExtractValueInst",
    "LLVMIsALoadInst",
    "LLVMIsAVAArgInst",
    "LLVMIsAFreezeInst",
    "LLVMIsAAtomicCmpXchgInst",
    "LLVMIsAAtomicRMWInst",
    "LLVMIsAFenceInst",
    "LLVMIsAMDNode",
    "LLVMIsAMDString",
    "LLVMGetValueName",
    "LLVMSetValueName",
    "LLVMGetFirstUse",
    "LLVMGetNextUse",
    "LLVMGetUser",
    "LLVMGetUsedValue",
    "LLVMGetOperand",
    "LLVMGetOperandUse",
    "LLVMSetOperand",
    "LLVMGetNumOperands",
    "LLVMConstNull",
    "LLVMConstAllOnes",
    "LLVMGetUndef",
    "LLVMGetPoison",
    "LLVMIsNull",
    "LLVMConstPointerNull",
    "LLVMConstInt",
    "LLVMConstIntOfArbitraryPrecision",
    "LLVMConstIntOfString",
    "LLVMConstIntOfStringAndSize",
    "LLVMConstReal",
    "LLVMConstRealOfString",
    "LLVMConstRealOfStringAndSize",
    "LLVMConstIntGetZExtValue",
    "LLVMConstIntGetSExtValue",
    "LLVMConstRealGetDouble",
    "LLVMConstStringInContext",
    "LLVMConstString",
    "LLVMIsConstantString",
    "LLVMGetAsString",
    "LLVMConstStructInContext",
    "LLVMConstStruct",
    "LLVMConstArray",
    "LLVMConstNamedStruct",
    "LLVMGetAggregateElement",
    "LLVMGetElementAsConstant",
    "LLVMConstVector",
    "LLVMGetConstOpcode",
    "LLVMAlignOf",
    "LLVMSizeOf",
    "LLVMConstNeg",
    "LLVMConstNSWNeg",
    "LLVMConstNUWNeg",
    "LLVMConstNot",
    "LLVMConstAdd",
    "LLVMConstNSWAdd",
    "LLVMConstNUWAdd",
    "LLVMConstSub",
    "LLVMConstNSWSub",
    "LLVMConstNUWSub",
    "LLVMConstMul",
    "LLVMConstNSWMul",
    "LLVMConstNUWMul",
    "LLVMConstAnd",
    "LLVMConstOr",
    "LLVMConstXor",
    "LLVMConstICmp",
    "LLVMConstFCmp",
    "LLVMConstShl",
    "LLVMConstLShr",
    "LLVMConstAShr",
    "LLVMConstGEP2",
    "LLVMConstInBoundsGEP2",
    "LLVMConstTrunc",
    "LLVMConstSExt",
    "LLVMConstZExt",
    "LLVMConstFPTrunc",
    "LLVMConstFPExt",
    "LLVMConstUIToFP",
    "LLVMConstSIToFP",
    "LLVMConstFPToUI",
    "LLVMConstFPToSI",
    "LLVMConstPtrToInt",
    "LLVMConstIntToPtr",
    "LLVMConstBitCast",
    "LLVMConstAddrSpaceCast",
    "LLVMConstZExtOrBitCast",
    "LLVMConstSExtOrBitCast",
    "LLVMConstTruncOrBitCast",
    "LLVMConstPointerCast",
    "LLVMConstIntCast",
    "LLVMConstFPCast",
    "LLVMConstSelect",
    "LLVMConstExtractElement",
    "LLVMConstInsertElement",
    "LLVMConstShuffleVector",
    "LLVMBlockAddress",
    "LLVMConstInlineAsm",
    "LLVMGetGlobalParent",
    "LLVMIsDeclaration",
    "LLVMGetLinkage",
    "LLVMSetLinkage",
    "LLVMGetSection",
    "LLVMSetSection",
    "LLVMGetVisibility",
    "LLVMSetVisibility",
    "LLVMGetDLLStorageClass",
    "LLVMSetDLLStorageClass",
    "LLVMGetUnnamedAddress",
    "LLVMSetUnnamedAddress",
    "LLVMGlobalGetValueType",
    "LLVMHasUnnamedAddr",
    "LLVMSetUnnamedAddr",
    "LLVMGetAlignment",
    "LLVMSetAlignment",
    "LLVMGlobalSetMetadata",
    "LLVMGlobalEraseMetadata",
    "LLVMGlobalClearMetadata",
    "LLVMGlobalCopyAllMetadata",
    "LLVMDisposeValueMetadataEntries",
    "LLVMValueMetadataEntriesGetKind",
    "LLVMValueMetadataEntriesGetMetadata",
    "LLVMAddGlobal",
    "LLVMAddGlobalInAddressSpace",
    "LLVMGetNamedGlobal",
    "LLVMGetFirstGlobal",
    "LLVMGetLastGlobal",
    "LLVMGetNextGlobal",
    "LLVMGetPreviousGlobal",
    "LLVMDeleteGlobal",
    "LLVMGetInitializer",
    "LLVMSetInitializer",
    "LLVMIsThreadLocal",
    "LLVMSetThreadLocal",
    "LLVMIsGlobalConstant",
    "LLVMSetGlobalConstant",
    "LLVMGetThreadLocalMode",
    "LLVMSetThreadLocalMode",
    "LLVMIsExternallyInitialized",
    "LLVMSetExternallyInitialized",
    "LLVMAddAlias2",
    "LLVMGetNamedGlobalAlias",
    "LLVMGetFirstGlobalAlias",
    "LLVMGetLastGlobalAlias",
    "LLVMGetNextGlobalAlias",
    "LLVMGetPreviousGlobalAlias",
    "LLVMAliasGetAliasee",
    "LLVMAliasSetAliasee",
    "LLVMDeleteFunction",
    "LLVMHasPersonalityFn",
    "LLVMGetPersonalityFn",
    "LLVMSetPersonalityFn",
    "LLVMLookupIntrinsicID",
    "LLVMGetIntrinsicID",
    "LLVMGetIntrinsicDeclaration",
    "LLVMIntrinsicGetType",
    "LLVMIntrinsicGetName",
    "LLVMIntrinsicCopyOverloadedName",
    "LLVMIntrinsicCopyOverloadedName2",
    "LLVMIntrinsicIsOverloaded",
    "LLVMGetFunctionCallConv",
    "LLVMSetFunctionCallConv",
    "LLVMGetGC",
    "LLVMSetGC",
    "LLVMAddAttributeAtIndex",
    "LLVMGetAttributeCountAtIndex",
    "LLVMGetAttributesAtIndex",
    "LLVMGetEnumAttributeAtIndex",
    "LLVMGetStringAttributeAtIndex",
    "LLVMRemoveEnumAttributeAtIndex",
    "LLVMRemoveStringAttributeAtIndex",
    "LLVMAddTargetDependentFunctionAttr",
    "LLVMCountParams",
    "LLVMGetParams",
    "LLVMGetParam",
    "LLVMGetParamParent",
    "LLVMGetFirstParam",
    "LLVMGetLastParam",
    "LLVMGetNextParam",
    "LLVMGetPreviousParam",
    "LLVMSetParamAlignment",
    "LLVMAddGlobalIFunc",
    "LLVMGetNamedGlobalIFunc",
    "LLVMGetFirstGlobalIFunc",
    "LLVMGetLastGlobalIFunc",
    "LLVMGetNextGlobalIFunc",
    "LLVMGetPreviousGlobalIFunc",
    "LLVMGetGlobalIFuncResolver",
    "LLVMSetGlobalIFuncResolver",
    "LLVMEraseGlobalIFunc",
    "LLVMRemoveGlobalIFunc",
    "LLVMMDStringInContext2",
    "LLVMMDNodeInContext2",
    "LLVMMetadataAsValue",
    "LLVMValueAsMetadata",
    "LLVMGetMDString",
    "LLVMGetMDNodeNumOperands",
    "LLVMGetMDNodeOperands",
    "LLVMMDStringInContext",
    "LLVMMDString",
    "LLVMMDNodeInContext",
    "LLVMMDNode",
    "LLVMBasicBlockAsValue",
    "LLVMValueIsBasicBlock",
    "LLVMValueAsBasicBlock",
    "LLVMGetBasicBlockName",
    "LLVMGetBasicBlockParent",
    "LLVMGetBasicBlockTerminator",
    "LLVMCountBasicBlocks",
    "LLVMGetBasicBlocks",
    "LLVMGetFirstBasicBlock",
    "LLVMGetLastBasicBlock",
    "LLVMGetNextBasicBlock",
    "LLVMGetPreviousBasicBlock",
    "LLVMGetEntryBasicBlock",
    "LLVMInsertExistingBasicBlockAfterInsertBlock",
    "LLVMAppendExistingBasicBlock",
    "LLVMCreateBasicBlockInContext",
    "LLVMAppendBasicBlockInContext",
    "LLVMAppendBasicBlock",
    "LLVMInsertBasicBlockInContext",
    "LLVMInsertBasicBlock",
    "LLVMDeleteBasicBlock",
    "LLVMRemoveBasicBlockFromParent",
    "LLVMMoveBasicBlockBefore",
    "LLVMMoveBasicBlockAfter",
    "LLVMGetFirstInstruction",
    "LLVMGetLastInstruction",
    "LLVMHasMetadata",
    "LLVMGetMetadata",
    "LLVMSetMetadata",
    "LLVMInstructionGetAllMetadataOtherThanDebugLoc",
    "LLVMGetInstructionParent",
    "LLVMGetNextInstruction",
    "LLVMGetPreviousInstruction",
    "LLVMInstructionRemoveFromParent",
    "LLVMInstructionEraseFromParent",
    "LLVMDeleteInstruction",
    "LLVMGetInstructionOpcode",
    "LLVMGetICmpPredicate",
    "LLVMGetFCmpPredicate",
    "LLVMInstructionClone",
    "LLVMIsATerminatorInst",
    "LLVMGetNumArgOperands",
    "LLVMSetInstructionCallConv",
    "LLVMGetInstructionCallConv",
    "LLVMSetInstrParamAlignment",
    "LLVMAddCallSiteAttribute",
    "LLVMGetCallSiteAttributeCount",
    "LLVMGetCallSiteAttributes",
    "LLVMGetCallSiteEnumAttribute",
    "LLVMGetCallSiteStringAttribute",
    "LLVMRemoveCallSiteEnumAttribute",
    "LLVMRemoveCallSiteStringAttribute",
    "LLVMGetCalledFunctionType",
    "LLVMGetCalledValue",
    "LLVMIsTailCall",
    "LLVMSetTailCall",
    "LLVMGetNormalDest",
    "LLVMGetUnwindDest",
    "LLVMSetNormalDest",
    "LLVMSetUnwindDest",
    "LLVMGetNumSuccessors",
    "LLVMGetSuccessor",
    "LLVMSetSuccessor",
    "LLVMIsConditional",
    "LLVMGetCondition",
    "LLVMSetCondition",
    "LLVMGetSwitchDefaultDest",
    "LLVMGetAllocatedType",
    "LLVMIsInBounds",
    "LLVMSetIsInBounds",
    "LLVMGetGEPSourceElementType",
    "LLVMAddIncoming",
    "LLVMCountIncoming",
    "LLVMGetIncomingValue",
    "LLVMGetIncomingBlock",
    "LLVMGetNumIndices",
    "LLVMGetIndices",
    "LLVMCreateBuilderInContext",
    "LLVMCreateBuilder",
    "LLVMPositionBuilder",
    "LLVMPositionBuilderBefore",
    "LLVMPositionBuilderAtEnd",
    "LLVMGetInsertBlock",
    "LLVMClearInsertionPosition",
    "LLVMInsertIntoBuilder",
    "LLVMInsertIntoBuilderWithName",
    "LLVMDisposeBuilder",
    "LLVMGetCurrentDebugLocation2",
    "LLVMSetCurrentDebugLocation2",
    "LLVMSetInstDebugLocation",
    "LLVMAddMetadataToInst",
    "LLVMBuilderGetDefaultFPMathTag",
    "LLVMBuilderSetDefaultFPMathTag",
    "LLVMSetCurrentDebugLocation",
    "LLVMGetCurrentDebugLocation",
    "LLVMBuildRetVoid",
    "LLVMBuildRet",
    "LLVMBuildAggregateRet",
    "LLVMBuildBr",
    "LLVMBuildCondBr",
    "LLVMBuildSwitch",
    "LLVMBuildIndirectBr",
    "LLVMBuildInvoke2",
    "LLVMBuildUnreachable",
    "LLVMBuildResume",
    "LLVMBuildLandingPad",
    "LLVMBuildCleanupRet",
    "LLVMBuildCatchRet",
    "LLVMBuildCatchPad",
    "LLVMBuildCleanupPad",
    "LLVMBuildCatchSwitch",
    "LLVMAddCase",
    "LLVMAddDestination",
    "LLVMGetNumClauses",
    "LLVMGetClause",
    "LLVMAddClause",
    "LLVMIsCleanup",
    "LLVMSetCleanup",
    "LLVMAddHandler",
    "LLVMGetNumHandlers",
    "LLVMGetHandlers",
    "LLVMGetArgOperand",
    "LLVMSetArgOperand",
    "LLVMGetParentCatchSwitch",
    "LLVMSetParentCatchSwitch",
    "LLVMBuildAdd",
    "LLVMBuildNSWAdd",
    "LLVMBuildNUWAdd",
    "LLVMBuildFAdd",
    "LLVMBuildSub",
    "LLVMBuildNSWSub",
    "LLVMBuildNUWSub",
    "LLVMBuildFSub",
    "LLVMBuildMul",
    "LLVMBuildNSWMul",
    "LLVMBuildNUWMul",
    "LLVMBuildFMul",
    "LLVMBuildUDiv",
    "LLVMBuildExactUDiv",
    "LLVMBuildSDiv",
    "LLVMBuildExactSDiv",
    "LLVMBuildFDiv",
    "LLVMBuildURem",
    "LLVMBuildSRem",
    "LLVMBuildFRem",
    "LLVMBuildShl",
    "LLVMBuildLShr",
    "LLVMBuildAShr",
    "LLVMBuildAnd",
    "LLVMBuildOr",
    "LLVMBuildXor",
    "LLVMBuildBinOp",
    "LLVMBuildNeg",
    "LLVMBuildNSWNeg",
    "LLVMBuildNUWNeg",
    "LLVMBuildFNeg",
    "LLVMBuildNot",
    "LLVMBuildMalloc",
    "LLVMBuildArrayMalloc",
    "LLVMBuildMemSet",
    "LLVMBuildMemCpy",
    "LLVMBuildMemMove",
    "LLVMBuildAlloca",
    "LLVMBuildArrayAlloca",
    "LLVMBuildFree",
    "LLVMBuildLoad2",
    "LLVMBuildStore",
    "LLVMBuildGEP2",
    "LLVMBuildInBoundsGEP2",
    "LLVMBuildStructGEP2",
    "LLVMBuildGlobalString",
    "LLVMBuildGlobalStringPtr",
    "LLVMGetVolatile",
    "LLVMSetVolatile",
    "LLVMGetWeak",
    "LLVMSetWeak",
    "LLVMGetOrdering",
    "LLVMSetOrdering",
    "LLVMGetAtomicRMWBinOp",
    "LLVMSetAtomicRMWBinOp",
    "LLVMBuildTrunc",
    "LLVMBuildZExt",
    "LLVMBuildSExt",
    "LLVMBuildFPToUI",
    "LLVMBuildFPToSI",
    "LLVMBuildUIToFP",
    "LLVMBuildSIToFP",
    "LLVMBuildFPTrunc",
    "LLVMBuildFPExt",
    "LLVMBuildPtrToInt",
    "LLVMBuildIntToPtr",
    "LLVMBuildBitCast",
    "LLVMBuildAddrSpaceCast",
    "LLVMBuildZExtOrBitCast",
    "LLVMBuildSExtOrBitCast",
    "LLVMBuildTruncOrBitCast",
    "LLVMBuildCast",
    "LLVMBuildPointerCast",
    "LLVMBuildIntCast2",
    "LLVMBuildFPCast",
    "LLVMBuildIntCast",
    "LLVMGetCastOpcode",
    "LLVMBuildICmp",
    "LLVMBuildFCmp",
    "LLVMBuildPhi",
    "LLVMBuildCall2",
    "LLVMBuildSelect",
    "LLVMBuildVAArg",
    "LLVMBuildExtractElement",
    "LLVMBuildInsertElement",
    "LLVMBuildShuffleVector",
    "LLVMBuildExtractValue",
    "LLVMBuildInsertValue",
    "LLVMBuildFreeze",
    "LLVMBuildIsNull",
    "LLVMBuildIsNotNull",
    "LLVMBuildPtrDiff2",
    "LLVMBuildFence",
    "LLVMBuildAtomicRMW",
    "LLVMBuildAtomicCmpXchg",
    "LLVMGetNumMaskElements",
    "LLVMGetUndefMaskElem",
    "LLVMGetMaskValue",
    "LLVMIsAtomicSingleThread",
    "LLVMSetAtomicSingleThread",
    "LLVMGetCmpXchgSuccessOrdering",
    "LLVMSetCmpXchgSuccessOrdering",
    "LLVMGetCmpXchgFailureOrdering",
    "LLVMSetCmpXchgFailureOrdering",
    "LLVMCreateModuleProviderForExistingModule",
    "LLVMDisposeModuleProvider",
    "LLVMCreateMemoryBufferWithContentsOfFile",
    "LLVMCreateMemoryBufferWithSTDIN",
    "LLVMCreateMemoryBufferWithMemoryRange",
    "LLVMCreateMemoryBufferWithMemoryRangeCopy",
    "LLVMGetBufferStart",
    "LLVMGetBufferSize",
    "LLVMDisposeMemoryBuffer",
    "LLVMGetGlobalPassRegistry",
    "LLVMCreatePassManager",
    "LLVMCreateFunctionPassManagerForModule",
    "LLVMCreateFunctionPassManager",
    "LLVMRunPassManager",
    "LLVMInitializeFunctionPassManager",
    "LLVMRunFunctionPassManager",
    "LLVMFinalizeFunctionPassManager",
    "LLVMDisposePassManager",
    "LLVMStartMultithreaded",
    "LLVMStopMultithreaded",
    "LLVMIsMultithreaded",
]