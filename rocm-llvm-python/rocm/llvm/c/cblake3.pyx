# MIT License
#
# Copyright (c) 2021-2025 Advanced Micro Devices, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


# This file has been autogenerated, do not modify.

cimport rocm.llvm._util.posixloader as loader
cdef void* _lib_handle = NULL

DLL = b"librocmllvm.so"

cdef int __init() except 1 nogil:
    global DLL
    global _lib_handle
    cdef char* dll = NULL
    if _lib_handle == NULL:
        with gil:
            dll = DLL
        return loader.open_library(&_lib_handle,dll)
    return 0

cdef int __init_symbol(void** result, const char* name) except 1 nogil:
    global _lib_handle
    cdef int init_result = 0
    if _lib_handle == NULL:
        init_result = __init()
        if init_result > 0:
            return init_result
    if result[0] == NULL:
        return loader.load_symbol(result,_lib_handle, name)
    return 0


cdef void* _llvm_blake3_version__funptr = NULL
cdef const char * llvm_blake3_version():
    global _llvm_blake3_version__funptr
    if __init_symbol(&_llvm_blake3_version__funptr,"llvm_blake3_version") > 0:
        pass
    return (<const char * (*)() noexcept nogil> _llvm_blake3_version__funptr)()


cdef void* _llvm_blake3_hasher_init__funptr = NULL
cdef void llvm_blake3_hasher_init(llvm_blake3_hasher * self):
    global _llvm_blake3_hasher_init__funptr
    if __init_symbol(&_llvm_blake3_hasher_init__funptr,"llvm_blake3_hasher_init") > 0:
        pass
    (<void (*)(llvm_blake3_hasher *) noexcept nogil> _llvm_blake3_hasher_init__funptr)(self)


cdef void* _llvm_blake3_hasher_init_keyed__funptr = NULL
cdef void llvm_blake3_hasher_init_keyed(llvm_blake3_hasher * self,const unsigned char[32] key):
    global _llvm_blake3_hasher_init_keyed__funptr
    if __init_symbol(&_llvm_blake3_hasher_init_keyed__funptr,"llvm_blake3_hasher_init_keyed") > 0:
        pass
    (<void (*)(llvm_blake3_hasher *,const unsigned char[32]) noexcept nogil> _llvm_blake3_hasher_init_keyed__funptr)(self,key)


cdef void* _llvm_blake3_hasher_init_derive_key__funptr = NULL
cdef void llvm_blake3_hasher_init_derive_key(llvm_blake3_hasher * self,const char * context):
    global _llvm_blake3_hasher_init_derive_key__funptr
    if __init_symbol(&_llvm_blake3_hasher_init_derive_key__funptr,"llvm_blake3_hasher_init_derive_key") > 0:
        pass
    (<void (*)(llvm_blake3_hasher *,const char *) noexcept nogil> _llvm_blake3_hasher_init_derive_key__funptr)(self,context)


cdef void* _llvm_blake3_hasher_init_derive_key_raw__funptr = NULL
cdef void llvm_blake3_hasher_init_derive_key_raw(llvm_blake3_hasher * self,const void * context,unsigned long context_len):
    global _llvm_blake3_hasher_init_derive_key_raw__funptr
    if __init_symbol(&_llvm_blake3_hasher_init_derive_key_raw__funptr,"llvm_blake3_hasher_init_derive_key_raw") > 0:
        pass
    (<void (*)(llvm_blake3_hasher *,const void *,unsigned long) noexcept nogil> _llvm_blake3_hasher_init_derive_key_raw__funptr)(self,context,context_len)


cdef void* _llvm_blake3_hasher_update__funptr = NULL
cdef void llvm_blake3_hasher_update(llvm_blake3_hasher * self,const void * input,unsigned long input_len):
    global _llvm_blake3_hasher_update__funptr
    if __init_symbol(&_llvm_blake3_hasher_update__funptr,"llvm_blake3_hasher_update") > 0:
        pass
    (<void (*)(llvm_blake3_hasher *,const void *,unsigned long) noexcept nogil> _llvm_blake3_hasher_update__funptr)(self,input,input_len)


cdef void* _llvm_blake3_hasher_finalize__funptr = NULL
cdef void llvm_blake3_hasher_finalize(llvm_blake3_hasher * self,unsigned char * out,unsigned long out_len):
    global _llvm_blake3_hasher_finalize__funptr
    if __init_symbol(&_llvm_blake3_hasher_finalize__funptr,"llvm_blake3_hasher_finalize") > 0:
        pass
    (<void (*)(llvm_blake3_hasher *,unsigned char *,unsigned long) noexcept nogil> _llvm_blake3_hasher_finalize__funptr)(self,out,out_len)


cdef void* _llvm_blake3_hasher_finalize_seek__funptr = NULL
cdef void llvm_blake3_hasher_finalize_seek(llvm_blake3_hasher * self,unsigned long seek,unsigned char * out,unsigned long out_len):
    global _llvm_blake3_hasher_finalize_seek__funptr
    if __init_symbol(&_llvm_blake3_hasher_finalize_seek__funptr,"llvm_blake3_hasher_finalize_seek") > 0:
        pass
    (<void (*)(llvm_blake3_hasher *,unsigned long,unsigned char *,unsigned long) noexcept nogil> _llvm_blake3_hasher_finalize_seek__funptr)(self,seek,out,out_len)


cdef void* _llvm_blake3_hasher_reset__funptr = NULL
cdef void llvm_blake3_hasher_reset(llvm_blake3_hasher * self):
    global _llvm_blake3_hasher_reset__funptr
    if __init_symbol(&_llvm_blake3_hasher_reset__funptr,"llvm_blake3_hasher_reset") > 0:
        pass
    (<void (*)(llvm_blake3_hasher *) noexcept nogil> _llvm_blake3_hasher_reset__funptr)(self)
