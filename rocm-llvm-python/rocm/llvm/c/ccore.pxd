# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

from libc.stdint cimport *
ctypedef bint _Bool # bool is not a reserved keyword in C, _Bool is
from rocm.llvm.c.cerrorhandling cimport *
from rocm.llvm.c.ctypes cimport *
cdef extern from "llvm-c/Core.h":

    ctypedef enum LLVMOpcode:
        LLVMRet
        LLVMBr
        LLVMSwitch
        LLVMIndirectBr
        LLVMInvoke
        LLVMUnreachable
        LLVMCallBr
        LLVMFNeg
        LLVMAdd
        LLVMFAdd
        LLVMSub
        LLVMFSub
        LLVMMul
        LLVMFMul
        LLVMUDiv
        LLVMSDiv
        LLVMFDiv
        LLVMURem
        LLVMSRem
        LLVMFRem
        LLVMShl
        LLVMLShr
        LLVMAShr
        LLVMAnd
        LLVMOr
        LLVMXor
        LLVMAlloca
        LLVMLoad
        LLVMStore
        LLVMGetElementPtr
        LLVMTrunc
        LLVMZExt
        LLVMSExt
        LLVMFPToUI
        LLVMFPToSI
        LLVMUIToFP
        LLVMSIToFP
        LLVMFPTrunc
        LLVMFPExt
        LLVMPtrToInt
        LLVMIntToPtr
        LLVMBitCast
        LLVMAddrSpaceCast
        LLVMICmp
        LLVMFCmp
        LLVMPHI
        LLVMCall
        LLVMSelect
        LLVMUserOp1
        LLVMUserOp2
        LLVMVAArg
        LLVMExtractElement
        LLVMInsertElement
        LLVMShuffleVector
        LLVMExtractValue
        LLVMInsertValue
        LLVMFreeze
        LLVMFence
        LLVMAtomicCmpXchg
        LLVMAtomicRMW
        LLVMResume
        LLVMLandingPad
        LLVMCleanupRet
        LLVMCatchRet
        LLVMCatchPad
        LLVMCleanupPad
        LLVMCatchSwitch

    ctypedef enum LLVMTypeKind:
        LLVMVoidTypeKind
        LLVMHalfTypeKind
        LLVMFloatTypeKind
        LLVMDoubleTypeKind
        LLVMX86_FP80TypeKind
        LLVMFP128TypeKind
        LLVMPPC_FP128TypeKind
        LLVMLabelTypeKind
        LLVMIntegerTypeKind
        LLVMFunctionTypeKind
        LLVMStructTypeKind
        LLVMArrayTypeKind
        LLVMPointerTypeKind
        LLVMVectorTypeKind
        LLVMMetadataTypeKind
        LLVMX86_MMXTypeKind
        LLVMTokenTypeKind
        LLVMScalableVectorTypeKind
        LLVMBFloatTypeKind
        LLVMX86_AMXTypeKind
        LLVMTargetExtTypeKind

    ctypedef enum LLVMLinkage:
        LLVMExternalLinkage
        LLVMAvailableExternallyLinkage
        LLVMLinkOnceAnyLinkage
        LLVMLinkOnceODRLinkage
        LLVMLinkOnceODRAutoHideLinkage
        LLVMWeakAnyLinkage
        LLVMWeakODRLinkage
        LLVMAppendingLinkage
        LLVMInternalLinkage
        LLVMPrivateLinkage
        LLVMDLLImportLinkage
        LLVMDLLExportLinkage
        LLVMExternalWeakLinkage
        LLVMGhostLinkage
        LLVMCommonLinkage
        LLVMLinkerPrivateLinkage
        LLVMLinkerPrivateWeakLinkage

    ctypedef enum LLVMVisibility:
        LLVMDefaultVisibility
        LLVMHiddenVisibility
        LLVMProtectedVisibility

    ctypedef enum LLVMUnnamedAddr:
        LLVMNoUnnamedAddr
        LLVMLocalUnnamedAddr
        LLVMGlobalUnnamedAddr

    ctypedef enum LLVMDLLStorageClass:
        LLVMDefaultStorageClass
        LLVMDLLImportStorageClass
        LLVMDLLExportStorageClass

    ctypedef enum LLVMCallConv:
        LLVMCCallConv
        LLVMFastCallConv
        LLVMColdCallConv
        LLVMGHCCallConv
        LLVMHiPECallConv
        LLVMWebKitJSCallConv
        LLVMAnyRegCallConv
        LLVMPreserveMostCallConv
        LLVMPreserveAllCallConv
        LLVMSwiftCallConv
        LLVMCXXFASTTLSCallConv
        LLVMX86StdcallCallConv
        LLVMX86FastcallCallConv
        LLVMARMAPCSCallConv
        LLVMARMAAPCSCallConv
        LLVMARMAAPCSVFPCallConv
        LLVMMSP430INTRCallConv
        LLVMX86ThisCallCallConv
        LLVMPTXKernelCallConv
        LLVMPTXDeviceCallConv
        LLVMSPIRFUNCCallConv
        LLVMSPIRKERNELCallConv
        LLVMIntelOCLBICallConv
        LLVMX8664SysVCallConv
        LLVMWin64CallConv
        LLVMX86VectorCallCallConv
        LLVMHHVMCallConv
        LLVMHHVMCCallConv
        LLVMX86INTRCallConv
        LLVMAVRINTRCallConv
        LLVMAVRSIGNALCallConv
        LLVMAVRBUILTINCallConv
        LLVMAMDGPUVSCallConv
        LLVMAMDGPUGSCallConv
        LLVMAMDGPUPSCallConv
        LLVMAMDGPUCSCallConv
        LLVMAMDGPUKERNELCallConv
        LLVMX86RegCallCallConv
        LLVMAMDGPUHSCallConv
        LLVMMSP430BUILTINCallConv
        LLVMAMDGPULSCallConv
        LLVMAMDGPUESCallConv

    ctypedef enum LLVMValueKind:
        LLVMArgumentValueKind
        LLVMBasicBlockValueKind
        LLVMMemoryUseValueKind
        LLVMMemoryDefValueKind
        LLVMMemoryPhiValueKind
        LLVMFunctionValueKind
        LLVMGlobalAliasValueKind
        LLVMGlobalIFuncValueKind
        LLVMGlobalVariableValueKind
        LLVMBlockAddressValueKind
        LLVMConstantExprValueKind
        LLVMConstantArrayValueKind
        LLVMConstantStructValueKind
        LLVMConstantVectorValueKind
        LLVMUndefValueValueKind
        LLVMConstantAggregateZeroValueKind
        LLVMConstantDataArrayValueKind
        LLVMConstantDataVectorValueKind
        LLVMConstantIntValueKind
        LLVMConstantFPValueKind
        LLVMConstantPointerNullValueKind
        LLVMConstantTokenNoneValueKind
        LLVMMetadataAsValueValueKind
        LLVMInlineAsmValueKind
        LLVMInstructionValueKind
        LLVMPoisonValueValueKind
        LLVMConstantTargetNoneValueKind

    ctypedef enum LLVMIntPredicate:
        LLVMIntEQ
        LLVMIntNE
        LLVMIntUGT
        LLVMIntUGE
        LLVMIntULT
        LLVMIntULE
        LLVMIntSGT
        LLVMIntSGE
        LLVMIntSLT
        LLVMIntSLE

    ctypedef enum LLVMRealPredicate:
        LLVMRealPredicateFalse
        LLVMRealOEQ
        LLVMRealOGT
        LLVMRealOGE
        LLVMRealOLT
        LLVMRealOLE
        LLVMRealONE
        LLVMRealORD
        LLVMRealUNO
        LLVMRealUEQ
        LLVMRealUGT
        LLVMRealUGE
        LLVMRealULT
        LLVMRealULE
        LLVMRealUNE
        LLVMRealPredicateTrue

    ctypedef enum LLVMLandingPadClauseTy:
        LLVMLandingPadCatch
        LLVMLandingPadFilter

    ctypedef enum LLVMThreadLocalMode:
        LLVMNotThreadLocal
        LLVMGeneralDynamicTLSModel
        LLVMLocalDynamicTLSModel
        LLVMInitialExecTLSModel
        LLVMLocalExecTLSModel

    ctypedef enum LLVMAtomicOrdering:
        LLVMAtomicOrderingNotAtomic
        LLVMAtomicOrderingUnordered
        LLVMAtomicOrderingMonotonic
        LLVMAtomicOrderingAcquire
        LLVMAtomicOrderingRelease
        LLVMAtomicOrderingAcquireRelease
        LLVMAtomicOrderingSequentiallyConsistent

    ctypedef enum LLVMAtomicRMWBinOp:
        LLVMAtomicRMWBinOpXchg
        LLVMAtomicRMWBinOpAdd
        LLVMAtomicRMWBinOpSub
        LLVMAtomicRMWBinOpAnd
        LLVMAtomicRMWBinOpNand
        LLVMAtomicRMWBinOpOr
        LLVMAtomicRMWBinOpXor
        LLVMAtomicRMWBinOpMax
        LLVMAtomicRMWBinOpMin
        LLVMAtomicRMWBinOpUMax
        LLVMAtomicRMWBinOpUMin
        LLVMAtomicRMWBinOpFAdd
        LLVMAtomicRMWBinOpFSub
        LLVMAtomicRMWBinOpFMax
        LLVMAtomicRMWBinOpFMin

    ctypedef enum LLVMDiagnosticSeverity:
        LLVMDSError
        LLVMDSWarning
        LLVMDSRemark
        LLVMDSNote

    ctypedef enum LLVMInlineAsmDialect:
        LLVMInlineAsmDialectATT
        LLVMInlineAsmDialectIntel

    ctypedef enum LLVMModuleFlagBehavior:
        LLVMModuleFlagBehaviorError
        LLVMModuleFlagBehaviorWarning
        LLVMModuleFlagBehaviorRequire
        LLVMModuleFlagBehaviorOverride
        LLVMModuleFlagBehaviorAppend
        LLVMModuleFlagBehaviorAppendUnique

    ctypedef enum:
        LLVMAttributeReturnIndex
        LLVMAttributeFunctionIndex

    ctypedef unsigned int LLVMAttributeIndex

# 
# @}
cdef void LLVMInitializeCore(LLVMPassRegistryRef R) nogil


# Deallocate and destroy all ManagedStatic variables.
# @see llvm::llvm_shutdown
# @see ManagedStatic
cdef void LLVMShutdown() nogil


# 
# Return the major, minor, and patch version of LLVM
# 
# The version components are returned via the function's three output
# parameters or skipped if a NULL pointer was supplied.
cdef void LLVMGetVersion(unsigned int * Major,unsigned int * Minor,unsigned int * Patch) nogil



cdef char * LLVMCreateMessage(const char * Message) nogil



cdef void LLVMDisposeMessage(char * Message) nogil


cdef extern from "llvm-c/Core.h":

    ctypedef void (*LLVMDiagnosticHandler) (LLVMDiagnosticInfoRef,void *)

    ctypedef void (*LLVMYieldCallback) (LLVMContextRef,void *)

# 
# Create a new context.
# 
# Every call to this function should be paired with a call to
# LLVMContextDispose() or the context will leak memory.
cdef LLVMContextRef LLVMContextCreate() nogil


# 
# Obtain the global context instance.
cdef LLVMContextRef LLVMGetGlobalContext() nogil


# 
# Set the diagnostic handler for this context.
cdef void LLVMContextSetDiagnosticHandler(LLVMContextRef C,LLVMDiagnosticHandler Handler,void * DiagnosticContext)


# 
# Get the diagnostic handler of this context.
cdef LLVMDiagnosticHandler LLVMContextGetDiagnosticHandler(LLVMContextRef C) nogil


# 
# Get the diagnostic context of this context.
cdef void * LLVMContextGetDiagnosticContext(LLVMContextRef C) nogil


# 
# Set the yield callback function for this context.
# 
# @see LLVMContext::setYieldCallback()
cdef void LLVMContextSetYieldCallback(LLVMContextRef C,LLVMYieldCallback Callback,void * OpaqueHandle)


# 
# Retrieve whether the given context is set to discard all value names.
# 
# @see LLVMContext::shouldDiscardValueNames()
cdef int LLVMContextShouldDiscardValueNames(LLVMContextRef C) nogil


# 
# Set whether the given context discards all value names.
# 
# If true, only the names of GlobalValue objects will be available in the IR.
# This can be used to save memory and runtime, especially in release mode.
# 
# @see LLVMContext::setDiscardValueNames()
cdef void LLVMContextSetDiscardValueNames(LLVMContextRef C,int Discard) nogil


# 
# Set whether the given context is in opaque pointer mode.
# 
# @see LLVMContext::setOpaquePointers()
cdef void LLVMContextSetOpaquePointers(LLVMContextRef C,int OpaquePointers) nogil


# 
# Destroy a context instance.
# 
# This should be called for every call to LLVMContextCreate() or memory
# will be leaked.
cdef void LLVMContextDispose(LLVMContextRef C) nogil


# 
# Return a string representation of the DiagnosticInfo. Use
# LLVMDisposeMessage to free the string.
# 
# @see DiagnosticInfo::print()
cdef char * LLVMGetDiagInfoDescription(LLVMDiagnosticInfoRef DI) nogil


# 
# Return an enum LLVMDiagnosticSeverity.
# 
# @see DiagnosticInfo::getSeverity()
cdef LLVMDiagnosticSeverity LLVMGetDiagInfoSeverity(LLVMDiagnosticInfoRef DI) nogil



cdef unsigned int LLVMGetMDKindIDInContext(LLVMContextRef C,const char * Name,unsigned int SLen) nogil



cdef unsigned int LLVMGetMDKindID(const char * Name,unsigned int SLen) nogil


# 
# Return an unique id given the name of a enum attribute,
# or 0 if no attribute by that name exists.
# 
# See http://llvm.org/docs/LangRef.html#parameter-attributes
# and http://llvm.org/docs/LangRef.html#function-attributes
# for the list of available attributes.
# 
# NB: Attribute names and/or id are subject to change without
# going through the C API deprecation cycle.
cdef unsigned int LLVMGetEnumAttributeKindForName(const char * Name,unsigned long SLen) nogil



cdef unsigned int LLVMGetLastEnumAttributeKind() nogil


# 
# Create an enum attribute.
cdef LLVMAttributeRef LLVMCreateEnumAttribute(LLVMContextRef C,unsigned int KindID,unsigned long Val) nogil


# 
# Get the unique id corresponding to the enum attribute
# passed as argument.
cdef unsigned int LLVMGetEnumAttributeKind(LLVMAttributeRef A) nogil


# 
# Get the enum attribute's value. 0 is returned if none exists.
cdef unsigned long LLVMGetEnumAttributeValue(LLVMAttributeRef A) nogil


# 
# Create a type attribute
cdef LLVMAttributeRef LLVMCreateTypeAttribute(LLVMContextRef C,unsigned int KindID,LLVMTypeRef type_ref) nogil


# 
# Get the type attribute's value.
cdef LLVMTypeRef LLVMGetTypeAttributeValue(LLVMAttributeRef A) nogil


# 
# Create a string attribute.
cdef LLVMAttributeRef LLVMCreateStringAttribute(LLVMContextRef C,const char * K,unsigned int KLength,const char * V,unsigned int VLength) nogil


# 
# Get the string attribute's kind.
cdef const char * LLVMGetStringAttributeKind(LLVMAttributeRef A,unsigned int * Length) nogil


# 
# Get the string attribute's value.
cdef const char * LLVMGetStringAttributeValue(LLVMAttributeRef A,unsigned int * Length) nogil


# 
# Check for the different types of attributes.
cdef int LLVMIsEnumAttribute(LLVMAttributeRef A) nogil



cdef int LLVMIsStringAttribute(LLVMAttributeRef A) nogil



cdef int LLVMIsTypeAttribute(LLVMAttributeRef A) nogil


# 
# Obtain a Type from a context by its registered name.
cdef LLVMTypeRef LLVMGetTypeByName2(LLVMContextRef C,const char * Name) nogil


# 
# Create a new, empty module in the global context.
# 
# This is equivalent to calling LLVMModuleCreateWithNameInContext with
# LLVMGetGlobalContext() as the context parameter.
# 
# Every invocation should be paired with LLVMDisposeModule() or memory
# will be leaked.
cdef LLVMModuleRef LLVMModuleCreateWithName(const char * ModuleID) nogil


# 
# Create a new, empty module in a specific context.
# 
# Every invocation should be paired with LLVMDisposeModule() or memory
# will be leaked.
cdef LLVMModuleRef LLVMModuleCreateWithNameInContext(const char * ModuleID,LLVMContextRef C) nogil


# 
# Return an exact copy of the specified module.
cdef LLVMModuleRef LLVMCloneModule(LLVMModuleRef M) nogil


# 
# Destroy a module instance.
# 
# This must be called for every created module or memory will be
# leaked.
cdef void LLVMDisposeModule(LLVMModuleRef M) nogil


# 
# Obtain the identifier of a module.
# 
# @param M Module to obtain identifier of
# @param Len Out parameter which holds the length of the returned string.
# @return The identifier of M.
# @see Module::getModuleIdentifier()
cdef const char * LLVMGetModuleIdentifier(LLVMModuleRef M,unsigned long * Len) nogil


# 
# Set the identifier of a module to a string Ident with length Len.
# 
# @param M The module to set identifier
# @param Ident The string to set M's identifier to
# @param Len Length of Ident
# @see Module::setModuleIdentifier()
cdef void LLVMSetModuleIdentifier(LLVMModuleRef M,const char * Ident,unsigned long Len) nogil


# 
# Obtain the module's original source file name.
# 
# @param M Module to obtain the name of
# @param Len Out parameter which holds the length of the returned string
# @return The original source file name of M
# @see Module::getSourceFileName()
cdef const char * LLVMGetSourceFileName(LLVMModuleRef M,unsigned long * Len) nogil


# 
# Set the original source file name of a module to a string Name with length
# Len.
# 
# @param M The module to set the source file name of
# @param Name The string to set M's source file name to
# @param Len Length of Name
# @see Module::setSourceFileName()
cdef void LLVMSetSourceFileName(LLVMModuleRef M,const char * Name,unsigned long Len) nogil


# 
# Obtain the data layout for a module.
# 
# @see Module::getDataLayoutStr()
# 
# LLVMGetDataLayout is DEPRECATED, as the name is not only incorrect,
# but match the name of another method on the module. Prefer the use
# of LLVMGetDataLayoutStr, which is not ambiguous.
cdef const char * LLVMGetDataLayoutStr(LLVMModuleRef M) nogil



cdef const char * LLVMGetDataLayout(LLVMModuleRef M) nogil


# 
# Set the data layout for a module.
# 
# @see Module::setDataLayout()
cdef void LLVMSetDataLayout(LLVMModuleRef M,const char * DataLayoutStr) nogil


# 
# Obtain the target triple for a module.
# 
# @see Module::getTargetTriple()
cdef const char * LLVMGetTarget(LLVMModuleRef M) nogil


# 
# Set the target triple for a module.
# 
# @see Module::setTargetTriple()
cdef void LLVMSetTarget(LLVMModuleRef M,const char * Triple) nogil


# 
# Returns the module flags as an array of flag-key-value triples.  The caller
# is responsible for freeing this array by calling
# \c LLVMDisposeModuleFlagsMetadata.
# 
# @see Module::getModuleFlagsMetadata()
cdef LLVMOpaqueModuleFlagEntry * LLVMCopyModuleFlagsMetadata(LLVMModuleRef M,unsigned long * Len) nogil


# 
# Destroys module flags metadata entries.
cdef void LLVMDisposeModuleFlagsMetadata(LLVMOpaqueModuleFlagEntry * Entries) nogil


# 
# Returns the flag behavior for a module flag entry at a specific index.
# 
# @see Module::ModuleFlagEntry::Behavior
cdef LLVMModuleFlagBehavior LLVMModuleFlagEntriesGetFlagBehavior(LLVMOpaqueModuleFlagEntry * Entries,unsigned int Index) nogil


# 
# Returns the key for a module flag entry at a specific index.
# 
# @see Module::ModuleFlagEntry::Key
cdef const char * LLVMModuleFlagEntriesGetKey(LLVMOpaqueModuleFlagEntry * Entries,unsigned int Index,unsigned long * Len) nogil


# 
# Returns the metadata for a module flag entry at a specific index.
# 
# @see Module::ModuleFlagEntry::Val
cdef LLVMMetadataRef LLVMModuleFlagEntriesGetMetadata(LLVMOpaqueModuleFlagEntry * Entries,unsigned int Index) nogil


# 
# Add a module-level flag to the module-level flags metadata if it doesn't
# already exist.
# 
# @see Module::getModuleFlag()
cdef LLVMMetadataRef LLVMGetModuleFlag(LLVMModuleRef M,const char * Key,unsigned long KeyLen) nogil


# 
# Add a module-level flag to the module-level flags metadata if it doesn't
# already exist.
# 
# @see Module::addModuleFlag()
cdef void LLVMAddModuleFlag(LLVMModuleRef M,LLVMModuleFlagBehavior Behavior,const char * Key,unsigned long KeyLen,LLVMMetadataRef Val) nogil


# 
# Dump a representation of a module to stderr.
# 
# @see Module::dump()
cdef void LLVMDumpModule(LLVMModuleRef M) nogil


# 
# Print a representation of a module to a file. The ErrorMessage needs to be
# disposed with LLVMDisposeMessage. Returns 0 on success, 1 otherwise.
# 
# @see Module::print()
cdef int LLVMPrintModuleToFile(LLVMModuleRef M,const char * Filename,char ** ErrorMessage) nogil


# 
# Return a string representation of the module. Use
# LLVMDisposeMessage to free the string.
# 
# @see Module::print()
cdef char * LLVMPrintModuleToString(LLVMModuleRef M) nogil


# 
# Get inline assembly for a module.
# 
# @see Module::getModuleInlineAsm()
cdef const char * LLVMGetModuleInlineAsm(LLVMModuleRef M,unsigned long * Len) nogil


# 
# Set inline assembly for a module.
# 
# @see Module::setModuleInlineAsm()
cdef void LLVMSetModuleInlineAsm2(LLVMModuleRef M,const char * Asm,unsigned long Len) nogil


# 
# Append inline assembly to a module.
# 
# @see Module::appendModuleInlineAsm()
cdef void LLVMAppendModuleInlineAsm(LLVMModuleRef M,const char * Asm,unsigned long Len) nogil


# 
# Create the specified uniqued inline asm string.
# 
# @see InlineAsm::get()
cdef LLVMValueRef LLVMGetInlineAsm(LLVMTypeRef Ty,char * AsmString,unsigned long AsmStringSize,char * Constraints,unsigned long ConstraintsSize,int HasSideEffects,int IsAlignStack,LLVMInlineAsmDialect Dialect,int CanThrow) nogil


# 
# Obtain the context to which this module is associated.
# 
# @see Module::getContext()
cdef LLVMContextRef LLVMGetModuleContext(LLVMModuleRef M) nogil


# Deprecated: Use LLVMGetTypeByName2 instead. */
cdef LLVMTypeRef LLVMGetTypeByName(LLVMModuleRef M,const char * Name) nogil


# 
# Obtain an iterator to the first NamedMDNode in a Module.
# 
# @see llvm::Module::named_metadata_begin()
cdef LLVMNamedMDNodeRef LLVMGetFirstNamedMetadata(LLVMModuleRef M) nogil


# 
# Obtain an iterator to the last NamedMDNode in a Module.
# 
# @see llvm::Module::named_metadata_end()
cdef LLVMNamedMDNodeRef LLVMGetLastNamedMetadata(LLVMModuleRef M) nogil


# 
# Advance a NamedMDNode iterator to the next NamedMDNode.
# 
# Returns NULL if the iterator was already at the end and there are no more
# named metadata nodes.
cdef LLVMNamedMDNodeRef LLVMGetNextNamedMetadata(LLVMNamedMDNodeRef NamedMDNode) nogil


# 
# Decrement a NamedMDNode iterator to the previous NamedMDNode.
# 
# Returns NULL if the iterator was already at the beginning and there are
# no previous named metadata nodes.
cdef LLVMNamedMDNodeRef LLVMGetPreviousNamedMetadata(LLVMNamedMDNodeRef NamedMDNode) nogil


# 
# Retrieve a NamedMDNode with the given name, returning NULL if no such
# node exists.
# 
# @see llvm::Module::getNamedMetadata()
cdef LLVMNamedMDNodeRef LLVMGetNamedMetadata(LLVMModuleRef M,const char * Name,unsigned long NameLen) nogil


# 
# Retrieve a NamedMDNode with the given name, creating a new node if no such
# node exists.
# 
# @see llvm::Module::getOrInsertNamedMetadata()
cdef LLVMNamedMDNodeRef LLVMGetOrInsertNamedMetadata(LLVMModuleRef M,const char * Name,unsigned long NameLen) nogil


# 
# Retrieve the name of a NamedMDNode.
# 
# @see llvm::NamedMDNode::getName()
cdef const char * LLVMGetNamedMetadataName(LLVMNamedMDNodeRef NamedMD,unsigned long * NameLen) nogil


# 
# Obtain the number of operands for named metadata in a module.
# 
# @see llvm::Module::getNamedMetadata()
cdef unsigned int LLVMGetNamedMetadataNumOperands(LLVMModuleRef M,const char * Name) nogil


# 
# Obtain the named metadata operands for a module.
# 
# The passed LLVMValueRef pointer should refer to an array of
# LLVMValueRef at least LLVMGetNamedMetadataNumOperands long. This
# array will be populated with the LLVMValueRef instances. Each
# instance corresponds to a llvm::MDNode.
# 
# @see llvm::Module::getNamedMetadata()
# @see llvm::MDNode::getOperand()
cdef void LLVMGetNamedMetadataOperands(LLVMModuleRef M,const char * Name,LLVMValueRef* Dest) nogil


# 
# Add an operand to named metadata.
# 
# @see llvm::Module::getNamedMetadata()
# @see llvm::MDNode::addOperand()
cdef void LLVMAddNamedMetadataOperand(LLVMModuleRef M,const char * Name,LLVMValueRef Val) nogil


# 
# Return the directory of the debug location for this value, which must be
# an llvm::Instruction, llvm::GlobalVariable, or llvm::Function.
# 
# @see llvm::Instruction::getDebugLoc()
# @see llvm::GlobalVariable::getDebugInfo()
# @see llvm::Function::getSubprogram()
cdef const char * LLVMGetDebugLocDirectory(LLVMValueRef Val,unsigned int * Length) nogil


# 
# Return the filename of the debug location for this value, which must be
# an llvm::Instruction, llvm::GlobalVariable, or llvm::Function.
# 
# @see llvm::Instruction::getDebugLoc()
# @see llvm::GlobalVariable::getDebugInfo()
# @see llvm::Function::getSubprogram()
cdef const char * LLVMGetDebugLocFilename(LLVMValueRef Val,unsigned int * Length) nogil


# 
# Return the line number of the debug location for this value, which must be
# an llvm::Instruction, llvm::GlobalVariable, or llvm::Function.
# 
# @see llvm::Instruction::getDebugLoc()
# @see llvm::GlobalVariable::getDebugInfo()
# @see llvm::Function::getSubprogram()
cdef unsigned int LLVMGetDebugLocLine(LLVMValueRef Val) nogil


# 
# Return the column number of the debug location for this value, which must be
# an llvm::Instruction.
# 
# @see llvm::Instruction::getDebugLoc()
cdef unsigned int LLVMGetDebugLocColumn(LLVMValueRef Val) nogil


# 
# Add a function to a module under a specified name.
# 
# @see llvm::Function::Create()
cdef LLVMValueRef LLVMAddFunction(LLVMModuleRef M,const char * Name,LLVMTypeRef FunctionTy) nogil


# 
# Obtain a Function value from a Module by its name.
# 
# The returned value corresponds to a llvm::Function value.
# 
# @see llvm::Module::getFunction()
cdef LLVMValueRef LLVMGetNamedFunction(LLVMModuleRef M,const char * Name) nogil


# 
# Obtain an iterator to the first Function in a Module.
# 
# @see llvm::Module::begin()
cdef LLVMValueRef LLVMGetFirstFunction(LLVMModuleRef M) nogil


# 
# Obtain an iterator to the last Function in a Module.
# 
# @see llvm::Module::end()
cdef LLVMValueRef LLVMGetLastFunction(LLVMModuleRef M) nogil


# 
# Advance a Function iterator to the next Function.
# 
# Returns NULL if the iterator was already at the end and there are no more
# functions.
cdef LLVMValueRef LLVMGetNextFunction(LLVMValueRef Fn) nogil


# 
# Decrement a Function iterator to the previous Function.
# 
# Returns NULL if the iterator was already at the beginning and there are
# no previous functions.
cdef LLVMValueRef LLVMGetPreviousFunction(LLVMValueRef Fn) nogil


# Deprecated: Use LLVMSetModuleInlineAsm2 instead. */
cdef void LLVMSetModuleInlineAsm(LLVMModuleRef M,const char * Asm) nogil


# 
# Obtain the enumerated type of a Type instance.
# 
# @see llvm::Type:getTypeID()
cdef LLVMTypeKind LLVMGetTypeKind(LLVMTypeRef Ty) nogil


# 
# Whether the type has a known size.
# 
# Things that don't have a size are abstract types, labels, and void.a
# 
# @see llvm::Type::isSized()
cdef int LLVMTypeIsSized(LLVMTypeRef Ty) nogil


# 
# Obtain the context to which this type instance is associated.
# 
# @see llvm::Type::getContext()
cdef LLVMContextRef LLVMGetTypeContext(LLVMTypeRef Ty) nogil


# 
# Dump a representation of a type to stderr.
# 
# @see llvm::Type::dump()
cdef void LLVMDumpType(LLVMTypeRef Val) nogil


# 
# Return a string representation of the type. Use
# LLVMDisposeMessage to free the string.
# 
# @see llvm::Type::print()
cdef char * LLVMPrintTypeToString(LLVMTypeRef Val) nogil


# 
# Obtain an integer type from a context with specified bit width.
cdef LLVMTypeRef LLVMInt1TypeInContext(LLVMContextRef C) nogil



cdef LLVMTypeRef LLVMInt8TypeInContext(LLVMContextRef C) nogil



cdef LLVMTypeRef LLVMInt16TypeInContext(LLVMContextRef C) nogil



cdef LLVMTypeRef LLVMInt32TypeInContext(LLVMContextRef C) nogil



cdef LLVMTypeRef LLVMInt64TypeInContext(LLVMContextRef C) nogil



cdef LLVMTypeRef LLVMInt128TypeInContext(LLVMContextRef C) nogil



cdef LLVMTypeRef LLVMIntTypeInContext(LLVMContextRef C,unsigned int NumBits) nogil


# 
# Obtain an integer type from the global context with a specified bit
# width.
cdef LLVMTypeRef LLVMInt1Type() nogil



cdef LLVMTypeRef LLVMInt8Type() nogil



cdef LLVMTypeRef LLVMInt16Type() nogil



cdef LLVMTypeRef LLVMInt32Type() nogil



cdef LLVMTypeRef LLVMInt64Type() nogil



cdef LLVMTypeRef LLVMInt128Type() nogil



cdef LLVMTypeRef LLVMIntType(unsigned int NumBits) nogil



cdef unsigned int LLVMGetIntTypeWidth(LLVMTypeRef IntegerTy) nogil


# 
# Obtain a 16-bit floating point type from a context.
cdef LLVMTypeRef LLVMHalfTypeInContext(LLVMContextRef C) nogil


# 
# Obtain a 16-bit brain floating point type from a context.
cdef LLVMTypeRef LLVMBFloatTypeInContext(LLVMContextRef C) nogil


# 
# Obtain a 32-bit floating point type from a context.
cdef LLVMTypeRef LLVMFloatTypeInContext(LLVMContextRef C) nogil


# 
# Obtain a 64-bit floating point type from a context.
cdef LLVMTypeRef LLVMDoubleTypeInContext(LLVMContextRef C) nogil


# 
# Obtain a 80-bit floating point type (X87) from a context.
cdef LLVMTypeRef LLVMX86FP80TypeInContext(LLVMContextRef C) nogil


# 
# Obtain a 128-bit floating point type (112-bit mantissa) from a
# context.
cdef LLVMTypeRef LLVMFP128TypeInContext(LLVMContextRef C) nogil


# 
# Obtain a 128-bit floating point type (two 64-bits) from a context.
cdef LLVMTypeRef LLVMPPCFP128TypeInContext(LLVMContextRef C) nogil


# 
# Obtain a floating point type from the global context.
# 
# These map to the functions in this group of the same name.
cdef LLVMTypeRef LLVMHalfType() nogil



cdef LLVMTypeRef LLVMBFloatType() nogil



cdef LLVMTypeRef LLVMFloatType() nogil



cdef LLVMTypeRef LLVMDoubleType() nogil



cdef LLVMTypeRef LLVMX86FP80Type() nogil



cdef LLVMTypeRef LLVMFP128Type() nogil



cdef LLVMTypeRef LLVMPPCFP128Type() nogil


# 
# Obtain a function type consisting of a specified signature.
# 
# The function is defined as a tuple of a return Type, a list of
# parameter types, and whether the function is variadic.
cdef LLVMTypeRef LLVMFunctionType(LLVMTypeRef ReturnType,LLVMTypeRef* ParamTypes,unsigned int ParamCount,int IsVarArg) nogil


# 
# Returns whether a function type is variadic.
cdef int LLVMIsFunctionVarArg(LLVMTypeRef FunctionTy) nogil


# 
# Obtain the Type this function Type returns.
cdef LLVMTypeRef LLVMGetReturnType(LLVMTypeRef FunctionTy) nogil


# 
# Obtain the number of parameters this function accepts.
cdef unsigned int LLVMCountParamTypes(LLVMTypeRef FunctionTy) nogil


# 
# Obtain the types of a function's parameters.
# 
# The Dest parameter should point to a pre-allocated array of
# LLVMTypeRef at least LLVMCountParamTypes() large. On return, the
# first LLVMCountParamTypes() entries in the array will be populated
# with LLVMTypeRef instances.
# 
# @param FunctionTy The function type to operate on.
# @param Dest Memory address of an array to be filled with result.
cdef void LLVMGetParamTypes(LLVMTypeRef FunctionTy,LLVMTypeRef* Dest) nogil


# 
# Create a new structure type in a context.
# 
# A structure is specified by a list of inner elements/types and
# whether these can be packed together.
# 
# @see llvm::StructType::create()
cdef LLVMTypeRef LLVMStructTypeInContext(LLVMContextRef C,LLVMTypeRef* ElementTypes,unsigned int ElementCount,int Packed) nogil


# 
# Create a new structure type in the global context.
# 
# @see llvm::StructType::create()
cdef LLVMTypeRef LLVMStructType(LLVMTypeRef* ElementTypes,unsigned int ElementCount,int Packed) nogil


# 
# Create an empty structure in a context having a specified name.
# 
# @see llvm::StructType::create()
cdef LLVMTypeRef LLVMStructCreateNamed(LLVMContextRef C,const char * Name) nogil


# 
# Obtain the name of a structure.
# 
# @see llvm::StructType::getName()
cdef const char * LLVMGetStructName(LLVMTypeRef Ty) nogil


# 
# Set the contents of a structure type.
# 
# @see llvm::StructType::setBody()
cdef void LLVMStructSetBody(LLVMTypeRef StructTy,LLVMTypeRef* ElementTypes,unsigned int ElementCount,int Packed) nogil


# 
# Get the number of elements defined inside the structure.
# 
# @see llvm::StructType::getNumElements()
cdef unsigned int LLVMCountStructElementTypes(LLVMTypeRef StructTy) nogil


# 
# Get the elements within a structure.
# 
# The function is passed the address of a pre-allocated array of
# LLVMTypeRef at least LLVMCountStructElementTypes() long. After
# invocation, this array will be populated with the structure's
# elements. The objects in the destination array will have a lifetime
# of the structure type itself, which is the lifetime of the context it
# is contained in.
cdef void LLVMGetStructElementTypes(LLVMTypeRef StructTy,LLVMTypeRef* Dest) nogil


# 
# Get the type of the element at a given index in the structure.
# 
# @see llvm::StructType::getTypeAtIndex()
cdef LLVMTypeRef LLVMStructGetTypeAtIndex(LLVMTypeRef StructTy,unsigned int i) nogil


# 
# Determine whether a structure is packed.
# 
# @see llvm::StructType::isPacked()
cdef int LLVMIsPackedStruct(LLVMTypeRef StructTy) nogil


# 
# Determine whether a structure is opaque.
# 
# @see llvm::StructType::isOpaque()
cdef int LLVMIsOpaqueStruct(LLVMTypeRef StructTy) nogil


# 
# Determine whether a structure is literal.
# 
# @see llvm::StructType::isLiteral()
cdef int LLVMIsLiteralStruct(LLVMTypeRef StructTy) nogil


# 
# Obtain the element type of an array or vector type.
# 
# This currently also works for pointer types, but this usage is deprecated.
# 
# @see llvm::SequentialType::getElementType()
cdef LLVMTypeRef LLVMGetElementType(LLVMTypeRef Ty) nogil


# 
# Returns type's subtypes
# 
# @see llvm::Type::subtypes()
cdef void LLVMGetSubtypes(LLVMTypeRef Tp,LLVMTypeRef* Arr) nogil


# 
#  Return the number of types in the derived type.
# 
# @see llvm::Type::getNumContainedTypes()
cdef unsigned int LLVMGetNumContainedTypes(LLVMTypeRef Tp) nogil


# 
# Create a fixed size array type that refers to a specific type.
# 
# The created type will exist in the context that its element type
# exists in.
# 
# @see llvm::ArrayType::get()
cdef LLVMTypeRef LLVMArrayType(LLVMTypeRef ElementType,unsigned int ElementCount) nogil


# 
# Obtain the length of an array type.
# 
# This only works on types that represent arrays.
# 
# @see llvm::ArrayType::getNumElements()
cdef unsigned int LLVMGetArrayLength(LLVMTypeRef ArrayTy) nogil


# 
# Create a pointer type that points to a defined type.
# 
# The created type will exist in the context that its pointee type
# exists in.
# 
# @see llvm::PointerType::get()
cdef LLVMTypeRef LLVMPointerType(LLVMTypeRef ElementType,unsigned int AddressSpace) nogil


# 
# Determine whether a pointer is opaque.
# 
# True if this is an instance of an opaque PointerType.
# 
# @see llvm::Type::isOpaquePointerTy()
cdef int LLVMPointerTypeIsOpaque(LLVMTypeRef Ty) nogil


# 
# Create an opaque pointer type in a context.
# 
# @see llvm::PointerType::get()
cdef LLVMTypeRef LLVMPointerTypeInContext(LLVMContextRef C,unsigned int AddressSpace) nogil


# 
# Obtain the address space of a pointer type.
# 
# This only works on types that represent pointers.
# 
# @see llvm::PointerType::getAddressSpace()
cdef unsigned int LLVMGetPointerAddressSpace(LLVMTypeRef PointerTy) nogil


# 
# Create a vector type that contains a defined type and has a specific
# number of elements.
# 
# The created type will exist in the context thats its element type
# exists in.
# 
# @see llvm::VectorType::get()
cdef LLVMTypeRef LLVMVectorType(LLVMTypeRef ElementType,unsigned int ElementCount) nogil


# 
# Create a vector type that contains a defined type and has a scalable
# number of elements.
# 
# The created type will exist in the context thats its element type
# exists in.
# 
# @see llvm::ScalableVectorType::get()
cdef LLVMTypeRef LLVMScalableVectorType(LLVMTypeRef ElementType,unsigned int ElementCount) nogil


# 
# Obtain the (possibly scalable) number of elements in a vector type.
# 
# This only works on types that represent vectors (fixed or scalable).
# 
# @see llvm::VectorType::getNumElements()
cdef unsigned int LLVMGetVectorSize(LLVMTypeRef VectorTy) nogil


# 
# Create a void type in a context.
cdef LLVMTypeRef LLVMVoidTypeInContext(LLVMContextRef C) nogil


# 
# Create a label type in a context.
cdef LLVMTypeRef LLVMLabelTypeInContext(LLVMContextRef C) nogil


# 
# Create a X86 MMX type in a context.
cdef LLVMTypeRef LLVMX86MMXTypeInContext(LLVMContextRef C) nogil


# 
# Create a X86 AMX type in a context.
cdef LLVMTypeRef LLVMX86AMXTypeInContext(LLVMContextRef C) nogil


# 
# Create a token type in a context.
cdef LLVMTypeRef LLVMTokenTypeInContext(LLVMContextRef C) nogil


# 
# Create a metadata type in a context.
cdef LLVMTypeRef LLVMMetadataTypeInContext(LLVMContextRef C) nogil


# 
# These are similar to the above functions except they operate on the
# global context.
cdef LLVMTypeRef LLVMVoidType() nogil



cdef LLVMTypeRef LLVMLabelType() nogil



cdef LLVMTypeRef LLVMX86MMXType() nogil



cdef LLVMTypeRef LLVMX86AMXType() nogil


# 
# Create a target extension type in LLVM context.
cdef LLVMTypeRef LLVMTargetExtTypeInContext(LLVMContextRef C,const char * Name,LLVMTypeRef* TypeParams,unsigned int TypeParamCount,unsigned int * IntParams,unsigned int IntParamCount) nogil


# 
# Obtain the type of a value.
# 
# @see llvm::Value::getType()
cdef LLVMTypeRef LLVMTypeOf(LLVMValueRef Val) nogil


# 
# Obtain the enumerated type of a Value instance.
# 
# @see llvm::Value::getValueID()
cdef LLVMValueKind LLVMGetValueKind(LLVMValueRef Val) nogil


# 
# Obtain the string name of a value.
# 
# @see llvm::Value::getName()
cdef const char * LLVMGetValueName2(LLVMValueRef Val,unsigned long * Length) nogil


# 
# Set the string name of a value.
# 
# @see llvm::Value::setName()
cdef void LLVMSetValueName2(LLVMValueRef Val,const char * Name,unsigned long NameLen) nogil


# 
# Dump a representation of a value to stderr.
# 
# @see llvm::Value::dump()
cdef void LLVMDumpValue(LLVMValueRef Val) nogil


# 
# Return a string representation of the value. Use
# LLVMDisposeMessage to free the string.
# 
# @see llvm::Value::print()
cdef char * LLVMPrintValueToString(LLVMValueRef Val) nogil


# 
# Replace all uses of a value with another one.
# 
# @see llvm::Value::replaceAllUsesWith()
cdef void LLVMReplaceAllUsesWith(LLVMValueRef OldVal,LLVMValueRef NewVal) nogil


# 
# Determine whether the specified value instance is constant.
cdef int LLVMIsConstant(LLVMValueRef Val) nogil


# 
# Determine whether a value instance is undefined.
cdef int LLVMIsUndef(LLVMValueRef Val) nogil


# 
# Determine whether a value instance is poisonous.
cdef int LLVMIsPoison(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAArgument(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsABasicBlock(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAInlineAsm(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAUser(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAConstant(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsABlockAddress(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAConstantAggregateZero(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAConstantArray(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAConstantDataSequential(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAConstantDataArray(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAConstantDataVector(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAConstantExpr(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAConstantFP(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAConstantInt(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAConstantPointerNull(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAConstantStruct(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAConstantTokenNone(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAConstantVector(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAGlobalValue(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAGlobalAlias(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAGlobalObject(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAFunction(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAGlobalVariable(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAGlobalIFunc(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAUndefValue(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAPoisonValue(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAInstruction(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAUnaryOperator(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsABinaryOperator(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsACallInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAIntrinsicInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsADbgInfoIntrinsic(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsADbgVariableIntrinsic(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsADbgDeclareInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsADbgLabelInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAMemIntrinsic(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAMemCpyInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAMemMoveInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAMemSetInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsACmpInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAFCmpInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAICmpInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAExtractElementInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAGetElementPtrInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAInsertElementInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAInsertValueInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsALandingPadInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAPHINode(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsASelectInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAShuffleVectorInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAStoreInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsABranchInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAIndirectBrInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAInvokeInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAReturnInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsASwitchInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAUnreachableInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAResumeInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsACleanupReturnInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsACatchReturnInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsACatchSwitchInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsACallBrInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAFuncletPadInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsACatchPadInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsACleanupPadInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAUnaryInstruction(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAAllocaInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsACastInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAAddrSpaceCastInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsABitCastInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAFPExtInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAFPToSIInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAFPToUIInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAFPTruncInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAIntToPtrInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAPtrToIntInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsASExtInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsASIToFPInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsATruncInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAUIToFPInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAZExtInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAExtractValueInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsALoadInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAVAArgInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAFreezeInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAAtomicCmpXchgInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAAtomicRMWInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAFenceInst(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAMDNode(LLVMValueRef Val) nogil



cdef LLVMValueRef LLVMIsAMDString(LLVMValueRef Val) nogil


# Deprecated: Use LLVMGetValueName2 instead. */
cdef const char * LLVMGetValueName(LLVMValueRef Val) nogil


# Deprecated: Use LLVMSetValueName2 instead. */
cdef void LLVMSetValueName(LLVMValueRef Val,const char * Name) nogil


# 
# Obtain the first use of a value.
# 
# Uses are obtained in an iterator fashion. First, call this function
# to obtain a reference to the first use. Then, call LLVMGetNextUse()
# on that instance and all subsequently obtained instances until
# LLVMGetNextUse() returns NULL.
# 
# @see llvm::Value::use_begin()
cdef LLVMUseRef LLVMGetFirstUse(LLVMValueRef Val) nogil


# 
# Obtain the next use of a value.
# 
# This effectively advances the iterator. It returns NULL if you are on
# the final use and no more are available.
cdef LLVMUseRef LLVMGetNextUse(LLVMUseRef U) nogil


# 
# Obtain the user value for a user.
# 
# The returned value corresponds to a llvm::User type.
# 
# @see llvm::Use::getUser()
cdef LLVMValueRef LLVMGetUser(LLVMUseRef U) nogil


# 
# Obtain the value this use corresponds to.
# 
# @see llvm::Use::get().
cdef LLVMValueRef LLVMGetUsedValue(LLVMUseRef U) nogil


# 
# Obtain an operand at a specific index in a llvm::User value.
# 
# @see llvm::User::getOperand()
cdef LLVMValueRef LLVMGetOperand(LLVMValueRef Val,unsigned int Index) nogil


# 
# Obtain the use of an operand at a specific index in a llvm::User value.
# 
# @see llvm::User::getOperandUse()
cdef LLVMUseRef LLVMGetOperandUse(LLVMValueRef Val,unsigned int Index) nogil


# 
# Set an operand at a specific index in a llvm::User value.
# 
# @see llvm::User::setOperand()
cdef void LLVMSetOperand(LLVMValueRef User,unsigned int Index,LLVMValueRef Val) nogil


# 
# Obtain the number of operands in a llvm::User value.
# 
# @see llvm::User::getNumOperands()
cdef int LLVMGetNumOperands(LLVMValueRef Val) nogil


# 
# Obtain a constant value referring to the null instance of a type.
# 
# @see llvm::Constant::getNullValue()
cdef LLVMValueRef LLVMConstNull(LLVMTypeRef Ty) nogil


# 
# Obtain a constant value referring to the instance of a type
# consisting of all ones.
# 
# This is only valid for integer types.
# 
# @see llvm::Constant::getAllOnesValue()
cdef LLVMValueRef LLVMConstAllOnes(LLVMTypeRef Ty) nogil


# 
# Obtain a constant value referring to an undefined value of a type.
# 
# @see llvm::UndefValue::get()
cdef LLVMValueRef LLVMGetUndef(LLVMTypeRef Ty) nogil


# 
# Obtain a constant value referring to a poison value of a type.
# 
# @see llvm::PoisonValue::get()
cdef LLVMValueRef LLVMGetPoison(LLVMTypeRef Ty) nogil


# 
# Determine whether a value instance is null.
# 
# @see llvm::Constant::isNullValue()
cdef int LLVMIsNull(LLVMValueRef Val) nogil


# 
# Obtain a constant that is a constant pointer pointing to NULL for a
# specified type.
cdef LLVMValueRef LLVMConstPointerNull(LLVMTypeRef Ty) nogil


# 
# Obtain a constant value for an integer type.
# 
# The returned value corresponds to a llvm::ConstantInt.
# 
# @see llvm::ConstantInt::get()
# 
# @param IntTy Integer type to obtain value of.
# @param N The value the returned instance should refer to.
# @param SignExtend Whether to sign extend the produced value.
cdef LLVMValueRef LLVMConstInt(LLVMTypeRef IntTy,unsigned long long N,int SignExtend) nogil


# 
# Obtain a constant value for an integer of arbitrary precision.
# 
# @see llvm::ConstantInt::get()
cdef LLVMValueRef LLVMConstIntOfArbitraryPrecision(LLVMTypeRef IntTy,unsigned int NumWords,const unsigned long* Words) nogil


# 
# Obtain a constant value for an integer parsed from a string.
# 
# A similar API, LLVMConstIntOfStringAndSize is also available. If the
# string's length is available, it is preferred to call that function
# instead.
# 
# @see llvm::ConstantInt::get()
cdef LLVMValueRef LLVMConstIntOfString(LLVMTypeRef IntTy,const char * Text,unsigned char Radix) nogil


# 
# Obtain a constant value for an integer parsed from a string with
# specified length.
# 
# @see llvm::ConstantInt::get()
cdef LLVMValueRef LLVMConstIntOfStringAndSize(LLVMTypeRef IntTy,const char * Text,unsigned int SLen,unsigned char Radix) nogil


# 
# Obtain a constant value referring to a double floating point value.
cdef LLVMValueRef LLVMConstReal(LLVMTypeRef RealTy,double N) nogil


# 
# Obtain a constant for a floating point value parsed from a string.
# 
# A similar API, LLVMConstRealOfStringAndSize is also available. It
# should be used if the input string's length is known.
cdef LLVMValueRef LLVMConstRealOfString(LLVMTypeRef RealTy,const char * Text) nogil


# 
# Obtain a constant for a floating point value parsed from a string.
cdef LLVMValueRef LLVMConstRealOfStringAndSize(LLVMTypeRef RealTy,const char * Text,unsigned int SLen) nogil


# 
# Obtain the zero extended value for an integer constant value.
# 
# @see llvm::ConstantInt::getZExtValue()
cdef unsigned long long LLVMConstIntGetZExtValue(LLVMValueRef ConstantVal) nogil


# 
# Obtain the sign extended value for an integer constant value.
# 
# @see llvm::ConstantInt::getSExtValue()
cdef long long LLVMConstIntGetSExtValue(LLVMValueRef ConstantVal) nogil


# 
# Obtain the double value for an floating point constant value.
# losesInfo indicates if some precision was lost in the conversion.
# 
# @see llvm::ConstantFP::getDoubleValue
cdef double LLVMConstRealGetDouble(LLVMValueRef ConstantVal,int * losesInfo) nogil


# 
# Create a ConstantDataSequential and initialize it with a string.
# 
# @see llvm::ConstantDataArray::getString()
cdef LLVMValueRef LLVMConstStringInContext(LLVMContextRef C,const char * Str,unsigned int Length,int DontNullTerminate) nogil


# 
# Create a ConstantDataSequential with string content in the global context.
# 
# This is the same as LLVMConstStringInContext except it operates on the
# global context.
# 
# @see LLVMConstStringInContext()
# @see llvm::ConstantDataArray::getString()
cdef LLVMValueRef LLVMConstString(const char * Str,unsigned int Length,int DontNullTerminate) nogil


# 
# Returns true if the specified constant is an array of i8.
# 
# @see ConstantDataSequential::getAsString()
cdef int LLVMIsConstantString(LLVMValueRef c) nogil


# 
# Get the given constant data sequential as a string.
# 
# @see ConstantDataSequential::getAsString()
cdef const char * LLVMGetAsString(LLVMValueRef c,unsigned long * Length) nogil


# 
# Create an anonymous ConstantStruct with the specified values.
# 
# @see llvm::ConstantStruct::getAnon()
cdef LLVMValueRef LLVMConstStructInContext(LLVMContextRef C,LLVMValueRef* ConstantVals,unsigned int Count,int Packed) nogil


# 
# Create a ConstantStruct in the global Context.
# 
# This is the same as LLVMConstStructInContext except it operates on the
# global Context.
# 
# @see LLVMConstStructInContext()
cdef LLVMValueRef LLVMConstStruct(LLVMValueRef* ConstantVals,unsigned int Count,int Packed) nogil


# 
# Create a ConstantArray from values.
# 
# @see llvm::ConstantArray::get()
cdef LLVMValueRef LLVMConstArray(LLVMTypeRef ElementTy,LLVMValueRef* ConstantVals,unsigned int Length) nogil


# 
# Create a non-anonymous ConstantStruct from values.
# 
# @see llvm::ConstantStruct::get()
cdef LLVMValueRef LLVMConstNamedStruct(LLVMTypeRef StructTy,LLVMValueRef* ConstantVals,unsigned int Count) nogil


# 
# Get element of a constant aggregate (struct, array or vector) at the
# specified index. Returns null if the index is out of range, or it's not
# possible to determine the element (e.g., because the constant is a
# constant expression.)
# 
# @see llvm::Constant::getAggregateElement()
cdef LLVMValueRef LLVMGetAggregateElement(LLVMValueRef C,unsigned int Idx) nogil



cdef LLVMValueRef LLVMGetElementAsConstant(LLVMValueRef C,unsigned int idx) nogil


# 
# Create a ConstantVector from values.
# 
# @see llvm::ConstantVector::get()
cdef LLVMValueRef LLVMConstVector(LLVMValueRef* ScalarConstantVals,unsigned int Size) nogil


# 
# @defgroup LLVMCCoreValueConstantExpressions Constant Expressions
# 
# Functions in this group correspond to APIs on llvm::ConstantExpr.
# 
# @see llvm::ConstantExpr.
# 
# @{
cdef LLVMOpcode LLVMGetConstOpcode(LLVMValueRef ConstantVal) nogil



cdef LLVMValueRef LLVMAlignOf(LLVMTypeRef Ty) nogil



cdef LLVMValueRef LLVMSizeOf(LLVMTypeRef Ty) nogil



cdef LLVMValueRef LLVMConstNeg(LLVMValueRef ConstantVal) nogil



cdef LLVMValueRef LLVMConstNSWNeg(LLVMValueRef ConstantVal) nogil



cdef LLVMValueRef LLVMConstNUWNeg(LLVMValueRef ConstantVal) nogil



cdef LLVMValueRef LLVMConstNot(LLVMValueRef ConstantVal) nogil



cdef LLVMValueRef LLVMConstAdd(LLVMValueRef LHSConstant,LLVMValueRef RHSConstant) nogil



cdef LLVMValueRef LLVMConstNSWAdd(LLVMValueRef LHSConstant,LLVMValueRef RHSConstant) nogil



cdef LLVMValueRef LLVMConstNUWAdd(LLVMValueRef LHSConstant,LLVMValueRef RHSConstant) nogil



cdef LLVMValueRef LLVMConstSub(LLVMValueRef LHSConstant,LLVMValueRef RHSConstant) nogil



cdef LLVMValueRef LLVMConstNSWSub(LLVMValueRef LHSConstant,LLVMValueRef RHSConstant) nogil



cdef LLVMValueRef LLVMConstNUWSub(LLVMValueRef LHSConstant,LLVMValueRef RHSConstant) nogil



cdef LLVMValueRef LLVMConstMul(LLVMValueRef LHSConstant,LLVMValueRef RHSConstant) nogil



cdef LLVMValueRef LLVMConstNSWMul(LLVMValueRef LHSConstant,LLVMValueRef RHSConstant) nogil



cdef LLVMValueRef LLVMConstNUWMul(LLVMValueRef LHSConstant,LLVMValueRef RHSConstant) nogil



cdef LLVMValueRef LLVMConstAnd(LLVMValueRef LHSConstant,LLVMValueRef RHSConstant) nogil



cdef LLVMValueRef LLVMConstOr(LLVMValueRef LHSConstant,LLVMValueRef RHSConstant) nogil



cdef LLVMValueRef LLVMConstXor(LLVMValueRef LHSConstant,LLVMValueRef RHSConstant) nogil



cdef LLVMValueRef LLVMConstICmp(LLVMIntPredicate Predicate,LLVMValueRef LHSConstant,LLVMValueRef RHSConstant) nogil



cdef LLVMValueRef LLVMConstFCmp(LLVMRealPredicate Predicate,LLVMValueRef LHSConstant,LLVMValueRef RHSConstant) nogil



cdef LLVMValueRef LLVMConstShl(LLVMValueRef LHSConstant,LLVMValueRef RHSConstant) nogil



cdef LLVMValueRef LLVMConstLShr(LLVMValueRef LHSConstant,LLVMValueRef RHSConstant) nogil



cdef LLVMValueRef LLVMConstAShr(LLVMValueRef LHSConstant,LLVMValueRef RHSConstant) nogil



cdef LLVMValueRef LLVMConstGEP2(LLVMTypeRef Ty,LLVMValueRef ConstantVal,LLVMValueRef* ConstantIndices,unsigned int NumIndices) nogil



cdef LLVMValueRef LLVMConstInBoundsGEP2(LLVMTypeRef Ty,LLVMValueRef ConstantVal,LLVMValueRef* ConstantIndices,unsigned int NumIndices) nogil



cdef LLVMValueRef LLVMConstTrunc(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstSExt(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstZExt(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstFPTrunc(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstFPExt(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstUIToFP(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstSIToFP(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstFPToUI(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstFPToSI(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstPtrToInt(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstIntToPtr(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstBitCast(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstAddrSpaceCast(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstZExtOrBitCast(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstSExtOrBitCast(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstTruncOrBitCast(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstPointerCast(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstIntCast(LLVMValueRef ConstantVal,LLVMTypeRef ToType,int isSigned) nogil



cdef LLVMValueRef LLVMConstFPCast(LLVMValueRef ConstantVal,LLVMTypeRef ToType) nogil



cdef LLVMValueRef LLVMConstSelect(LLVMValueRef ConstantCondition,LLVMValueRef ConstantIfTrue,LLVMValueRef ConstantIfFalse) nogil



cdef LLVMValueRef LLVMConstExtractElement(LLVMValueRef VectorConstant,LLVMValueRef IndexConstant) nogil



cdef LLVMValueRef LLVMConstInsertElement(LLVMValueRef VectorConstant,LLVMValueRef ElementValueConstant,LLVMValueRef IndexConstant) nogil



cdef LLVMValueRef LLVMConstShuffleVector(LLVMValueRef VectorAConstant,LLVMValueRef VectorBConstant,LLVMValueRef MaskConstant) nogil



cdef LLVMValueRef LLVMBlockAddress(LLVMValueRef F,LLVMBasicBlockRef BB) nogil


# Deprecated: Use LLVMGetInlineAsm instead. */
cdef LLVMValueRef LLVMConstInlineAsm(LLVMTypeRef Ty,const char * AsmString,const char * Constraints,int HasSideEffects,int IsAlignStack) nogil


# 
# @defgroup LLVMCCoreValueConstantGlobals Global Values
# 
# This group contains functions that operate on global values. Functions in
# this group relate to functions in the llvm::GlobalValue class tree.
# 
# @see llvm::GlobalValue
# 
# @{
cdef LLVMModuleRef LLVMGetGlobalParent(LLVMValueRef Global) nogil



cdef int LLVMIsDeclaration(LLVMValueRef Global) nogil



cdef LLVMLinkage LLVMGetLinkage(LLVMValueRef Global) nogil



cdef void LLVMSetLinkage(LLVMValueRef Global,LLVMLinkage Linkage) nogil



cdef const char * LLVMGetSection(LLVMValueRef Global) nogil



cdef void LLVMSetSection(LLVMValueRef Global,const char * Section) nogil



cdef LLVMVisibility LLVMGetVisibility(LLVMValueRef Global) nogil



cdef void LLVMSetVisibility(LLVMValueRef Global,LLVMVisibility Viz) nogil



cdef LLVMDLLStorageClass LLVMGetDLLStorageClass(LLVMValueRef Global) nogil



cdef void LLVMSetDLLStorageClass(LLVMValueRef Global,LLVMDLLStorageClass Class) nogil



cdef LLVMUnnamedAddr LLVMGetUnnamedAddress(LLVMValueRef Global) nogil



cdef void LLVMSetUnnamedAddress(LLVMValueRef Global,LLVMUnnamedAddr UnnamedAddr) nogil


# 
# Returns the "value type" of a global value.  This differs from the formal
# type of a global value which is always a pointer type.
# 
# @see llvm::GlobalValue::getValueType()
cdef LLVMTypeRef LLVMGlobalGetValueType(LLVMValueRef Global) nogil


# Deprecated: Use LLVMGetUnnamedAddress instead. */
cdef int LLVMHasUnnamedAddr(LLVMValueRef Global) nogil


# Deprecated: Use LLVMSetUnnamedAddress instead. */
cdef void LLVMSetUnnamedAddr(LLVMValueRef Global,int HasUnnamedAddr) nogil


# 
# Obtain the preferred alignment of the value.
# @see llvm::AllocaInst::getAlignment()
# @see llvm::LoadInst::getAlignment()
# @see llvm::StoreInst::getAlignment()
# @see llvm::AtomicRMWInst::setAlignment()
# @see llvm::AtomicCmpXchgInst::setAlignment()
# @see llvm::GlobalValue::getAlignment()
cdef unsigned int LLVMGetAlignment(LLVMValueRef V) nogil


# 
# Set the preferred alignment of the value.
# @see llvm::AllocaInst::setAlignment()
# @see llvm::LoadInst::setAlignment()
# @see llvm::StoreInst::setAlignment()
# @see llvm::AtomicRMWInst::setAlignment()
# @see llvm::AtomicCmpXchgInst::setAlignment()
# @see llvm::GlobalValue::setAlignment()
cdef void LLVMSetAlignment(LLVMValueRef V,unsigned int Bytes) nogil


# 
# Sets a metadata attachment, erasing the existing metadata attachment if
# it already exists for the given kind.
# 
# @see llvm::GlobalObject::setMetadata()
cdef void LLVMGlobalSetMetadata(LLVMValueRef Global,unsigned int Kind,LLVMMetadataRef MD) nogil


# 
# Erases a metadata attachment of the given kind if it exists.
# 
# @see llvm::GlobalObject::eraseMetadata()
cdef void LLVMGlobalEraseMetadata(LLVMValueRef Global,unsigned int Kind) nogil


# 
# Removes all metadata attachments from this value.
# 
# @see llvm::GlobalObject::clearMetadata()
cdef void LLVMGlobalClearMetadata(LLVMValueRef Global) nogil


# 
# Retrieves an array of metadata entries representing the metadata attached to
# this value. The caller is responsible for freeing this array by calling
# \c LLVMDisposeValueMetadataEntries.
# 
# @see llvm::GlobalObject::getAllMetadata()
cdef LLVMOpaqueValueMetadataEntry * LLVMGlobalCopyAllMetadata(LLVMValueRef Value,unsigned long * NumEntries) nogil


# 
# Destroys value metadata entries.
cdef void LLVMDisposeValueMetadataEntries(LLVMOpaqueValueMetadataEntry * Entries) nogil


# 
# Returns the kind of a value metadata entry at a specific index.
cdef unsigned int LLVMValueMetadataEntriesGetKind(LLVMOpaqueValueMetadataEntry * Entries,unsigned int Index) nogil


# 
# Returns the underlying metadata node of a value metadata entry at a
# specific index.
cdef LLVMMetadataRef LLVMValueMetadataEntriesGetMetadata(LLVMOpaqueValueMetadataEntry * Entries,unsigned int Index) nogil


# 
# @defgroup LLVMCoreValueConstantGlobalVariable Global Variables
# 
# This group contains functions that operate on global variable values.
# 
# @see llvm::GlobalVariable
# 
# @{
cdef LLVMValueRef LLVMAddGlobal(LLVMModuleRef M,LLVMTypeRef Ty,const char * Name) nogil



cdef LLVMValueRef LLVMAddGlobalInAddressSpace(LLVMModuleRef M,LLVMTypeRef Ty,const char * Name,unsigned int AddressSpace) nogil



cdef LLVMValueRef LLVMGetNamedGlobal(LLVMModuleRef M,const char * Name) nogil



cdef LLVMValueRef LLVMGetFirstGlobal(LLVMModuleRef M) nogil



cdef LLVMValueRef LLVMGetLastGlobal(LLVMModuleRef M) nogil



cdef LLVMValueRef LLVMGetNextGlobal(LLVMValueRef GlobalVar) nogil



cdef LLVMValueRef LLVMGetPreviousGlobal(LLVMValueRef GlobalVar) nogil



cdef void LLVMDeleteGlobal(LLVMValueRef GlobalVar) nogil



cdef LLVMValueRef LLVMGetInitializer(LLVMValueRef GlobalVar) nogil



cdef void LLVMSetInitializer(LLVMValueRef GlobalVar,LLVMValueRef ConstantVal) nogil



cdef int LLVMIsThreadLocal(LLVMValueRef GlobalVar) nogil



cdef void LLVMSetThreadLocal(LLVMValueRef GlobalVar,int IsThreadLocal) nogil



cdef int LLVMIsGlobalConstant(LLVMValueRef GlobalVar) nogil



cdef void LLVMSetGlobalConstant(LLVMValueRef GlobalVar,int IsConstant) nogil



cdef LLVMThreadLocalMode LLVMGetThreadLocalMode(LLVMValueRef GlobalVar) nogil



cdef void LLVMSetThreadLocalMode(LLVMValueRef GlobalVar,LLVMThreadLocalMode Mode) nogil



cdef int LLVMIsExternallyInitialized(LLVMValueRef GlobalVar) nogil



cdef void LLVMSetExternallyInitialized(LLVMValueRef GlobalVar,int IsExtInit) nogil


# 
# Add a GlobalAlias with the given value type, address space and aliasee.
# 
# @see llvm::GlobalAlias::create()
cdef LLVMValueRef LLVMAddAlias2(LLVMModuleRef M,LLVMTypeRef ValueTy,unsigned int AddrSpace,LLVMValueRef Aliasee,const char * Name) nogil


# 
# Obtain a GlobalAlias value from a Module by its name.
# 
# The returned value corresponds to a llvm::GlobalAlias value.
# 
# @see llvm::Module::getNamedAlias()
cdef LLVMValueRef LLVMGetNamedGlobalAlias(LLVMModuleRef M,const char * Name,unsigned long NameLen) nogil


# 
# Obtain an iterator to the first GlobalAlias in a Module.
# 
# @see llvm::Module::alias_begin()
cdef LLVMValueRef LLVMGetFirstGlobalAlias(LLVMModuleRef M) nogil


# 
# Obtain an iterator to the last GlobalAlias in a Module.
# 
# @see llvm::Module::alias_end()
cdef LLVMValueRef LLVMGetLastGlobalAlias(LLVMModuleRef M) nogil


# 
# Advance a GlobalAlias iterator to the next GlobalAlias.
# 
# Returns NULL if the iterator was already at the end and there are no more
# global aliases.
cdef LLVMValueRef LLVMGetNextGlobalAlias(LLVMValueRef GA) nogil


# 
# Decrement a GlobalAlias iterator to the previous GlobalAlias.
# 
# Returns NULL if the iterator was already at the beginning and there are
# no previous global aliases.
cdef LLVMValueRef LLVMGetPreviousGlobalAlias(LLVMValueRef GA) nogil


# 
# Retrieve the target value of an alias.
cdef LLVMValueRef LLVMAliasGetAliasee(LLVMValueRef Alias) nogil


# 
# Set the target value of an alias.
cdef void LLVMAliasSetAliasee(LLVMValueRef Alias,LLVMValueRef Aliasee) nogil


# 
# Remove a function from its containing module and deletes it.
# 
# @see llvm::Function::eraseFromParent()
cdef void LLVMDeleteFunction(LLVMValueRef Fn) nogil


# 
# Check whether the given function has a personality function.
# 
# @see llvm::Function::hasPersonalityFn()
cdef int LLVMHasPersonalityFn(LLVMValueRef Fn) nogil


# 
# Obtain the personality function attached to the function.
# 
# @see llvm::Function::getPersonalityFn()
cdef LLVMValueRef LLVMGetPersonalityFn(LLVMValueRef Fn) nogil


# 
# Set the personality function attached to the function.
# 
# @see llvm::Function::setPersonalityFn()
cdef void LLVMSetPersonalityFn(LLVMValueRef Fn,LLVMValueRef PersonalityFn) nogil


# 
# Obtain the intrinsic ID number which matches the given function name.
# 
# @see llvm::Function::lookupIntrinsicID()
cdef unsigned int LLVMLookupIntrinsicID(const char * Name,unsigned long NameLen) nogil


# 
# Obtain the ID number from a function instance.
# 
# @see llvm::Function::getIntrinsicID()
cdef unsigned int LLVMGetIntrinsicID(LLVMValueRef Fn) nogil


# 
# Create or insert the declaration of an intrinsic.  For overloaded intrinsics,
# parameter types must be provided to uniquely identify an overload.
# 
# @see llvm::Intrinsic::getDeclaration()
cdef LLVMValueRef LLVMGetIntrinsicDeclaration(LLVMModuleRef Mod,unsigned int ID,LLVMTypeRef* ParamTypes,unsigned long ParamCount) nogil


# 
# Retrieves the type of an intrinsic.  For overloaded intrinsics, parameter
# types must be provided to uniquely identify an overload.
# 
# @see llvm::Intrinsic::getType()
cdef LLVMTypeRef LLVMIntrinsicGetType(LLVMContextRef Ctx,unsigned int ID,LLVMTypeRef* ParamTypes,unsigned long ParamCount) nogil


# 
# Retrieves the name of an intrinsic.
# 
# @see llvm::Intrinsic::getName()
cdef const char * LLVMIntrinsicGetName(unsigned int ID,unsigned long * NameLength) nogil


# Deprecated: Use LLVMIntrinsicCopyOverloadedName2 instead. */
cdef const char * LLVMIntrinsicCopyOverloadedName(unsigned int ID,LLVMTypeRef* ParamTypes,unsigned long ParamCount,unsigned long * NameLength) nogil


# 
# Copies the name of an overloaded intrinsic identified by a given list of
# parameter types.
# 
# Unlike LLVMIntrinsicGetName, the caller is responsible for freeing the
# returned string.
# 
# This version also supports unnamed types.
# 
# @see llvm::Intrinsic::getName()
cdef const char * LLVMIntrinsicCopyOverloadedName2(LLVMModuleRef Mod,unsigned int ID,LLVMTypeRef* ParamTypes,unsigned long ParamCount,unsigned long * NameLength) nogil


# 
# Obtain if the intrinsic identified by the given ID is overloaded.
# 
# @see llvm::Intrinsic::isOverloaded()
cdef int LLVMIntrinsicIsOverloaded(unsigned int ID) nogil


# 
# Obtain the calling function of a function.
# 
# The returned value corresponds to the LLVMCallConv enumeration.
# 
# @see llvm::Function::getCallingConv()
cdef unsigned int LLVMGetFunctionCallConv(LLVMValueRef Fn) nogil


# 
# Set the calling convention of a function.
# 
# @see llvm::Function::setCallingConv()
# 
# @param Fn Function to operate on
# @param CC LLVMCallConv to set calling convention to
cdef void LLVMSetFunctionCallConv(LLVMValueRef Fn,unsigned int CC) nogil


# 
# Obtain the name of the garbage collector to use during code
# generation.
# 
# @see llvm::Function::getGC()
cdef const char * LLVMGetGC(LLVMValueRef Fn) nogil


# 
# Define the garbage collector to use during code generation.
# 
# @see llvm::Function::setGC()
cdef void LLVMSetGC(LLVMValueRef Fn,const char * Name) nogil


# 
# Add an attribute to a function.
# 
# @see llvm::Function::addAttribute()
cdef void LLVMAddAttributeAtIndex(LLVMValueRef F,unsigned int Idx,LLVMAttributeRef A) nogil



cdef unsigned int LLVMGetAttributeCountAtIndex(LLVMValueRef F,unsigned int Idx) nogil



cdef void LLVMGetAttributesAtIndex(LLVMValueRef F,unsigned int Idx,LLVMAttributeRef* Attrs) nogil



cdef LLVMAttributeRef LLVMGetEnumAttributeAtIndex(LLVMValueRef F,unsigned int Idx,unsigned int KindID) nogil



cdef LLVMAttributeRef LLVMGetStringAttributeAtIndex(LLVMValueRef F,unsigned int Idx,const char * K,unsigned int KLen) nogil



cdef void LLVMRemoveEnumAttributeAtIndex(LLVMValueRef F,unsigned int Idx,unsigned int KindID) nogil



cdef void LLVMRemoveStringAttributeAtIndex(LLVMValueRef F,unsigned int Idx,const char * K,unsigned int KLen) nogil


# 
# Add a target-dependent attribute to a function
# @see llvm::AttrBuilder::addAttribute()
cdef void LLVMAddTargetDependentFunctionAttr(LLVMValueRef Fn,const char * A,const char * V) nogil


# 
# Obtain the number of parameters in a function.
# 
# @see llvm::Function::arg_size()
cdef unsigned int LLVMCountParams(LLVMValueRef Fn) nogil


# 
# Obtain the parameters in a function.
# 
# The takes a pointer to a pre-allocated array of LLVMValueRef that is
# at least LLVMCountParams() long. This array will be filled with
# LLVMValueRef instances which correspond to the parameters the
# function receives. Each LLVMValueRef corresponds to a llvm::Argument
# instance.
# 
# @see llvm::Function::arg_begin()
cdef void LLVMGetParams(LLVMValueRef Fn,LLVMValueRef* Params) nogil


# 
# Obtain the parameter at the specified index.
# 
# Parameters are indexed from 0.
# 
# @see llvm::Function::arg_begin()
cdef LLVMValueRef LLVMGetParam(LLVMValueRef Fn,unsigned int Index) nogil


# 
# Obtain the function to which this argument belongs.
# 
# Unlike other functions in this group, this one takes an LLVMValueRef
# that corresponds to a llvm::Attribute.
# 
# The returned LLVMValueRef is the llvm::Function to which this
# argument belongs.
cdef LLVMValueRef LLVMGetParamParent(LLVMValueRef Inst) nogil


# 
# Obtain the first parameter to a function.
# 
# @see llvm::Function::arg_begin()
cdef LLVMValueRef LLVMGetFirstParam(LLVMValueRef Fn) nogil


# 
# Obtain the last parameter to a function.
# 
# @see llvm::Function::arg_end()
cdef LLVMValueRef LLVMGetLastParam(LLVMValueRef Fn) nogil


# 
# Obtain the next parameter to a function.
# 
# This takes an LLVMValueRef obtained from LLVMGetFirstParam() (which is
# actually a wrapped iterator) and obtains the next parameter from the
# underlying iterator.
cdef LLVMValueRef LLVMGetNextParam(LLVMValueRef Arg) nogil


# 
# Obtain the previous parameter to a function.
# 
# This is the opposite of LLVMGetNextParam().
cdef LLVMValueRef LLVMGetPreviousParam(LLVMValueRef Arg) nogil


# 
# Set the alignment for a function parameter.
# 
# @see llvm::Argument::addAttr()
# @see llvm::AttrBuilder::addAlignmentAttr()
cdef void LLVMSetParamAlignment(LLVMValueRef Arg,unsigned int Align) nogil


# 
# Add a global indirect function to a module under a specified name.
# 
# @see llvm::GlobalIFunc::create()
cdef LLVMValueRef LLVMAddGlobalIFunc(LLVMModuleRef M,const char * Name,unsigned long NameLen,LLVMTypeRef Ty,unsigned int AddrSpace,LLVMValueRef Resolver) nogil


# 
# Obtain a GlobalIFunc value from a Module by its name.
# 
# The returned value corresponds to a llvm::GlobalIFunc value.
# 
# @see llvm::Module::getNamedIFunc()
cdef LLVMValueRef LLVMGetNamedGlobalIFunc(LLVMModuleRef M,const char * Name,unsigned long NameLen) nogil


# 
# Obtain an iterator to the first GlobalIFunc in a Module.
# 
# @see llvm::Module::ifunc_begin()
cdef LLVMValueRef LLVMGetFirstGlobalIFunc(LLVMModuleRef M) nogil


# 
# Obtain an iterator to the last GlobalIFunc in a Module.
# 
# @see llvm::Module::ifunc_end()
cdef LLVMValueRef LLVMGetLastGlobalIFunc(LLVMModuleRef M) nogil


# 
# Advance a GlobalIFunc iterator to the next GlobalIFunc.
# 
# Returns NULL if the iterator was already at the end and there are no more
# global aliases.
cdef LLVMValueRef LLVMGetNextGlobalIFunc(LLVMValueRef IFunc) nogil


# 
# Decrement a GlobalIFunc iterator to the previous GlobalIFunc.
# 
# Returns NULL if the iterator was already at the beginning and there are
# no previous global aliases.
cdef LLVMValueRef LLVMGetPreviousGlobalIFunc(LLVMValueRef IFunc) nogil


# 
# Retrieves the resolver function associated with this indirect function, or
# NULL if it doesn't not exist.
# 
# @see llvm::GlobalIFunc::getResolver()
cdef LLVMValueRef LLVMGetGlobalIFuncResolver(LLVMValueRef IFunc) nogil


# 
# Sets the resolver function associated with this indirect function.
# 
# @see llvm::GlobalIFunc::setResolver()
cdef void LLVMSetGlobalIFuncResolver(LLVMValueRef IFunc,LLVMValueRef Resolver) nogil


# 
# Remove a global indirect function from its parent module and delete it.
# 
# @see llvm::GlobalIFunc::eraseFromParent()
cdef void LLVMEraseGlobalIFunc(LLVMValueRef IFunc) nogil


# 
# Remove a global indirect function from its parent module.
# 
# This unlinks the global indirect function from its containing module but
# keeps it alive.
# 
# @see llvm::GlobalIFunc::removeFromParent()
cdef void LLVMRemoveGlobalIFunc(LLVMValueRef IFunc) nogil


# 
# Create an MDString value from a given string value.
# 
# The MDString value does not take ownership of the given string, it remains
# the responsibility of the caller to free it.
# 
# @see llvm::MDString::get()
cdef LLVMMetadataRef LLVMMDStringInContext2(LLVMContextRef C,const char * Str,unsigned long SLen) nogil


# 
# Create an MDNode value with the given array of operands.
# 
# @see llvm::MDNode::get()
cdef LLVMMetadataRef LLVMMDNodeInContext2(LLVMContextRef C,LLVMMetadataRef* MDs,unsigned long Count) nogil


# 
# Obtain a Metadata as a Value.
cdef LLVMValueRef LLVMMetadataAsValue(LLVMContextRef C,LLVMMetadataRef MD) nogil


# 
# Obtain a Value as a Metadata.
cdef LLVMMetadataRef LLVMValueAsMetadata(LLVMValueRef Val) nogil


# 
# Obtain the underlying string from a MDString value.
# 
# @param V Instance to obtain string from.
# @param Length Memory address which will hold length of returned string.
# @return String data in MDString.
cdef const char * LLVMGetMDString(LLVMValueRef V,unsigned int * Length) nogil


# 
# Obtain the number of operands from an MDNode value.
# 
# @param V MDNode to get number of operands from.
# @return Number of operands of the MDNode.
cdef unsigned int LLVMGetMDNodeNumOperands(LLVMValueRef V) nogil


# 
# Obtain the given MDNode's operands.
# 
# The passed LLVMValueRef pointer should point to enough memory to hold all of
# the operands of the given MDNode (see LLVMGetMDNodeNumOperands) as
# LLVMValueRefs. This memory will be populated with the LLVMValueRefs of the
# MDNode's operands.
# 
# @param V MDNode to get the operands from.
# @param Dest Destination array for operands.
cdef void LLVMGetMDNodeOperands(LLVMValueRef V,LLVMValueRef* Dest) nogil


# Deprecated: Use LLVMMDStringInContext2 instead. */
cdef LLVMValueRef LLVMMDStringInContext(LLVMContextRef C,const char * Str,unsigned int SLen) nogil


# Deprecated: Use LLVMMDStringInContext2 instead. */
cdef LLVMValueRef LLVMMDString(const char * Str,unsigned int SLen) nogil


# Deprecated: Use LLVMMDNodeInContext2 instead. */
cdef LLVMValueRef LLVMMDNodeInContext(LLVMContextRef C,LLVMValueRef* Vals,unsigned int Count) nogil


# Deprecated: Use LLVMMDNodeInContext2 instead. */
cdef LLVMValueRef LLVMMDNode(LLVMValueRef* Vals,unsigned int Count) nogil


# 
# Convert a basic block instance to a value type.
cdef LLVMValueRef LLVMBasicBlockAsValue(LLVMBasicBlockRef BB) nogil


# 
# Determine whether an LLVMValueRef is itself a basic block.
cdef int LLVMValueIsBasicBlock(LLVMValueRef Val) nogil


# 
# Convert an LLVMValueRef to an LLVMBasicBlockRef instance.
cdef LLVMBasicBlockRef LLVMValueAsBasicBlock(LLVMValueRef Val) nogil


# 
# Obtain the string name of a basic block.
cdef const char * LLVMGetBasicBlockName(LLVMBasicBlockRef BB) nogil


# 
# Obtain the function to which a basic block belongs.
# 
# @see llvm::BasicBlock::getParent()
cdef LLVMValueRef LLVMGetBasicBlockParent(LLVMBasicBlockRef BB) nogil


# 
# Obtain the terminator instruction for a basic block.
# 
# If the basic block does not have a terminator (it is not well-formed
# if it doesn't), then NULL is returned.
# 
# The returned LLVMValueRef corresponds to an llvm::Instruction.
# 
# @see llvm::BasicBlock::getTerminator()
cdef LLVMValueRef LLVMGetBasicBlockTerminator(LLVMBasicBlockRef BB) nogil


# 
# Obtain the number of basic blocks in a function.
# 
# @param Fn Function value to operate on.
cdef unsigned int LLVMCountBasicBlocks(LLVMValueRef Fn) nogil


# 
# Obtain all of the basic blocks in a function.
# 
# This operates on a function value. The BasicBlocks parameter is a
# pointer to a pre-allocated array of LLVMBasicBlockRef of at least
# LLVMCountBasicBlocks() in length. This array is populated with
# LLVMBasicBlockRef instances.
cdef void LLVMGetBasicBlocks(LLVMValueRef Fn,LLVMBasicBlockRef* BasicBlocks) nogil


# 
# Obtain the first basic block in a function.
# 
# The returned basic block can be used as an iterator. You will likely
# eventually call into LLVMGetNextBasicBlock() with it.
# 
# @see llvm::Function::begin()
cdef LLVMBasicBlockRef LLVMGetFirstBasicBlock(LLVMValueRef Fn) nogil


# 
# Obtain the last basic block in a function.
# 
# @see llvm::Function::end()
cdef LLVMBasicBlockRef LLVMGetLastBasicBlock(LLVMValueRef Fn) nogil


# 
# Advance a basic block iterator.
cdef LLVMBasicBlockRef LLVMGetNextBasicBlock(LLVMBasicBlockRef BB) nogil


# 
# Go backwards in a basic block iterator.
cdef LLVMBasicBlockRef LLVMGetPreviousBasicBlock(LLVMBasicBlockRef BB) nogil


# 
# Obtain the basic block that corresponds to the entry point of a
# function.
# 
# @see llvm::Function::getEntryBlock()
cdef LLVMBasicBlockRef LLVMGetEntryBasicBlock(LLVMValueRef Fn) nogil


# 
# Insert the given basic block after the insertion point of the given builder.
# 
# The insertion point must be valid.
# 
# @see llvm::Function::BasicBlockListType::insertAfter()
cdef void LLVMInsertExistingBasicBlockAfterInsertBlock(LLVMBuilderRef Builder,LLVMBasicBlockRef BB) nogil


# 
# Append the given basic block to the basic block list of the given function.
# 
# @see llvm::Function::BasicBlockListType::push_back()
cdef void LLVMAppendExistingBasicBlock(LLVMValueRef Fn,LLVMBasicBlockRef BB) nogil


# 
# Create a new basic block without inserting it into a function.
# 
# @see llvm::BasicBlock::Create()
cdef LLVMBasicBlockRef LLVMCreateBasicBlockInContext(LLVMContextRef C,const char * Name) nogil


# 
# Append a basic block to the end of a function.
# 
# @see llvm::BasicBlock::Create()
cdef LLVMBasicBlockRef LLVMAppendBasicBlockInContext(LLVMContextRef C,LLVMValueRef Fn,const char * Name) nogil


# 
# Append a basic block to the end of a function using the global
# context.
# 
# @see llvm::BasicBlock::Create()
cdef LLVMBasicBlockRef LLVMAppendBasicBlock(LLVMValueRef Fn,const char * Name) nogil


# 
# Insert a basic block in a function before another basic block.
# 
# The function to add to is determined by the function of the
# passed basic block.
# 
# @see llvm::BasicBlock::Create()
cdef LLVMBasicBlockRef LLVMInsertBasicBlockInContext(LLVMContextRef C,LLVMBasicBlockRef BB,const char * Name) nogil


# 
# Insert a basic block in a function using the global context.
# 
# @see llvm::BasicBlock::Create()
cdef LLVMBasicBlockRef LLVMInsertBasicBlock(LLVMBasicBlockRef InsertBeforeBB,const char * Name) nogil


# 
# Remove a basic block from a function and delete it.
# 
# This deletes the basic block from its containing function and deletes
# the basic block itself.
# 
# @see llvm::BasicBlock::eraseFromParent()
cdef void LLVMDeleteBasicBlock(LLVMBasicBlockRef BB) nogil


# 
# Remove a basic block from a function.
# 
# This deletes the basic block from its containing function but keep
# the basic block alive.
# 
# @see llvm::BasicBlock::removeFromParent()
cdef void LLVMRemoveBasicBlockFromParent(LLVMBasicBlockRef BB) nogil


# 
# Move a basic block to before another one.
# 
# @see llvm::BasicBlock::moveBefore()
cdef void LLVMMoveBasicBlockBefore(LLVMBasicBlockRef BB,LLVMBasicBlockRef MovePos) nogil


# 
# Move a basic block to after another one.
# 
# @see llvm::BasicBlock::moveAfter()
cdef void LLVMMoveBasicBlockAfter(LLVMBasicBlockRef BB,LLVMBasicBlockRef MovePos) nogil


# 
# Obtain the first instruction in a basic block.
# 
# The returned LLVMValueRef corresponds to a llvm::Instruction
# instance.
cdef LLVMValueRef LLVMGetFirstInstruction(LLVMBasicBlockRef BB) nogil


# 
# Obtain the last instruction in a basic block.
# 
# The returned LLVMValueRef corresponds to an LLVM:Instruction.
cdef LLVMValueRef LLVMGetLastInstruction(LLVMBasicBlockRef BB) nogil


# 
# Determine whether an instruction has any metadata attached.
cdef int LLVMHasMetadata(LLVMValueRef Val) nogil


# 
# Return metadata associated with an instruction value.
cdef LLVMValueRef LLVMGetMetadata(LLVMValueRef Val,unsigned int KindID) nogil


# 
# Set metadata associated with an instruction value.
cdef void LLVMSetMetadata(LLVMValueRef Val,unsigned int KindID,LLVMValueRef Node) nogil


# 
# Returns the metadata associated with an instruction value, but filters out
# all the debug locations.
# 
# @see llvm::Instruction::getAllMetadataOtherThanDebugLoc()
cdef LLVMOpaqueValueMetadataEntry * LLVMInstructionGetAllMetadataOtherThanDebugLoc(LLVMValueRef Instr,unsigned long * NumEntries) nogil


# 
# Obtain the basic block to which an instruction belongs.
# 
# @see llvm::Instruction::getParent()
cdef LLVMBasicBlockRef LLVMGetInstructionParent(LLVMValueRef Inst) nogil


# 
# Obtain the instruction that occurs after the one specified.
# 
# The next instruction will be from the same basic block.
# 
# If this is the last instruction in a basic block, NULL will be
# returned.
cdef LLVMValueRef LLVMGetNextInstruction(LLVMValueRef Inst) nogil


# 
# Obtain the instruction that occurred before this one.
# 
# If the instruction is the first instruction in a basic block, NULL
# will be returned.
cdef LLVMValueRef LLVMGetPreviousInstruction(LLVMValueRef Inst) nogil


# 
# Remove an instruction.
# 
# The instruction specified is removed from its containing building
# block but is kept alive.
# 
# @see llvm::Instruction::removeFromParent()
cdef void LLVMInstructionRemoveFromParent(LLVMValueRef Inst) nogil


# 
# Remove and delete an instruction.
# 
# The instruction specified is removed from its containing building
# block and then deleted.
# 
# @see llvm::Instruction::eraseFromParent()
cdef void LLVMInstructionEraseFromParent(LLVMValueRef Inst) nogil


# 
# Delete an instruction.
# 
# The instruction specified is deleted. It must have previously been
# removed from its containing building block.
# 
# @see llvm::Value::deleteValue()
cdef void LLVMDeleteInstruction(LLVMValueRef Inst) nogil


# 
# Obtain the code opcode for an individual instruction.
# 
# @see llvm::Instruction::getOpCode()
cdef LLVMOpcode LLVMGetInstructionOpcode(LLVMValueRef Inst) nogil


# 
# Obtain the predicate of an instruction.
# 
# This is only valid for instructions that correspond to llvm::ICmpInst
# or llvm::ConstantExpr whose opcode is llvm::Instruction::ICmp.
# 
# @see llvm::ICmpInst::getPredicate()
cdef LLVMIntPredicate LLVMGetICmpPredicate(LLVMValueRef Inst) nogil


# 
# Obtain the float predicate of an instruction.
# 
# This is only valid for instructions that correspond to llvm::FCmpInst
# or llvm::ConstantExpr whose opcode is llvm::Instruction::FCmp.
# 
# @see llvm::FCmpInst::getPredicate()
cdef LLVMRealPredicate LLVMGetFCmpPredicate(LLVMValueRef Inst) nogil


# 
# Create a copy of 'this' instruction that is identical in all ways
# except the following:
#   * The instruction has no parent
#   * The instruction has no name
# 
# @see llvm::Instruction::clone()
cdef LLVMValueRef LLVMInstructionClone(LLVMValueRef Inst) nogil


# 
# Determine whether an instruction is a terminator. This routine is named to
# be compatible with historical functions that did this by querying the
# underlying C++ type.
# 
# @see llvm::Instruction::isTerminator()
cdef LLVMValueRef LLVMIsATerminatorInst(LLVMValueRef Inst) nogil


# 
# Obtain the argument count for a call instruction.
# 
# This expects an LLVMValueRef that corresponds to a llvm::CallInst,
# llvm::InvokeInst, or llvm:FuncletPadInst.
# 
# @see llvm::CallInst::getNumArgOperands()
# @see llvm::InvokeInst::getNumArgOperands()
# @see llvm::FuncletPadInst::getNumArgOperands()
cdef unsigned int LLVMGetNumArgOperands(LLVMValueRef Instr) nogil


# 
# Set the calling convention for a call instruction.
# 
# This expects an LLVMValueRef that corresponds to a llvm::CallInst or
# llvm::InvokeInst.
# 
# @see llvm::CallInst::setCallingConv()
# @see llvm::InvokeInst::setCallingConv()
cdef void LLVMSetInstructionCallConv(LLVMValueRef Instr,unsigned int CC) nogil


# 
# Obtain the calling convention for a call instruction.
# 
# This is the opposite of LLVMSetInstructionCallConv(). Reads its
# usage.
# 
# @see LLVMSetInstructionCallConv()
cdef unsigned int LLVMGetInstructionCallConv(LLVMValueRef Instr) nogil



cdef void LLVMSetInstrParamAlignment(LLVMValueRef Instr,unsigned int Idx,unsigned int Align) nogil



cdef void LLVMAddCallSiteAttribute(LLVMValueRef C,unsigned int Idx,LLVMAttributeRef A) nogil



cdef unsigned int LLVMGetCallSiteAttributeCount(LLVMValueRef C,unsigned int Idx) nogil



cdef void LLVMGetCallSiteAttributes(LLVMValueRef C,unsigned int Idx,LLVMAttributeRef* Attrs) nogil



cdef LLVMAttributeRef LLVMGetCallSiteEnumAttribute(LLVMValueRef C,unsigned int Idx,unsigned int KindID) nogil



cdef LLVMAttributeRef LLVMGetCallSiteStringAttribute(LLVMValueRef C,unsigned int Idx,const char * K,unsigned int KLen) nogil



cdef void LLVMRemoveCallSiteEnumAttribute(LLVMValueRef C,unsigned int Idx,unsigned int KindID) nogil



cdef void LLVMRemoveCallSiteStringAttribute(LLVMValueRef C,unsigned int Idx,const char * K,unsigned int KLen) nogil


# 
# Obtain the function type called by this instruction.
# 
# @see llvm::CallBase::getFunctionType()
cdef LLVMTypeRef LLVMGetCalledFunctionType(LLVMValueRef C) nogil


# 
# Obtain the pointer to the function invoked by this instruction.
# 
# This expects an LLVMValueRef that corresponds to a llvm::CallInst or
# llvm::InvokeInst.
# 
# @see llvm::CallInst::getCalledOperand()
# @see llvm::InvokeInst::getCalledOperand()
cdef LLVMValueRef LLVMGetCalledValue(LLVMValueRef Instr) nogil


# 
# Obtain whether a call instruction is a tail call.
# 
# This only works on llvm::CallInst instructions.
# 
# @see llvm::CallInst::isTailCall()
cdef int LLVMIsTailCall(LLVMValueRef CallInst) nogil


# 
# Set whether a call instruction is a tail call.
# 
# This only works on llvm::CallInst instructions.
# 
# @see llvm::CallInst::setTailCall()
cdef void LLVMSetTailCall(LLVMValueRef CallInst,int IsTailCall) nogil


# 
# Return the normal destination basic block.
# 
# This only works on llvm::InvokeInst instructions.
# 
# @see llvm::InvokeInst::getNormalDest()
cdef LLVMBasicBlockRef LLVMGetNormalDest(LLVMValueRef InvokeInst) nogil


# 
# Return the unwind destination basic block.
# 
# Works on llvm::InvokeInst, llvm::CleanupReturnInst, and
# llvm::CatchSwitchInst instructions.
# 
# @see llvm::InvokeInst::getUnwindDest()
# @see llvm::CleanupReturnInst::getUnwindDest()
# @see llvm::CatchSwitchInst::getUnwindDest()
cdef LLVMBasicBlockRef LLVMGetUnwindDest(LLVMValueRef InvokeInst) nogil


# 
# Set the normal destination basic block.
# 
# This only works on llvm::InvokeInst instructions.
# 
# @see llvm::InvokeInst::setNormalDest()
cdef void LLVMSetNormalDest(LLVMValueRef InvokeInst,LLVMBasicBlockRef B) nogil


# 
# Set the unwind destination basic block.
# 
# Works on llvm::InvokeInst, llvm::CleanupReturnInst, and
# llvm::CatchSwitchInst instructions.
# 
# @see llvm::InvokeInst::setUnwindDest()
# @see llvm::CleanupReturnInst::setUnwindDest()
# @see llvm::CatchSwitchInst::setUnwindDest()
cdef void LLVMSetUnwindDest(LLVMValueRef InvokeInst,LLVMBasicBlockRef B) nogil


# 
# Return the number of successors that this terminator has.
# 
# @see llvm::Instruction::getNumSuccessors
cdef unsigned int LLVMGetNumSuccessors(LLVMValueRef Term) nogil


# 
# Return the specified successor.
# 
# @see llvm::Instruction::getSuccessor
cdef LLVMBasicBlockRef LLVMGetSuccessor(LLVMValueRef Term,unsigned int i) nogil


# 
# Update the specified successor to point at the provided block.
# 
# @see llvm::Instruction::setSuccessor
cdef void LLVMSetSuccessor(LLVMValueRef Term,unsigned int i,LLVMBasicBlockRef block) nogil


# 
# Return if a branch is conditional.
# 
# This only works on llvm::BranchInst instructions.
# 
# @see llvm::BranchInst::isConditional
cdef int LLVMIsConditional(LLVMValueRef Branch) nogil


# 
# Return the condition of a branch instruction.
# 
# This only works on llvm::BranchInst instructions.
# 
# @see llvm::BranchInst::getCondition
cdef LLVMValueRef LLVMGetCondition(LLVMValueRef Branch) nogil


# 
# Set the condition of a branch instruction.
# 
# This only works on llvm::BranchInst instructions.
# 
# @see llvm::BranchInst::setCondition
cdef void LLVMSetCondition(LLVMValueRef Branch,LLVMValueRef Cond) nogil


# 
# Obtain the default destination basic block of a switch instruction.
# 
# This only works on llvm::SwitchInst instructions.
# 
# @see llvm::SwitchInst::getDefaultDest()
cdef LLVMBasicBlockRef LLVMGetSwitchDefaultDest(LLVMValueRef SwitchInstr) nogil


# 
# Obtain the type that is being allocated by the alloca instruction.
cdef LLVMTypeRef LLVMGetAllocatedType(LLVMValueRef Alloca) nogil


# 
# Check whether the given GEP operator is inbounds.
cdef int LLVMIsInBounds(LLVMValueRef GEP) nogil


# 
# Set the given GEP instruction to be inbounds or not.
cdef void LLVMSetIsInBounds(LLVMValueRef GEP,int InBounds) nogil


# 
# Get the source element type of the given GEP operator.
cdef LLVMTypeRef LLVMGetGEPSourceElementType(LLVMValueRef GEP) nogil


# 
# Add an incoming value to the end of a PHI list.
cdef void LLVMAddIncoming(LLVMValueRef PhiNode,LLVMValueRef* IncomingValues,LLVMBasicBlockRef* IncomingBlocks,unsigned int Count) nogil


# 
# Obtain the number of incoming basic blocks to a PHI node.
cdef unsigned int LLVMCountIncoming(LLVMValueRef PhiNode) nogil


# 
# Obtain an incoming value to a PHI node as an LLVMValueRef.
cdef LLVMValueRef LLVMGetIncomingValue(LLVMValueRef PhiNode,unsigned int Index) nogil


# 
# Obtain an incoming value to a PHI node as an LLVMBasicBlockRef.
cdef LLVMBasicBlockRef LLVMGetIncomingBlock(LLVMValueRef PhiNode,unsigned int Index) nogil


# 
# Obtain the number of indices.
# NB: This also works on GEP operators.
cdef unsigned int LLVMGetNumIndices(LLVMValueRef Inst) nogil


# 
# Obtain the indices as an array.
cdef const unsigned int * LLVMGetIndices(LLVMValueRef Inst) nogil


# 
# @defgroup LLVMCCoreInstructionBuilder Instruction Builders
# 
# An instruction builder represents a point within a basic block and is
# the exclusive means of building instructions using the C interface.
# 
# @{
cdef LLVMBuilderRef LLVMCreateBuilderInContext(LLVMContextRef C) nogil



cdef LLVMBuilderRef LLVMCreateBuilder() nogil



cdef void LLVMPositionBuilder(LLVMBuilderRef Builder,LLVMBasicBlockRef Block,LLVMValueRef Instr) nogil



cdef void LLVMPositionBuilderBefore(LLVMBuilderRef Builder,LLVMValueRef Instr) nogil



cdef void LLVMPositionBuilderAtEnd(LLVMBuilderRef Builder,LLVMBasicBlockRef Block) nogil



cdef LLVMBasicBlockRef LLVMGetInsertBlock(LLVMBuilderRef Builder) nogil



cdef void LLVMClearInsertionPosition(LLVMBuilderRef Builder) nogil



cdef void LLVMInsertIntoBuilder(LLVMBuilderRef Builder,LLVMValueRef Instr) nogil



cdef void LLVMInsertIntoBuilderWithName(LLVMBuilderRef Builder,LLVMValueRef Instr,const char * Name) nogil



cdef void LLVMDisposeBuilder(LLVMBuilderRef Builder) nogil


# 
# Get location information used by debugging information.
# 
# @see llvm::IRBuilder::getCurrentDebugLocation()
cdef LLVMMetadataRef LLVMGetCurrentDebugLocation2(LLVMBuilderRef Builder) nogil


# 
# Set location information used by debugging information.
# 
# To clear the location metadata of the given instruction, pass NULL to \p Loc.
# 
# @see llvm::IRBuilder::SetCurrentDebugLocation()
cdef void LLVMSetCurrentDebugLocation2(LLVMBuilderRef Builder,LLVMMetadataRef Loc) nogil


# 
# Attempts to set the debug location for the given instruction using the
# current debug location for the given builder.  If the builder has no current
# debug location, this function is a no-op.
# 
# @deprecated LLVMSetInstDebugLocation is deprecated in favor of the more general
#             LLVMAddMetadataToInst.
# 
# @see llvm::IRBuilder::SetInstDebugLocation()
cdef void LLVMSetInstDebugLocation(LLVMBuilderRef Builder,LLVMValueRef Inst) nogil


# 
# Adds the metadata registered with the given builder to the given instruction.
# 
# @see llvm::IRBuilder::AddMetadataToInst()
cdef void LLVMAddMetadataToInst(LLVMBuilderRef Builder,LLVMValueRef Inst) nogil


# 
# Get the dafult floating-point math metadata for a given builder.
# 
# @see llvm::IRBuilder::getDefaultFPMathTag()
cdef LLVMMetadataRef LLVMBuilderGetDefaultFPMathTag(LLVMBuilderRef Builder) nogil


# 
# Set the default floating-point math metadata for the given builder.
# 
# To clear the metadata, pass NULL to \p FPMathTag.
# 
# @see llvm::IRBuilder::setDefaultFPMathTag()
cdef void LLVMBuilderSetDefaultFPMathTag(LLVMBuilderRef Builder,LLVMMetadataRef FPMathTag) nogil


# 
# Deprecated: Passing the NULL location will crash.
# Use LLVMGetCurrentDebugLocation2 instead.
cdef void LLVMSetCurrentDebugLocation(LLVMBuilderRef Builder,LLVMValueRef L) nogil


# 
# Deprecated: Returning the NULL location will crash.
# Use LLVMGetCurrentDebugLocation2 instead.
cdef LLVMValueRef LLVMGetCurrentDebugLocation(LLVMBuilderRef Builder) nogil



cdef LLVMValueRef LLVMBuildRetVoid(LLVMBuilderRef arg0) nogil



cdef LLVMValueRef LLVMBuildRet(LLVMBuilderRef arg0,LLVMValueRef V) nogil



cdef LLVMValueRef LLVMBuildAggregateRet(LLVMBuilderRef arg0,LLVMValueRef* RetVals,unsigned int N) nogil



cdef LLVMValueRef LLVMBuildBr(LLVMBuilderRef arg0,LLVMBasicBlockRef Dest) nogil



cdef LLVMValueRef LLVMBuildCondBr(LLVMBuilderRef arg0,LLVMValueRef If,LLVMBasicBlockRef Then,LLVMBasicBlockRef Else) nogil



cdef LLVMValueRef LLVMBuildSwitch(LLVMBuilderRef arg0,LLVMValueRef V,LLVMBasicBlockRef Else,unsigned int NumCases) nogil



cdef LLVMValueRef LLVMBuildIndirectBr(LLVMBuilderRef B,LLVMValueRef Addr,unsigned int NumDests) nogil



cdef LLVMValueRef LLVMBuildInvoke2(LLVMBuilderRef arg0,LLVMTypeRef Ty,LLVMValueRef Fn,LLVMValueRef* Args,unsigned int NumArgs,LLVMBasicBlockRef Then,LLVMBasicBlockRef Catch,const char * Name) nogil



cdef LLVMValueRef LLVMBuildUnreachable(LLVMBuilderRef arg0) nogil



cdef LLVMValueRef LLVMBuildResume(LLVMBuilderRef B,LLVMValueRef Exn) nogil



cdef LLVMValueRef LLVMBuildLandingPad(LLVMBuilderRef B,LLVMTypeRef Ty,LLVMValueRef PersFn,unsigned int NumClauses,const char * Name) nogil



cdef LLVMValueRef LLVMBuildCleanupRet(LLVMBuilderRef B,LLVMValueRef CatchPad,LLVMBasicBlockRef BB) nogil



cdef LLVMValueRef LLVMBuildCatchRet(LLVMBuilderRef B,LLVMValueRef CatchPad,LLVMBasicBlockRef BB) nogil



cdef LLVMValueRef LLVMBuildCatchPad(LLVMBuilderRef B,LLVMValueRef ParentPad,LLVMValueRef* Args,unsigned int NumArgs,const char * Name) nogil



cdef LLVMValueRef LLVMBuildCleanupPad(LLVMBuilderRef B,LLVMValueRef ParentPad,LLVMValueRef* Args,unsigned int NumArgs,const char * Name) nogil



cdef LLVMValueRef LLVMBuildCatchSwitch(LLVMBuilderRef B,LLVMValueRef ParentPad,LLVMBasicBlockRef UnwindBB,unsigned int NumHandlers,const char * Name) nogil



cdef void LLVMAddCase(LLVMValueRef Switch,LLVMValueRef OnVal,LLVMBasicBlockRef Dest) nogil



cdef void LLVMAddDestination(LLVMValueRef IndirectBr,LLVMBasicBlockRef Dest) nogil



cdef unsigned int LLVMGetNumClauses(LLVMValueRef LandingPad) nogil



cdef LLVMValueRef LLVMGetClause(LLVMValueRef LandingPad,unsigned int Idx) nogil



cdef void LLVMAddClause(LLVMValueRef LandingPad,LLVMValueRef ClauseVal) nogil



cdef int LLVMIsCleanup(LLVMValueRef LandingPad) nogil



cdef void LLVMSetCleanup(LLVMValueRef LandingPad,int Val) nogil



cdef void LLVMAddHandler(LLVMValueRef CatchSwitch,LLVMBasicBlockRef Dest) nogil



cdef unsigned int LLVMGetNumHandlers(LLVMValueRef CatchSwitch) nogil


# 
# Obtain the basic blocks acting as handlers for a catchswitch instruction.
# 
# The Handlers parameter should point to a pre-allocated array of
# LLVMBasicBlockRefs at least LLVMGetNumHandlers() large. On return, the
# first LLVMGetNumHandlers() entries in the array will be populated
# with LLVMBasicBlockRef instances.
# 
# @param CatchSwitch The catchswitch instruction to operate on.
# @param Handlers Memory address of an array to be filled with basic blocks.
cdef void LLVMGetHandlers(LLVMValueRef CatchSwitch,LLVMBasicBlockRef* Handlers) nogil



cdef LLVMValueRef LLVMGetArgOperand(LLVMValueRef Funclet,unsigned int i) nogil



cdef void LLVMSetArgOperand(LLVMValueRef Funclet,unsigned int i,LLVMValueRef value) nogil


# 
# Get the parent catchswitch instruction of a catchpad instruction.
# 
# This only works on llvm::CatchPadInst instructions.
# 
# @see llvm::CatchPadInst::getCatchSwitch()
cdef LLVMValueRef LLVMGetParentCatchSwitch(LLVMValueRef CatchPad) nogil


# 
# Set the parent catchswitch instruction of a catchpad instruction.
# 
# This only works on llvm::CatchPadInst instructions.
# 
# @see llvm::CatchPadInst::setCatchSwitch()
cdef void LLVMSetParentCatchSwitch(LLVMValueRef CatchPad,LLVMValueRef CatchSwitch) nogil



cdef LLVMValueRef LLVMBuildAdd(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildNSWAdd(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildNUWAdd(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildFAdd(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildSub(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildNSWSub(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildNUWSub(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildFSub(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildMul(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildNSWMul(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildNUWMul(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildFMul(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildUDiv(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildExactUDiv(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildSDiv(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildExactSDiv(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildFDiv(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildURem(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildSRem(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildFRem(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildShl(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildLShr(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildAShr(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildAnd(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildOr(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildXor(LLVMBuilderRef arg0,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildBinOp(LLVMBuilderRef B,LLVMOpcode Op,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildNeg(LLVMBuilderRef arg0,LLVMValueRef V,const char * Name) nogil



cdef LLVMValueRef LLVMBuildNSWNeg(LLVMBuilderRef B,LLVMValueRef V,const char * Name) nogil



cdef LLVMValueRef LLVMBuildNUWNeg(LLVMBuilderRef B,LLVMValueRef V,const char * Name) nogil



cdef LLVMValueRef LLVMBuildFNeg(LLVMBuilderRef arg0,LLVMValueRef V,const char * Name) nogil



cdef LLVMValueRef LLVMBuildNot(LLVMBuilderRef arg0,LLVMValueRef V,const char * Name) nogil



cdef LLVMValueRef LLVMBuildMalloc(LLVMBuilderRef arg0,LLVMTypeRef Ty,const char * Name) nogil



cdef LLVMValueRef LLVMBuildArrayMalloc(LLVMBuilderRef arg0,LLVMTypeRef Ty,LLVMValueRef Val,const char * Name) nogil


# 
# Creates and inserts a memset to the specified pointer and the
# specified value.
# 
# @see llvm::IRRBuilder::CreateMemSet()
cdef LLVMValueRef LLVMBuildMemSet(LLVMBuilderRef B,LLVMValueRef Ptr,LLVMValueRef Val,LLVMValueRef Len,unsigned int Align) nogil


# 
# Creates and inserts a memcpy between the specified pointers.
# 
# @see llvm::IRRBuilder::CreateMemCpy()
cdef LLVMValueRef LLVMBuildMemCpy(LLVMBuilderRef B,LLVMValueRef Dst,unsigned int DstAlign,LLVMValueRef Src,unsigned int SrcAlign,LLVMValueRef Size) nogil


# 
# Creates and inserts a memmove between the specified pointers.
# 
# @see llvm::IRRBuilder::CreateMemMove()
cdef LLVMValueRef LLVMBuildMemMove(LLVMBuilderRef B,LLVMValueRef Dst,unsigned int DstAlign,LLVMValueRef Src,unsigned int SrcAlign,LLVMValueRef Size) nogil



cdef LLVMValueRef LLVMBuildAlloca(LLVMBuilderRef arg0,LLVMTypeRef Ty,const char * Name) nogil



cdef LLVMValueRef LLVMBuildArrayAlloca(LLVMBuilderRef arg0,LLVMTypeRef Ty,LLVMValueRef Val,const char * Name) nogil



cdef LLVMValueRef LLVMBuildFree(LLVMBuilderRef arg0,LLVMValueRef PointerVal) nogil



cdef LLVMValueRef LLVMBuildLoad2(LLVMBuilderRef arg0,LLVMTypeRef Ty,LLVMValueRef PointerVal,const char * Name) nogil



cdef LLVMValueRef LLVMBuildStore(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMValueRef Ptr) nogil



cdef LLVMValueRef LLVMBuildGEP2(LLVMBuilderRef B,LLVMTypeRef Ty,LLVMValueRef Pointer,LLVMValueRef* Indices,unsigned int NumIndices,const char * Name) nogil



cdef LLVMValueRef LLVMBuildInBoundsGEP2(LLVMBuilderRef B,LLVMTypeRef Ty,LLVMValueRef Pointer,LLVMValueRef* Indices,unsigned int NumIndices,const char * Name) nogil



cdef LLVMValueRef LLVMBuildStructGEP2(LLVMBuilderRef B,LLVMTypeRef Ty,LLVMValueRef Pointer,unsigned int Idx,const char * Name) nogil



cdef LLVMValueRef LLVMBuildGlobalString(LLVMBuilderRef B,const char * Str,const char * Name) nogil



cdef LLVMValueRef LLVMBuildGlobalStringPtr(LLVMBuilderRef B,const char * Str,const char * Name) nogil



cdef int LLVMGetVolatile(LLVMValueRef MemoryAccessInst) nogil



cdef void LLVMSetVolatile(LLVMValueRef MemoryAccessInst,int IsVolatile) nogil



cdef int LLVMGetWeak(LLVMValueRef CmpXchgInst) nogil



cdef void LLVMSetWeak(LLVMValueRef CmpXchgInst,int IsWeak) nogil



cdef LLVMAtomicOrdering LLVMGetOrdering(LLVMValueRef MemoryAccessInst) nogil



cdef void LLVMSetOrdering(LLVMValueRef MemoryAccessInst,LLVMAtomicOrdering Ordering) nogil



cdef LLVMAtomicRMWBinOp LLVMGetAtomicRMWBinOp(LLVMValueRef AtomicRMWInst) nogil



cdef void LLVMSetAtomicRMWBinOp(LLVMValueRef AtomicRMWInst,LLVMAtomicRMWBinOp BinOp) nogil



cdef LLVMValueRef LLVMBuildTrunc(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildZExt(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildSExt(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildFPToUI(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildFPToSI(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildUIToFP(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildSIToFP(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildFPTrunc(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildFPExt(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildPtrToInt(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildIntToPtr(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildBitCast(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildAddrSpaceCast(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildZExtOrBitCast(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildSExtOrBitCast(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildTruncOrBitCast(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildCast(LLVMBuilderRef B,LLVMOpcode Op,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildPointerCast(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMValueRef LLVMBuildIntCast2(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,int IsSigned,const char * Name) nogil



cdef LLVMValueRef LLVMBuildFPCast(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil


# Deprecated: This cast is always signed. Use LLVMBuildIntCast2 instead. */
cdef LLVMValueRef LLVMBuildIntCast(LLVMBuilderRef arg0,LLVMValueRef Val,LLVMTypeRef DestTy,const char * Name) nogil



cdef LLVMOpcode LLVMGetCastOpcode(LLVMValueRef Src,int SrcIsSigned,LLVMTypeRef DestTy,int DestIsSigned) nogil



cdef LLVMValueRef LLVMBuildICmp(LLVMBuilderRef arg0,LLVMIntPredicate Op,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildFCmp(LLVMBuilderRef arg0,LLVMRealPredicate Op,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildPhi(LLVMBuilderRef arg0,LLVMTypeRef Ty,const char * Name) nogil



cdef LLVMValueRef LLVMBuildCall2(LLVMBuilderRef arg0,LLVMTypeRef arg1,LLVMValueRef Fn,LLVMValueRef* Args,unsigned int NumArgs,const char * Name) nogil



cdef LLVMValueRef LLVMBuildSelect(LLVMBuilderRef arg0,LLVMValueRef If,LLVMValueRef Then,LLVMValueRef Else,const char * Name) nogil



cdef LLVMValueRef LLVMBuildVAArg(LLVMBuilderRef arg0,LLVMValueRef List,LLVMTypeRef Ty,const char * Name) nogil



cdef LLVMValueRef LLVMBuildExtractElement(LLVMBuilderRef arg0,LLVMValueRef VecVal,LLVMValueRef Index,const char * Name) nogil



cdef LLVMValueRef LLVMBuildInsertElement(LLVMBuilderRef arg0,LLVMValueRef VecVal,LLVMValueRef EltVal,LLVMValueRef Index,const char * Name) nogil



cdef LLVMValueRef LLVMBuildShuffleVector(LLVMBuilderRef arg0,LLVMValueRef V1,LLVMValueRef V2,LLVMValueRef Mask,const char * Name) nogil



cdef LLVMValueRef LLVMBuildExtractValue(LLVMBuilderRef arg0,LLVMValueRef AggVal,unsigned int Index,const char * Name) nogil



cdef LLVMValueRef LLVMBuildInsertValue(LLVMBuilderRef arg0,LLVMValueRef AggVal,LLVMValueRef EltVal,unsigned int Index,const char * Name) nogil



cdef LLVMValueRef LLVMBuildFreeze(LLVMBuilderRef arg0,LLVMValueRef Val,const char * Name) nogil



cdef LLVMValueRef LLVMBuildIsNull(LLVMBuilderRef arg0,LLVMValueRef Val,const char * Name) nogil



cdef LLVMValueRef LLVMBuildIsNotNull(LLVMBuilderRef arg0,LLVMValueRef Val,const char * Name) nogil



cdef LLVMValueRef LLVMBuildPtrDiff2(LLVMBuilderRef arg0,LLVMTypeRef ElemTy,LLVMValueRef LHS,LLVMValueRef RHS,const char * Name) nogil



cdef LLVMValueRef LLVMBuildFence(LLVMBuilderRef B,LLVMAtomicOrdering ordering,int singleThread,const char * Name) nogil



cdef LLVMValueRef LLVMBuildAtomicRMW(LLVMBuilderRef B,LLVMAtomicRMWBinOp op,LLVMValueRef PTR,LLVMValueRef Val,LLVMAtomicOrdering ordering,int singleThread) nogil



cdef LLVMValueRef LLVMBuildAtomicCmpXchg(LLVMBuilderRef B,LLVMValueRef Ptr,LLVMValueRef Cmp,LLVMValueRef New,LLVMAtomicOrdering SuccessOrdering,LLVMAtomicOrdering FailureOrdering,int SingleThread) nogil


# 
# Get the number of elements in the mask of a ShuffleVector instruction.
cdef unsigned int LLVMGetNumMaskElements(LLVMValueRef ShuffleVectorInst) nogil


# 
# \returns a constant that specifies that the result of a \c ShuffleVectorInst
# is undefined.
cdef int LLVMGetUndefMaskElem() nogil


# 
# Get the mask value at position Elt in the mask of a ShuffleVector
# instruction.
# 
# \Returns the result of \c LLVMGetUndefMaskElem() if the mask value is undef
# at that position.
cdef int LLVMGetMaskValue(LLVMValueRef ShuffleVectorInst,unsigned int Elt) nogil



cdef int LLVMIsAtomicSingleThread(LLVMValueRef AtomicInst) nogil



cdef void LLVMSetAtomicSingleThread(LLVMValueRef AtomicInst,int SingleThread) nogil



cdef LLVMAtomicOrdering LLVMGetCmpXchgSuccessOrdering(LLVMValueRef CmpXchgInst) nogil



cdef void LLVMSetCmpXchgSuccessOrdering(LLVMValueRef CmpXchgInst,LLVMAtomicOrdering Ordering) nogil



cdef LLVMAtomicOrdering LLVMGetCmpXchgFailureOrdering(LLVMValueRef CmpXchgInst) nogil



cdef void LLVMSetCmpXchgFailureOrdering(LLVMValueRef CmpXchgInst,LLVMAtomicOrdering Ordering) nogil


# 
# Changes the type of M so it can be passed to FunctionPassManagers and the
# JIT.  They take ModuleProviders for historical reasons.
cdef LLVMModuleProviderRef LLVMCreateModuleProviderForExistingModule(LLVMModuleRef M) nogil


# 
# Destroys the module M.
cdef void LLVMDisposeModuleProvider(LLVMModuleProviderRef M) nogil


# 
# @defgroup LLVMCCoreMemoryBuffers Memory Buffers
# 
# @{
cdef int LLVMCreateMemoryBufferWithContentsOfFile(const char * Path,LLVMMemoryBufferRef* OutMemBuf,char ** OutMessage) nogil



cdef int LLVMCreateMemoryBufferWithSTDIN(LLVMMemoryBufferRef* OutMemBuf,char ** OutMessage) nogil



cdef LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRange(const char * InputData,unsigned long InputDataLength,const char * BufferName,int RequiresNullTerminator) nogil



cdef LLVMMemoryBufferRef LLVMCreateMemoryBufferWithMemoryRangeCopy(const char * InputData,unsigned long InputDataLength,const char * BufferName) nogil



cdef const char * LLVMGetBufferStart(LLVMMemoryBufferRef MemBuf) nogil



cdef unsigned long LLVMGetBufferSize(LLVMMemoryBufferRef MemBuf) nogil



cdef void LLVMDisposeMemoryBuffer(LLVMMemoryBufferRef MemBuf) nogil


# Return the global pass registry, for use with initialization functions.
# @see llvm::PassRegistry::getPassRegistry
cdef LLVMPassRegistryRef LLVMGetGlobalPassRegistry() nogil


# Constructs a new whole-module pass pipeline. This type of pipeline is
# suitable for link-time optimization and whole-module transformations.
# @see llvm::PassManager::PassManager
cdef LLVMPassManagerRef LLVMCreatePassManager() nogil


# Constructs a new function-by-function pass pipeline over the module
# provider. It does not take ownership of the module provider. This type of
# pipeline is suitable for code generation and JIT compilation tasks.
# @see llvm::FunctionPassManager::FunctionPassManager
cdef LLVMPassManagerRef LLVMCreateFunctionPassManagerForModule(LLVMModuleRef M) nogil


# Deprecated: Use LLVMCreateFunctionPassManagerForModule instead. */
cdef LLVMPassManagerRef LLVMCreateFunctionPassManager(LLVMModuleProviderRef MP) nogil


# Initializes, executes on the provided module, and finalizes all of the
# passes scheduled in the pass manager. Returns 1 if any of the passes
# modified the module, 0 otherwise.
# @see llvm::PassManager::run(Module&)
cdef int LLVMRunPassManager(LLVMPassManagerRef PM,LLVMModuleRef M) nogil


# Initializes all of the function passes scheduled in the function pass
# manager. Returns 1 if any of the passes modified the module, 0 otherwise.
# @see llvm::FunctionPassManager::doInitialization
cdef int LLVMInitializeFunctionPassManager(LLVMPassManagerRef FPM) nogil


# Executes all of the function passes scheduled in the function pass manager
# on the provided function. Returns 1 if any of the passes modified the
# function, false otherwise.
# @see llvm::FunctionPassManager::run(Function&)
cdef int LLVMRunFunctionPassManager(LLVMPassManagerRef FPM,LLVMValueRef F) nogil


# Finalizes all of the function passes scheduled in the function pass
# manager. Returns 1 if any of the passes modified the module, 0 otherwise.
# @see llvm::FunctionPassManager::doFinalization
cdef int LLVMFinalizeFunctionPassManager(LLVMPassManagerRef FPM) nogil


# Frees the memory of a pass pipeline. For function pipelines, does not free
# the module provider.
# @see llvm::PassManagerBase::~PassManagerBase.
cdef void LLVMDisposePassManager(LLVMPassManagerRef PM) nogil


# Deprecated: Multi-threading can only be enabled/disabled with the compile
# time define LLVM_ENABLE_THREADS.  This function always returns
# LLVMIsMultithreaded().
cdef int LLVMStartMultithreaded() nogil


# Deprecated: Multi-threading can only be enabled/disabled with the compile
# time define LLVM_ENABLE_THREADS.
cdef void LLVMStopMultithreaded() nogil


# Check whether LLVM is executing in thread-safe mode or not.
# @see llvm::llvm_is_multithreaded
cdef int LLVMIsMultithreaded() nogil
