# MIT License
#
# Copyright (c) 2023-2024 Advanced Micro Devices, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

cimport rocm.llvm._util.posixloader as loader
cdef void* _lib_handle = NULL

DLL = b"librocmllvm.so"

cdef int __init() except 1 nogil:
    global DLL
    global _lib_handle
    cdef char* dll = NULL
    if _lib_handle == NULL:
        with gil:
            dll = DLL
        return loader.open_library(&_lib_handle,dll)
    return 0

cdef int __init_symbol(void** result, const char* name) except 1 nogil:
    global _lib_handle
    cdef int init_result = 0
    if _lib_handle == NULL:
        init_result = __init()
        if init_result > 0:
            return init_result
    if result[0] == NULL:
        return loader.load_symbol(result,_lib_handle, name)
    return 0


cdef void* _LLVMWriteBitcodeToFile__funptr = NULL
# Writes a module to the specified path. Returns 0 on success. */
cdef int LLVMWriteBitcodeToFile(LLVMModuleRef M,const char * Path):
    global _LLVMWriteBitcodeToFile__funptr
    if __init_symbol(&_LLVMWriteBitcodeToFile__funptr,"LLVMWriteBitcodeToFile") > 0:
        pass
    return (<int (*)(LLVMModuleRef,const char *) noexcept nogil> _LLVMWriteBitcodeToFile__funptr)(M,Path)


cdef void* _LLVMWriteBitcodeToFD__funptr = NULL
# Writes a module to an open file descriptor. Returns 0 on success. */
cdef int LLVMWriteBitcodeToFD(LLVMModuleRef M,int FD,int ShouldClose,int Unbuffered):
    global _LLVMWriteBitcodeToFD__funptr
    if __init_symbol(&_LLVMWriteBitcodeToFD__funptr,"LLVMWriteBitcodeToFD") > 0:
        pass
    return (<int (*)(LLVMModuleRef,int,int,int) noexcept nogil> _LLVMWriteBitcodeToFD__funptr)(M,FD,ShouldClose,Unbuffered)


cdef void* _LLVMWriteBitcodeToFileHandle__funptr = NULL
# Deprecated for LLVMWriteBitcodeToFD. Writes a module to an open file
# descriptor. Returns 0 on success. Closes the Handle.
cdef int LLVMWriteBitcodeToFileHandle(LLVMModuleRef M,int Handle):
    global _LLVMWriteBitcodeToFileHandle__funptr
    if __init_symbol(&_LLVMWriteBitcodeToFileHandle__funptr,"LLVMWriteBitcodeToFileHandle") > 0:
        pass
    return (<int (*)(LLVMModuleRef,int) noexcept nogil> _LLVMWriteBitcodeToFileHandle__funptr)(M,Handle)


cdef void* _LLVMWriteBitcodeToMemoryBuffer__funptr = NULL
# Writes a module to a new memory buffer and returns it. */
cdef LLVMMemoryBufferRef LLVMWriteBitcodeToMemoryBuffer(LLVMModuleRef M):
    global _LLVMWriteBitcodeToMemoryBuffer__funptr
    if __init_symbol(&_LLVMWriteBitcodeToMemoryBuffer__funptr,"LLVMWriteBitcodeToMemoryBuffer") > 0:
        pass
    return (<LLVMMemoryBufferRef (*)(LLVMModuleRef) noexcept nogil> _LLVMWriteBitcodeToMemoryBuffer__funptr)(M)
