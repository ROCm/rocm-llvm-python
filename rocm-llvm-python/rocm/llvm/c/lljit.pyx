# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.


"""
(No short description)

Attributes:
    LLVMOrcLLJITBuilderRef:
        alias of `~.LLVMOrcOpaqueLLJITBuilder`

    LLVMOrcLLJITRef:
        alias of `~.LLVMOrcOpaqueLLJIT`

"""

import cython
import ctypes
import enum

from rocm.llvm.c.error import LLVMErrorRef
from rocm.llvm.c.error import LLVMGetErrorTypeId
from rocm.llvm.c.error import LLVMConsumeError
from rocm.llvm.c.error import LLVMGetErrorMessage
from rocm.llvm.c.error import LLVMDisposeErrorMessage
from rocm.llvm.c.error import LLVMGetStringErrorTypeId
from rocm.llvm.c.error import LLVMCreateStringError


from rocm.llvm.c.orc import LLVMJITSymbolGenericFlags
from rocm.llvm.c.orc import LLVMOrcExecutionSessionRef
from rocm.llvm.c.orc import LLVMOrcSymbolStringPoolRef
from rocm.llvm.c.orc import LLVMOrcSymbolStringPoolEntryRef
from rocm.llvm.c.orc import LLVMOrcCSymbolFlagsMapPairs
from rocm.llvm.c.orc import LLVMOrcCSymbolMapPairs
from rocm.llvm.c.orc import LLVMOrcCSymbolAliasMapPairs
from rocm.llvm.c.orc import LLVMOrcJITDylibRef
from rocm.llvm.c.orc import LLVMOrcCDependenceMapPairs
from rocm.llvm.c.orc import LLVMOrcLookupKind
from rocm.llvm.c.orc import LLVMOrcJITDylibLookupFlags
from rocm.llvm.c.orc import LLVMOrcCJITDylibSearchOrder
from rocm.llvm.c.orc import LLVMOrcSymbolLookupFlags
from rocm.llvm.c.orc import LLVMOrcCLookupSet
from rocm.llvm.c.orc import LLVMOrcMaterializationUnitRef
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityRef
from rocm.llvm.c.orc import LLVMOrcResourceTrackerRef
from rocm.llvm.c.orc import LLVMOrcDefinitionGeneratorRef
from rocm.llvm.c.orc import LLVMOrcLookupStateRef
from rocm.llvm.c.orc import LLVMOrcThreadSafeContextRef
from rocm.llvm.c.orc import LLVMOrcThreadSafeModuleRef
from rocm.llvm.c.orc import LLVMOrcJITTargetMachineBuilderRef
from rocm.llvm.c.orc import LLVMOrcObjectLayerRef
from rocm.llvm.c.orc import LLVMOrcObjectLinkingLayerRef
from rocm.llvm.c.orc import LLVMOrcIRTransformLayerRef
from rocm.llvm.c.orc import LLVMOrcObjectTransformLayerRef
from rocm.llvm.c.orc import LLVMOrcIndirectStubsManagerRef
from rocm.llvm.c.orc import LLVMOrcLazyCallThroughManagerRef
from rocm.llvm.c.orc import LLVMOrcDumpObjectsRef
from rocm.llvm.c.orc import LLVMOrcExecutionSessionSetErrorReporter
from rocm.llvm.c.orc import LLVMOrcExecutionSessionGetSymbolStringPool
from rocm.llvm.c.orc import LLVMOrcSymbolStringPoolClearDeadEntries
from rocm.llvm.c.orc import LLVMOrcExecutionSessionIntern
from rocm.llvm.c.orc import LLVMOrcExecutionSessionLookup
from rocm.llvm.c.orc import LLVMOrcRetainSymbolStringPoolEntry
from rocm.llvm.c.orc import LLVMOrcReleaseSymbolStringPoolEntry
from rocm.llvm.c.orc import LLVMOrcSymbolStringPoolEntryStr
from rocm.llvm.c.orc import LLVMOrcReleaseResourceTracker
from rocm.llvm.c.orc import LLVMOrcResourceTrackerTransferTo
from rocm.llvm.c.orc import LLVMOrcResourceTrackerRemove
from rocm.llvm.c.orc import LLVMOrcDisposeDefinitionGenerator
from rocm.llvm.c.orc import LLVMOrcDisposeMaterializationUnit
from rocm.llvm.c.orc import LLVMOrcCreateCustomMaterializationUnit
from rocm.llvm.c.orc import LLVMOrcAbsoluteSymbols
from rocm.llvm.c.orc import LLVMOrcLazyReexports
from rocm.llvm.c.orc import LLVMOrcDisposeMaterializationResponsibility
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityGetTargetDylib
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityGetExecutionSession
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityGetSymbols
from rocm.llvm.c.orc import LLVMOrcDisposeCSymbolFlagsMap
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityGetInitializerSymbol
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityGetRequestedSymbols
from rocm.llvm.c.orc import LLVMOrcDisposeSymbols
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityNotifyResolved
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityNotifyEmitted
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityDefineMaterializing
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityFailMaterialization
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityReplace
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityDelegate
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityAddDependencies
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityAddDependenciesForAll
from rocm.llvm.c.orc import LLVMOrcExecutionSessionCreateBareJITDylib
from rocm.llvm.c.orc import LLVMOrcExecutionSessionCreateJITDylib
from rocm.llvm.c.orc import LLVMOrcExecutionSessionGetJITDylibByName
from rocm.llvm.c.orc import LLVMOrcJITDylibCreateResourceTracker
from rocm.llvm.c.orc import LLVMOrcJITDylibGetDefaultResourceTracker
from rocm.llvm.c.orc import LLVMOrcJITDylibDefine
from rocm.llvm.c.orc import LLVMOrcJITDylibClear
from rocm.llvm.c.orc import LLVMOrcJITDylibAddGenerator
from rocm.llvm.c.orc import LLVMOrcCreateCustomCAPIDefinitionGenerator
from rocm.llvm.c.orc import LLVMOrcLookupStateContinueLookup
from rocm.llvm.c.orc import LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess
from rocm.llvm.c.orc import LLVMOrcCreateDynamicLibrarySearchGeneratorForPath
from rocm.llvm.c.orc import LLVMOrcCreateStaticLibrarySearchGeneratorForPath
from rocm.llvm.c.orc import LLVMOrcCreateNewThreadSafeContext
from rocm.llvm.c.orc import LLVMOrcThreadSafeContextGetContext
from rocm.llvm.c.orc import LLVMOrcDisposeThreadSafeContext
from rocm.llvm.c.orc import LLVMOrcCreateNewThreadSafeModule
from rocm.llvm.c.orc import LLVMOrcDisposeThreadSafeModule
from rocm.llvm.c.orc import LLVMOrcThreadSafeModuleWithModuleDo
from rocm.llvm.c.orc import LLVMOrcJITTargetMachineBuilderDetectHost
from rocm.llvm.c.orc import LLVMOrcJITTargetMachineBuilderCreateFromTargetMachine
from rocm.llvm.c.orc import LLVMOrcDisposeJITTargetMachineBuilder
from rocm.llvm.c.orc import LLVMOrcJITTargetMachineBuilderGetTargetTriple
from rocm.llvm.c.orc import LLVMOrcJITTargetMachineBuilderSetTargetTriple
from rocm.llvm.c.orc import LLVMOrcObjectLayerAddObjectFile
from rocm.llvm.c.orc import LLVMOrcObjectLayerAddObjectFileWithRT
from rocm.llvm.c.orc import LLVMOrcObjectLayerEmit
from rocm.llvm.c.orc import LLVMOrcDisposeObjectLayer
from rocm.llvm.c.orc import LLVMOrcIRTransformLayerEmit
from rocm.llvm.c.orc import LLVMOrcIRTransformLayerSetTransform
from rocm.llvm.c.orc import LLVMOrcObjectTransformLayerSetTransform
from rocm.llvm.c.orc import LLVMOrcCreateLocalIndirectStubsManager
from rocm.llvm.c.orc import LLVMOrcDisposeIndirectStubsManager
from rocm.llvm.c.orc import LLVMOrcCreateLocalLazyCallThroughManager
from rocm.llvm.c.orc import LLVMOrcDisposeLazyCallThroughManager
from rocm.llvm.c.orc import LLVMOrcCreateDumpObjects
from rocm.llvm.c.orc import LLVMOrcDisposeDumpObjects
from rocm.llvm.c.orc import LLVMOrcDumpObjects_CallOperator


from rocm.llvm.c.targetmachine import LLVMTargetMachineRef
from rocm.llvm.c.targetmachine import LLVMTargetRef
from rocm.llvm.c.targetmachine import LLVMCodeGenOptLevel
from rocm.llvm.c.targetmachine import LLVMRelocMode
from rocm.llvm.c.targetmachine import LLVMCodeModel
from rocm.llvm.c.targetmachine import LLVMCodeGenFileType
from rocm.llvm.c.targetmachine import LLVMGetFirstTarget
from rocm.llvm.c.targetmachine import LLVMGetNextTarget
from rocm.llvm.c.targetmachine import LLVMGetTargetFromName
from rocm.llvm.c.targetmachine import LLVMGetTargetFromTriple
from rocm.llvm.c.targetmachine import LLVMGetTargetName
from rocm.llvm.c.targetmachine import LLVMGetTargetDescription
from rocm.llvm.c.targetmachine import LLVMTargetHasJIT
from rocm.llvm.c.targetmachine import LLVMTargetHasTargetMachine
from rocm.llvm.c.targetmachine import LLVMTargetHasAsmBackend
from rocm.llvm.c.targetmachine import LLVMCreateTargetMachine
from rocm.llvm.c.targetmachine import LLVMDisposeTargetMachine
from rocm.llvm.c.targetmachine import LLVMGetTargetMachineTarget
from rocm.llvm.c.targetmachine import LLVMGetTargetMachineTriple
from rocm.llvm.c.targetmachine import LLVMGetTargetMachineCPU
from rocm.llvm.c.targetmachine import LLVMGetTargetMachineFeatureString
from rocm.llvm.c.targetmachine import LLVMCreateTargetDataLayout
from rocm.llvm.c.targetmachine import LLVMSetTargetMachineAsmVerbosity
from rocm.llvm.c.targetmachine import LLVMTargetMachineEmitToFile
from rocm.llvm.c.targetmachine import LLVMTargetMachineEmitToMemoryBuffer
from rocm.llvm.c.targetmachine import LLVMGetDefaultTargetTriple
from rocm.llvm.c.targetmachine import LLVMNormalizeTargetTriple
from rocm.llvm.c.targetmachine import LLVMGetHostCPUName
from rocm.llvm.c.targetmachine import LLVMGetHostCPUFeatures
from rocm.llvm.c.targetmachine import LLVMAddAnalysisPasses


from rocm.llvm.c.types import LLVMMemoryBufferRef
from rocm.llvm.c.types import LLVMContextRef
from rocm.llvm.c.types import LLVMModuleRef
from rocm.llvm.c.types import LLVMTypeRef
from rocm.llvm.c.types import LLVMValueRef
from rocm.llvm.c.types import LLVMBasicBlockRef
from rocm.llvm.c.types import LLVMMetadataRef
from rocm.llvm.c.types import LLVMNamedMDNodeRef
from rocm.llvm.c.types import LLVMValueMetadataEntry
from rocm.llvm.c.types import LLVMBuilderRef
from rocm.llvm.c.types import LLVMDIBuilderRef
from rocm.llvm.c.types import LLVMModuleProviderRef
from rocm.llvm.c.types import LLVMPassManagerRef
from rocm.llvm.c.types import LLVMPassRegistryRef
from rocm.llvm.c.types import LLVMUseRef
from rocm.llvm.c.types import LLVMAttributeRef
from rocm.llvm.c.types import LLVMDiagnosticInfoRef
from rocm.llvm.c.types import LLVMComdatRef
from rocm.llvm.c.types import LLVMModuleFlagEntry
from rocm.llvm.c.types import LLVMJITEventListenerRef
from rocm.llvm.c.types import LLVMBinaryRef

cdef class LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction(rocm.llvm._util.types.Pointer):
    """Python wrapper for cdef class clljit.LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction.
    
    Python wrapper for cdef class clljit.LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction.

    If this type is initialized via its `__init__` method, it allocates a member of the underlying C type and
    destroys it again if the wrapper type is deallocted.

    This type also serves as adapter when appearing as argument type in a function signature.
    In this case, the type can further be initialized from the following Python objects
    that you can pass as argument instead:
    
    * `None`:

      This will set the ``self._ptr`` attribute to ``NULL``.

    * `int`:
      
      Interprets the integer value as pointer address and writes it to ``self._ptr``.
      No ownership is transferred.
      
    * `ctypes.c_void_p`:
      
      Takes the pointer address ``pyobj.value`` and writes it to ``self._ptr``.
      No ownership is transferred.
    
    
    Type checks are performed in the above order.

    C Attributes:
        _ptr (C type ``void *``, protected):
            Stores a pointer to the data of the original Python object.
        _ptr_owner (C type ``bint``, protected):
            If this wrapper is the owner of the underlying data.
        _py_buffer (C type ``Py_buffer`, protected):
            Stores a pointer to the data of the original Python object.
        _py_buffer_acquired (C type ``bint``, protected):
            Stores a pointer to the data of the original Python object.
    """
    # members declared in pxd file

    def __cinit__(self):
        self._ptr = NULL
        self.ptr_owner = False
        self._py_buffer_acquired = False

    cdef clljit.LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction get_element_ptr(self):
        return <clljit.LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction>self._ptr
        
    @staticmethod
    cdef LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction from_ptr(void* ptr, bint owner=False):
        """Factory function to create ``LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction`` objects from
        given ``clljit.LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction`` pointer.
        """
        # Fast call to __new__() that bypasses the __init__() constructor.
        cdef LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction wrapper = LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction.__new__(LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction)
        wrapper._ptr = ptr
        wrapper.ptr_owner = owner
        return wrapper

    @staticmethod
    cdef LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction from_pyobj(object pyobj):
        """Derives a LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction from a Python object.

        Derives a LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction`` reference, this method
        returns it directly. No new ``LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction`` is created in this case.

        Args:
            pyobj (object): Must be either `None`; a `rocm.llvm._util.types.Pointer`; a simple, contiguous buffer according to the buffer protocol;
                            or of type `LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction`; `int`; or `ctypes.c_void_p`.

        Note:
            This routine does not perform a copy but returns the original ``pyobj``
            if ``pyobj`` is an instance of LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction!
        """
        cdef LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction wrapper = LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction.__new__(LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction)
        cdef dict cuda_array_interface = getattr(pyobj, "__cuda_array_interface__", None)

        if pyobj is None:
            wrapper._ptr = NULL
        elif isinstance(pyobj,LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction):
            return pyobj
        elif isinstance(pyobj,int):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj)
        elif isinstance(pyobj,ctypes.c_void_p):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj.value) if pyobj.value != None else NULL
        elif str(type(pyobj)).startswith("<class 'ctypes.CFUNCTYPE.") and str(type(pyobj)).endswith(".CFunctionType'>" ):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(ctypes.cast(pyobj, ctypes.c_void_p).value)
        elif isinstance(pyobj,rocm.llvm._util.types.Pointer):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(int(pyobj))
        else:
            raise TypeError(f"unsupported input type: '{str(type(pyobj))}'")
        return wrapper
    def __dealloc__(self):
        # Release the buffer handle
        if self._py_buffer_acquired is True:
            cpython.buffer.PyBuffer_Release(&self._py_buffer)
    
    def __int__(self):
        """Returns the data's address as long integer.
        """
        return cpython.long.PyLong_FromVoidPtr(self._ptr)
    def __repr__(self):
        return f"<LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction object, self.ptr={int(self)}>"
    def as_c_void_p(self):
        """Returns the data's address as `ctypes.c_void_p`
        Note:
            Implemented as function to not collide with 
            autogenerated property names.
        """
        return ctypes.c_void_p(int(self))


cdef class LLVMOrcOpaqueLLJITBuilder(rocm.llvm._util.types.Pointer):
    """Python wrapper for cdef class clljit.LLVMOrcOpaqueLLJITBuilder.
    
    Python wrapper for cdef class clljit.LLVMOrcOpaqueLLJITBuilder.

    If this type is initialized via its `__init__` method, it allocates a member of the underlying C type and
    destroys it again if the wrapper type is deallocted.

    This type also serves as adapter when appearing as argument type in a function signature.
    In this case, the type can further be initialized from the following Python objects
    that you can pass as argument instead:
    
    * `None`:

      This will set the ``self._ptr`` attribute to ``NULL``.

    * `int`:
      
      Interprets the integer value as pointer address and writes it to ``self._ptr``.
      No ownership is transferred.
      
    * `ctypes.c_void_p`:
      
      Takes the pointer address ``pyobj.value`` and writes it to ``self._ptr``.
      No ownership is transferred.
    
    
    Type checks are performed in the above order.

    C Attributes:
        _ptr (C type ``void *``, protected):
            Stores a pointer to the data of the original Python object.
        _ptr_owner (C type ``bint``, protected):
            If this wrapper is the owner of the underlying data.
        _py_buffer (C type ``Py_buffer`, protected):
            Stores a pointer to the data of the original Python object.
        _py_buffer_acquired (C type ``bint``, protected):
            Stores a pointer to the data of the original Python object.
    """
    # members declared in pxd file

    def __cinit__(self):
        self._ptr = NULL
        self.ptr_owner = False
        self._py_buffer_acquired = False

    cdef clljit.LLVMOrcOpaqueLLJITBuilder* get_element_ptr(self):
        return <clljit.LLVMOrcOpaqueLLJITBuilder*>self._ptr
        
    @staticmethod
    cdef LLVMOrcOpaqueLLJITBuilder from_ptr(void* ptr, bint owner=False):
        """Factory function to create ``LLVMOrcOpaqueLLJITBuilder`` objects from
        given ``clljit.LLVMOrcOpaqueLLJITBuilder`` pointer.
        """
        # Fast call to __new__() that bypasses the __init__() constructor.
        cdef LLVMOrcOpaqueLLJITBuilder wrapper = LLVMOrcOpaqueLLJITBuilder.__new__(LLVMOrcOpaqueLLJITBuilder)
        wrapper._ptr = ptr
        wrapper.ptr_owner = owner
        return wrapper

    @staticmethod
    cdef LLVMOrcOpaqueLLJITBuilder from_pyobj(object pyobj):
        """Derives a LLVMOrcOpaqueLLJITBuilder from a Python object.

        Derives a LLVMOrcOpaqueLLJITBuilder from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMOrcOpaqueLLJITBuilder`` reference, this method
        returns it directly. No new ``LLVMOrcOpaqueLLJITBuilder`` is created in this case.

        Args:
            pyobj (object): Must be either `None`; a `rocm.llvm._util.types.Pointer`; a simple, contiguous buffer according to the buffer protocol;
                            or of type `LLVMOrcOpaqueLLJITBuilder`; `int`; or `ctypes.c_void_p`.

        Note:
            This routine does not perform a copy but returns the original ``pyobj``
            if ``pyobj`` is an instance of LLVMOrcOpaqueLLJITBuilder!
        """
        cdef LLVMOrcOpaqueLLJITBuilder wrapper = LLVMOrcOpaqueLLJITBuilder.__new__(LLVMOrcOpaqueLLJITBuilder)
        cdef dict cuda_array_interface = getattr(pyobj, "__cuda_array_interface__", None)

        if pyobj is None:
            wrapper._ptr = NULL
        elif isinstance(pyobj,LLVMOrcOpaqueLLJITBuilder):
            return pyobj
        elif isinstance(pyobj,int):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj)
        elif isinstance(pyobj,ctypes.c_void_p):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj.value) if pyobj.value != None else NULL
        elif cpython.buffer.PyObject_CheckBuffer(pyobj):
            err = cpython.buffer.PyObject_GetBuffer( 
                pyobj,
                &wrapper._py_buffer, 
                cpython.buffer.PyBUF_SIMPLE | cpython.buffer.PyBUF_ANY_CONTIGUOUS
            )
            if err == -1:
                raise RuntimeError("failed to create simple, contiguous Py_buffer from Python object")
            wrapper._py_buffer_acquired = True
            wrapper._ptr = wrapper._py_buffer.buf
        elif isinstance(pyobj,rocm.llvm._util.types.Pointer):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(int(pyobj))
        else:
            raise TypeError(f"unsupported input type: '{str(type(pyobj))}'")
        return wrapper
    def __dealloc__(self):
        # Release the buffer handle
        if self._py_buffer_acquired is True:
            cpython.buffer.PyBuffer_Release(&self._py_buffer)
    
    def __int__(self):
        """Returns the data's address as long integer.
        """
        return cpython.long.PyLong_FromVoidPtr(self._ptr)
    def __repr__(self):
        return f"<LLVMOrcOpaqueLLJITBuilder object, self.ptr={int(self)}>"
    def as_c_void_p(self):
        """Returns the data's address as `ctypes.c_void_p`
        Note:
            Implemented as function to not collide with 
            autogenerated property names.
        """
        return ctypes.c_void_p(int(self))
    @staticmethod
    def PROPERTIES():
        return []

    def __contains__(self,item):
        properties = self.PROPERTIES()
        return item in properties

    def __getitem__(self,item):
        properties = self.PROPERTIES()
        if isinstance(item,int):
            if item < 0 or item >= len(properties):
                raise IndexError()
            return getattr(self,properties[item])
        raise ValueError("'item' type must be 'int'")


LLVMOrcLLJITBuilderRef = LLVMOrcOpaqueLLJITBuilder

cdef class LLVMOrcOpaqueLLJIT(rocm.llvm._util.types.Pointer):
    """Python wrapper for cdef class clljit.LLVMOrcOpaqueLLJIT.
    
    Python wrapper for cdef class clljit.LLVMOrcOpaqueLLJIT.

    If this type is initialized via its `__init__` method, it allocates a member of the underlying C type and
    destroys it again if the wrapper type is deallocted.

    This type also serves as adapter when appearing as argument type in a function signature.
    In this case, the type can further be initialized from the following Python objects
    that you can pass as argument instead:
    
    * `None`:

      This will set the ``self._ptr`` attribute to ``NULL``.

    * `int`:
      
      Interprets the integer value as pointer address and writes it to ``self._ptr``.
      No ownership is transferred.
      
    * `ctypes.c_void_p`:
      
      Takes the pointer address ``pyobj.value`` and writes it to ``self._ptr``.
      No ownership is transferred.
    
    
    Type checks are performed in the above order.

    C Attributes:
        _ptr (C type ``void *``, protected):
            Stores a pointer to the data of the original Python object.
        _ptr_owner (C type ``bint``, protected):
            If this wrapper is the owner of the underlying data.
        _py_buffer (C type ``Py_buffer`, protected):
            Stores a pointer to the data of the original Python object.
        _py_buffer_acquired (C type ``bint``, protected):
            Stores a pointer to the data of the original Python object.
    """
    # members declared in pxd file

    def __cinit__(self):
        self._ptr = NULL
        self.ptr_owner = False
        self._py_buffer_acquired = False

    cdef clljit.LLVMOrcOpaqueLLJIT* get_element_ptr(self):
        return <clljit.LLVMOrcOpaqueLLJIT*>self._ptr
        
    @staticmethod
    cdef LLVMOrcOpaqueLLJIT from_ptr(void* ptr, bint owner=False):
        """Factory function to create ``LLVMOrcOpaqueLLJIT`` objects from
        given ``clljit.LLVMOrcOpaqueLLJIT`` pointer.
        """
        # Fast call to __new__() that bypasses the __init__() constructor.
        cdef LLVMOrcOpaqueLLJIT wrapper = LLVMOrcOpaqueLLJIT.__new__(LLVMOrcOpaqueLLJIT)
        wrapper._ptr = ptr
        wrapper.ptr_owner = owner
        return wrapper

    @staticmethod
    cdef LLVMOrcOpaqueLLJIT from_pyobj(object pyobj):
        """Derives a LLVMOrcOpaqueLLJIT from a Python object.

        Derives a LLVMOrcOpaqueLLJIT from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMOrcOpaqueLLJIT`` reference, this method
        returns it directly. No new ``LLVMOrcOpaqueLLJIT`` is created in this case.

        Args:
            pyobj (object): Must be either `None`; a `rocm.llvm._util.types.Pointer`; a simple, contiguous buffer according to the buffer protocol;
                            or of type `LLVMOrcOpaqueLLJIT`; `int`; or `ctypes.c_void_p`.

        Note:
            This routine does not perform a copy but returns the original ``pyobj``
            if ``pyobj`` is an instance of LLVMOrcOpaqueLLJIT!
        """
        cdef LLVMOrcOpaqueLLJIT wrapper = LLVMOrcOpaqueLLJIT.__new__(LLVMOrcOpaqueLLJIT)
        cdef dict cuda_array_interface = getattr(pyobj, "__cuda_array_interface__", None)

        if pyobj is None:
            wrapper._ptr = NULL
        elif isinstance(pyobj,LLVMOrcOpaqueLLJIT):
            return pyobj
        elif isinstance(pyobj,int):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj)
        elif isinstance(pyobj,ctypes.c_void_p):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj.value) if pyobj.value != None else NULL
        elif cpython.buffer.PyObject_CheckBuffer(pyobj):
            err = cpython.buffer.PyObject_GetBuffer( 
                pyobj,
                &wrapper._py_buffer, 
                cpython.buffer.PyBUF_SIMPLE | cpython.buffer.PyBUF_ANY_CONTIGUOUS
            )
            if err == -1:
                raise RuntimeError("failed to create simple, contiguous Py_buffer from Python object")
            wrapper._py_buffer_acquired = True
            wrapper._ptr = wrapper._py_buffer.buf
        elif isinstance(pyobj,rocm.llvm._util.types.Pointer):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(int(pyobj))
        else:
            raise TypeError(f"unsupported input type: '{str(type(pyobj))}'")
        return wrapper
    def __dealloc__(self):
        # Release the buffer handle
        if self._py_buffer_acquired is True:
            cpython.buffer.PyBuffer_Release(&self._py_buffer)
    
    def __int__(self):
        """Returns the data's address as long integer.
        """
        return cpython.long.PyLong_FromVoidPtr(self._ptr)
    def __repr__(self):
        return f"<LLVMOrcOpaqueLLJIT object, self.ptr={int(self)}>"
    def as_c_void_p(self):
        """Returns the data's address as `ctypes.c_void_p`
        Note:
            Implemented as function to not collide with 
            autogenerated property names.
        """
        return ctypes.c_void_p(int(self))
    @staticmethod
    def PROPERTIES():
        return []

    def __contains__(self,item):
        properties = self.PROPERTIES()
        return item in properties

    def __getitem__(self,item):
        properties = self.PROPERTIES()
        if isinstance(item,int):
            if item < 0 or item >= len(properties):
                raise IndexError()
            return getattr(self,properties[item])
        raise ValueError("'item' type must be 'int'")


LLVMOrcLLJITRef = LLVMOrcOpaqueLLJIT

@cython.embedsignature(True)
def LLVMOrcCreateLLJITBuilder():
    r"""(No short description, might be part of a group.)

    Create an LLVMOrcLLJITBuilder.

    The client owns the resulting LLJITBuilder and should dispose of it using
    LLVMOrcDisposeLLJITBuilder once they are done with it.
    """
    _LLVMOrcCreateLLJITBuilder__retval = LLVMOrcOpaqueLLJITBuilder.from_ptr(clljit.LLVMOrcCreateLLJITBuilder())    # fully specified
    return _LLVMOrcCreateLLJITBuilder__retval


@cython.embedsignature(True)
def LLVMOrcDisposeLLJITBuilder(object Builder):
    r"""(No short description, might be part of a group.)

    Dispose of an LLVMOrcLLJITBuilderRef. This should only be called if ownership
    has not been passed to LLVMOrcCreateLLJIT (e.g. because some error prevented
    that function from being called).

    Args:
        Builder (`~.LLVMOrcOpaqueLLJITBuilder`/`~.object`):
            (undocumented)
    """
    clljit.LLVMOrcDisposeLLJITBuilder(
        LLVMOrcOpaqueLLJITBuilder.from_pyobj(Builder).get_element_ptr())    # fully specified


@cython.embedsignature(True)
def LLVMOrcLLJITBuilderSetJITTargetMachineBuilder(object Builder, object JTMB):
    r"""(No short description, might be part of a group.)

    Set the JITTargetMachineBuilder to be used when constructing the LLJIT
    instance. Calling this function is optional: if it is not called then the
    LLJITBuilder will use JITTargeTMachineBuilder`~.detectHost` to construct a
    JITTargetMachineBuilder.

    This function takes ownership of the JTMB argument: clients should not
    dispose of the JITTargetMachineBuilder after calling this function.

    Args:
        Builder (`~.LLVMOrcOpaqueLLJITBuilder`/`~.object`):
            (undocumented)

        JTMB (`~.LLVMOrcOpaqueJITTargetMachineBuilder`/`~.object`):
            (undocumented)
    """
    clljit.LLVMOrcLLJITBuilderSetJITTargetMachineBuilder(
        LLVMOrcOpaqueLLJITBuilder.from_pyobj(Builder).get_element_ptr(),
        LLVMOrcOpaqueJITTargetMachineBuilder.from_pyobj(JTMB).get_element_ptr())    # fully specified


@cython.embedsignature(True)
def LLVMOrcLLJITBuilderSetObjectLinkingLayerCreator(object Builder, object F, object Ctx):
    r"""(No short description, might be part of a group.)

    Set an ObjectLinkingLayer creator function for this LLJIT instance.

    Args:
        Builder (`~.LLVMOrcOpaqueLLJITBuilder`/`~.object`):
            (undocumented)

        F (`~.LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction`/`~.object`):
            (undocumented)

        Ctx (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    clljit.LLVMOrcLLJITBuilderSetObjectLinkingLayerCreator(
        LLVMOrcOpaqueLLJITBuilder.from_pyobj(Builder).get_element_ptr(),
        LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction.from_pyobj(F).get_element_ptr(),
        <void *>rocm.llvm._util.types.Pointer.from_pyobj(Ctx)._ptr)    # fully specified


@cython.embedsignature(True)
def LLVMOrcCreateLLJIT(object Result, object Builder):
    r"""(No short description, might be part of a group.)

    Create an LLJIT instance from an LLJITBuilder.

    This operation takes ownership of the Builder argument: clients should not
    dispose of the builder after calling this function (even if the function
    returns an error). If a null Builder argument is provided then a
    default-constructed LLJITBuilder will be used.

    On success the resulting LLJIT instance is uniquely owned by the client and
    automatically manages the memory of all JIT'd code and all modules that are
    transferred to it (e.g. via LLVMOrcLLJITAddLLVMIRModule). Disposing of the
    LLJIT instance will free all memory managed by the JIT, including JIT'd code
    and not-yet compiled modules.

    Args:
        Result (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        Builder (`~.LLVMOrcOpaqueLLJITBuilder`/`~.object`):
            (undocumented)
    """
    _LLVMOrcCreateLLJIT__retval = LLVMOpaqueError.from_ptr(clljit.LLVMOrcCreateLLJIT(
        <clljit.LLVMOrcLLJITRef*>rocm.llvm._util.types.Pointer.from_pyobj(Result)._ptr,
        LLVMOrcOpaqueLLJITBuilder.from_pyobj(Builder).get_element_ptr()))    # fully specified
    return _LLVMOrcCreateLLJIT__retval


@cython.embedsignature(True)
def LLVMOrcDisposeLLJIT(object J):
    r"""(No short description, might be part of a group.)

    Dispose of an LLJIT instance.

    Args:
        J (`~.LLVMOrcOpaqueLLJIT`/`~.object`):
            (undocumented)
    """
    _LLVMOrcDisposeLLJIT__retval = LLVMOpaqueError.from_ptr(clljit.LLVMOrcDisposeLLJIT(
        LLVMOrcOpaqueLLJIT.from_pyobj(J).get_element_ptr()))    # fully specified
    return _LLVMOrcDisposeLLJIT__retval


@cython.embedsignature(True)
def LLVMOrcLLJITGetExecutionSession(object J):
    r"""(No short description, might be part of a group.)

    Get a reference to the ExecutionSession for this LLJIT instance.

    The ExecutionSession is owned by the LLJIT instance. The client is not
    responsible for managing its memory.

    Args:
        J (`~.LLVMOrcOpaqueLLJIT`/`~.object`):
            (undocumented)
    """
    _LLVMOrcLLJITGetExecutionSession__retval = LLVMOrcOpaqueExecutionSession.from_ptr(clljit.LLVMOrcLLJITGetExecutionSession(
        LLVMOrcOpaqueLLJIT.from_pyobj(J).get_element_ptr()))    # fully specified
    return _LLVMOrcLLJITGetExecutionSession__retval


@cython.embedsignature(True)
def LLVMOrcLLJITGetMainJITDylib(object J):
    r"""(No short description, might be part of a group.)

    Return a reference to the Main JITDylib.

    The JITDylib is owned by the LLJIT instance. The client is not responsible
    for managing its memory.

    Args:
        J (`~.LLVMOrcOpaqueLLJIT`/`~.object`):
            (undocumented)
    """
    _LLVMOrcLLJITGetMainJITDylib__retval = LLVMOrcOpaqueJITDylib.from_ptr(clljit.LLVMOrcLLJITGetMainJITDylib(
        LLVMOrcOpaqueLLJIT.from_pyobj(J).get_element_ptr()))    # fully specified
    return _LLVMOrcLLJITGetMainJITDylib__retval


@cython.embedsignature(True)
def LLVMOrcLLJITGetTripleString(object J):
    r"""(No short description, might be part of a group.)

    Return the target triple for this LLJIT instance. This string is owned by
    the LLJIT instance and should not be freed by the client.

    Args:
        J (`~.LLVMOrcOpaqueLLJIT`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMOrcLLJITGetTripleString__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>clljit.LLVMOrcLLJITGetTripleString(
        LLVMOrcOpaqueLLJIT.from_pyobj(J).get_element_ptr()))    # fully specified
    return _LLVMOrcLLJITGetTripleString__retval


@cython.embedsignature(True)
def LLVMOrcLLJITGetGlobalPrefix(object J):
    r"""(No short description, might be part of a group.)

    Returns the global prefix character according to the LLJIT's DataLayout.

    Args:
        J (`~.LLVMOrcOpaqueLLJIT`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef char _LLVMOrcLLJITGetGlobalPrefix__retval = clljit.LLVMOrcLLJITGetGlobalPrefix(
        LLVMOrcOpaqueLLJIT.from_pyobj(J).get_element_ptr())    # fully specified
    return _LLVMOrcLLJITGetGlobalPrefix__retval


@cython.embedsignature(True)
def LLVMOrcLLJITMangleAndIntern(object J, object UnmangledName):
    r"""(No short description, might be part of a group.)

    Mangles the given string according to the LLJIT instance's DataLayout, then
    interns the result in the SymbolStringPool and returns a reference to the
    pool entry. Clients should call LLVMOrcReleaseSymbolStringPoolEntry to
    decrement the ref-count on the pool entry once they are finished with this
    value.

    Args:
        J (`~.LLVMOrcOpaqueLLJIT`/`~.object`):
            (undocumented)

        UnmangledName (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMOrcLLJITMangleAndIntern__retval = LLVMOrcOpaqueSymbolStringPoolEntry.from_ptr(clljit.LLVMOrcLLJITMangleAndIntern(
        LLVMOrcOpaqueLLJIT.from_pyobj(J).get_element_ptr(),
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(UnmangledName)._ptr))    # fully specified
    return _LLVMOrcLLJITMangleAndIntern__retval


@cython.embedsignature(True)
def LLVMOrcLLJITAddObjectFile(object J, object JD, object ObjBuffer):
    r"""(No short description, might be part of a group.)

    Add a buffer representing an object file to the given JITDylib in the given
    LLJIT instance. This operation transfers ownership of the buffer to the
    LLJIT instance. The buffer should not be disposed of or referenced once this
    function returns.

    Resources associated with the given object will be tracked by the given
    JITDylib's default resource tracker.

    Args:
        J (`~.LLVMOrcOpaqueLLJIT`/`~.object`):
            (undocumented)

        JD (`~.LLVMOrcOpaqueJITDylib`/`~.object`):
            (undocumented)

        ObjBuffer (`~.LLVMOpaqueMemoryBuffer`/`~.object`):
            (undocumented)
    """
    _LLVMOrcLLJITAddObjectFile__retval = LLVMOpaqueError.from_ptr(clljit.LLVMOrcLLJITAddObjectFile(
        LLVMOrcOpaqueLLJIT.from_pyobj(J).get_element_ptr(),
        LLVMOrcOpaqueJITDylib.from_pyobj(JD).get_element_ptr(),
        LLVMOpaqueMemoryBuffer.from_pyobj(ObjBuffer).get_element_ptr()))    # fully specified
    return _LLVMOrcLLJITAddObjectFile__retval


@cython.embedsignature(True)
def LLVMOrcLLJITAddObjectFileWithRT(object J, object RT, object ObjBuffer):
    r"""(No short description, might be part of a group.)

    Add a buffer representing an object file to the given ResourceTracker's
    JITDylib in the given LLJIT instance. This operation transfers ownership of
    the buffer to the LLJIT instance. The buffer should not be disposed of or
    referenced once this function returns.

    Resources associated with the given object will be tracked by ResourceTracker
    RT.

    Args:
        J (`~.LLVMOrcOpaqueLLJIT`/`~.object`):
            (undocumented)

        RT (`~.LLVMOrcOpaqueResourceTracker`/`~.object`):
            (undocumented)

        ObjBuffer (`~.LLVMOpaqueMemoryBuffer`/`~.object`):
            (undocumented)
    """
    _LLVMOrcLLJITAddObjectFileWithRT__retval = LLVMOpaqueError.from_ptr(clljit.LLVMOrcLLJITAddObjectFileWithRT(
        LLVMOrcOpaqueLLJIT.from_pyobj(J).get_element_ptr(),
        LLVMOrcOpaqueResourceTracker.from_pyobj(RT).get_element_ptr(),
        LLVMOpaqueMemoryBuffer.from_pyobj(ObjBuffer).get_element_ptr()))    # fully specified
    return _LLVMOrcLLJITAddObjectFileWithRT__retval


@cython.embedsignature(True)
def LLVMOrcLLJITAddLLVMIRModule(object J, object JD, object TSM):
    r"""(No short description, might be part of a group.)

    Add an IR module to the given JITDylib in the given LLJIT instance. This
    operation transfers ownership of the TSM argument to the LLJIT instance.
    The TSM argument should not be disposed of or referenced once this
    function returns.

    Resources associated with the given Module will be tracked by the given
    JITDylib's default resource tracker.

    Args:
        J (`~.LLVMOrcOpaqueLLJIT`/`~.object`):
            (undocumented)

        JD (`~.LLVMOrcOpaqueJITDylib`/`~.object`):
            (undocumented)

        TSM (`~.LLVMOrcOpaqueThreadSafeModule`/`~.object`):
            (undocumented)
    """
    _LLVMOrcLLJITAddLLVMIRModule__retval = LLVMOpaqueError.from_ptr(clljit.LLVMOrcLLJITAddLLVMIRModule(
        LLVMOrcOpaqueLLJIT.from_pyobj(J).get_element_ptr(),
        LLVMOrcOpaqueJITDylib.from_pyobj(JD).get_element_ptr(),
        LLVMOrcOpaqueThreadSafeModule.from_pyobj(TSM).get_element_ptr()))    # fully specified
    return _LLVMOrcLLJITAddLLVMIRModule__retval


@cython.embedsignature(True)
def LLVMOrcLLJITAddLLVMIRModuleWithRT(object J, object JD, object TSM):
    r"""(No short description, might be part of a group.)

    Add an IR module to the given ResourceTracker's JITDylib in the given LLJIT
    instance. This operation transfers ownership of the TSM argument to the LLJIT
    instance. The TSM argument should not be disposed of or referenced once this
    function returns.

    Resources associated with the given Module will be tracked by ResourceTracker
    RT.

    Args:
        J (`~.LLVMOrcOpaqueLLJIT`/`~.object`):
            (undocumented)

        JD (`~.LLVMOrcOpaqueResourceTracker`/`~.object`):
            (undocumented)

        TSM (`~.LLVMOrcOpaqueThreadSafeModule`/`~.object`):
            (undocumented)
    """
    _LLVMOrcLLJITAddLLVMIRModuleWithRT__retval = LLVMOpaqueError.from_ptr(clljit.LLVMOrcLLJITAddLLVMIRModuleWithRT(
        LLVMOrcOpaqueLLJIT.from_pyobj(J).get_element_ptr(),
        LLVMOrcOpaqueResourceTracker.from_pyobj(JD).get_element_ptr(),
        LLVMOrcOpaqueThreadSafeModule.from_pyobj(TSM).get_element_ptr()))    # fully specified
    return _LLVMOrcLLJITAddLLVMIRModuleWithRT__retval


@cython.embedsignature(True)
def LLVMOrcLLJITLookup(object J, object Result, object Name):
    r"""(No short description, might be part of a group.)

    Look up the given symbol in the main JITDylib of the given LLJIT instance.

    This operation does not take ownership of the Name argument.

    Args:
        J (`~.LLVMOrcOpaqueLLJIT`/`~.object`):
            (undocumented)

        Result (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        Name (`~.rocm.llvm._util.types.CStr`/`~.object`):
            (undocumented)
    """
    _LLVMOrcLLJITLookup__retval = LLVMOpaqueError.from_ptr(clljit.LLVMOrcLLJITLookup(
        LLVMOrcOpaqueLLJIT.from_pyobj(J).get_element_ptr(),
        <unsigned long *>rocm.llvm._util.types.Pointer.from_pyobj(Result)._ptr,
        <const char *>rocm.llvm._util.types.CStr.from_pyobj(Name)._ptr))    # fully specified
    return _LLVMOrcLLJITLookup__retval


@cython.embedsignature(True)
def LLVMOrcLLJITGetObjLinkingLayer(object J):
    r"""(No short description, might be part of a group.)

    Returns a non-owning reference to the LLJIT instance's object linking layer.

    Args:
        J (`~.LLVMOrcOpaqueLLJIT`/`~.object`):
            (undocumented)
    """
    _LLVMOrcLLJITGetObjLinkingLayer__retval = LLVMOrcOpaqueObjectLayer.from_ptr(clljit.LLVMOrcLLJITGetObjLinkingLayer(
        LLVMOrcOpaqueLLJIT.from_pyobj(J).get_element_ptr()))    # fully specified
    return _LLVMOrcLLJITGetObjLinkingLayer__retval


@cython.embedsignature(True)
def LLVMOrcLLJITGetObjTransformLayer(object J):
    r"""(No short description, might be part of a group.)

    Returns a non-owning reference to the LLJIT instance's object linking layer.

    Args:
        J (`~.LLVMOrcOpaqueLLJIT`/`~.object`):
            (undocumented)
    """
    _LLVMOrcLLJITGetObjTransformLayer__retval = LLVMOrcOpaqueObjectTransformLayer.from_ptr(clljit.LLVMOrcLLJITGetObjTransformLayer(
        LLVMOrcOpaqueLLJIT.from_pyobj(J).get_element_ptr()))    # fully specified
    return _LLVMOrcLLJITGetObjTransformLayer__retval


@cython.embedsignature(True)
def LLVMOrcLLJITGetIRTransformLayer(object J):
    r"""(No short description, might be part of a group.)

    Returns a non-owning reference to the LLJIT instance's IR transform layer.

    Args:
        J (`~.LLVMOrcOpaqueLLJIT`/`~.object`):
            (undocumented)
    """
    _LLVMOrcLLJITGetIRTransformLayer__retval = LLVMOrcOpaqueIRTransformLayer.from_ptr(clljit.LLVMOrcLLJITGetIRTransformLayer(
        LLVMOrcOpaqueLLJIT.from_pyobj(J).get_element_ptr()))    # fully specified
    return _LLVMOrcLLJITGetIRTransformLayer__retval


@cython.embedsignature(True)
def LLVMOrcLLJITGetDataLayoutStr(object J):
    r"""(No short description, might be part of a group.)

    Get the LLJIT instance's default data layout string.

    This string is owned by the LLJIT instance and does not need to be freed
    by the caller.

    Args:
        J (`~.LLVMOrcOpaqueLLJIT`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    _LLVMOrcLLJITGetDataLayoutStr__retval = rocm.llvm._util.types.CStr.from_ptr(<void*>clljit.LLVMOrcLLJITGetDataLayoutStr(
        LLVMOrcOpaqueLLJIT.from_pyobj(J).get_element_ptr()))    # fully specified
    return _LLVMOrcLLJITGetDataLayoutStr__retval

__all__ = [
    "LLVMOrcLLJITBuilderObjectLinkingLayerCreatorFunction",
    "LLVMOrcOpaqueLLJITBuilder",
    "LLVMOrcLLJITBuilderRef",
    "LLVMOrcOpaqueLLJIT",
    "LLVMOrcLLJITRef",
    "LLVMOrcCreateLLJITBuilder",
    "LLVMOrcDisposeLLJITBuilder",
    "LLVMOrcLLJITBuilderSetJITTargetMachineBuilder",
    "LLVMOrcLLJITBuilderSetObjectLinkingLayerCreator",
    "LLVMOrcCreateLLJIT",
    "LLVMOrcDisposeLLJIT",
    "LLVMOrcLLJITGetExecutionSession",
    "LLVMOrcLLJITGetMainJITDylib",
    "LLVMOrcLLJITGetTripleString",
    "LLVMOrcLLJITGetGlobalPrefix",
    "LLVMOrcLLJITMangleAndIntern",
    "LLVMOrcLLJITAddObjectFile",
    "LLVMOrcLLJITAddObjectFileWithRT",
    "LLVMOrcLLJITAddLLVMIRModule",
    "LLVMOrcLLJITAddLLVMIRModuleWithRT",
    "LLVMOrcLLJITLookup",
    "LLVMOrcLLJITGetObjLinkingLayer",
    "LLVMOrcLLJITGetObjTransformLayer",
    "LLVMOrcLLJITGetIRTransformLayer",
    "LLVMOrcLLJITGetDataLayoutStr",
]