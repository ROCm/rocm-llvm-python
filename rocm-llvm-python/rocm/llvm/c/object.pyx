# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.


"""
(No short description)

Attributes:
    LLVMSectionIteratorRef:
        alias of `~.LLVMOpaqueSectionIterator`

    LLVMSymbolIteratorRef:
        alias of `~.LLVMOpaqueSymbolIterator`

    LLVMRelocationIteratorRef:
        alias of `~.LLVMOpaqueRelocationIterator`

    LLVMObjectFileRef:
        alias of `~.LLVMOpaqueObjectFile`

"""

import cython
import ctypes
import enum

from rocm.llvm.c.types import LLVMMemoryBufferRef
from rocm.llvm.c.types import LLVMContextRef
from rocm.llvm.c.types import LLVMModuleRef
from rocm.llvm.c.types import LLVMTypeRef
from rocm.llvm.c.types import LLVMValueRef
from rocm.llvm.c.types import LLVMBasicBlockRef
from rocm.llvm.c.types import LLVMMetadataRef
from rocm.llvm.c.types import LLVMNamedMDNodeRef
from rocm.llvm.c.types import LLVMValueMetadataEntry
from rocm.llvm.c.types import LLVMBuilderRef
from rocm.llvm.c.types import LLVMDIBuilderRef
from rocm.llvm.c.types import LLVMModuleProviderRef
from rocm.llvm.c.types import LLVMPassManagerRef
from rocm.llvm.c.types import LLVMPassRegistryRef
from rocm.llvm.c.types import LLVMUseRef
from rocm.llvm.c.types import LLVMAttributeRef
from rocm.llvm.c.types import LLVMDiagnosticInfoRef
from rocm.llvm.c.types import LLVMComdatRef
from rocm.llvm.c.types import LLVMModuleFlagEntry
from rocm.llvm.c.types import LLVMJITEventListenerRef
from rocm.llvm.c.types import LLVMBinaryRef


from rocm.llvm.config.llvm_config import LLVM_DEFAULT_TARGET_TRIPLE
from rocm.llvm.config.llvm_config import LLVM_ENABLE_THREADS
from rocm.llvm.config.llvm_config import LLVM_HAS_ATOMICS
from rocm.llvm.config.llvm_config import LLVM_HOST_TRIPLE
from rocm.llvm.config.llvm_config import LLVM_ON_UNIX
from rocm.llvm.config.llvm_config import LLVM_USE_INTEL_JITEVENTS
from rocm.llvm.config.llvm_config import LLVM_USE_OPROFILE
from rocm.llvm.config.llvm_config import LLVM_USE_PERF
from rocm.llvm.config.llvm_config import LLVM_VERSION_MAJOR
from rocm.llvm.config.llvm_config import LLVM_VERSION_MINOR
from rocm.llvm.config.llvm_config import LLVM_VERSION_PATCH
from rocm.llvm.config.llvm_config import LLVM_VERSION_STRING
from rocm.llvm.config.llvm_config import LLVM_FORCE_ENABLE_STATS
from rocm.llvm.config.llvm_config import LLVM_ENABLE_ZLIB
from rocm.llvm.config.llvm_config import LLVM_ENABLE_ZSTD
from rocm.llvm.config.llvm_config import HAVE_SYSEXITS_H
from rocm.llvm.config.llvm_config import LLVM_UNREACHABLE_OPTIMIZE
from rocm.llvm.config.llvm_config import LLVM_ENABLE_DIA_SDK
from rocm.llvm.config.llvm_config import LLVM_ENABLE_PLUGINS

cdef class LLVMOpaqueSectionIterator(rocm.llvm._util.types.Pointer):
    """Python wrapper for cdef class cobject.LLVMOpaqueSectionIterator.
    
    Python wrapper for cdef class cobject.LLVMOpaqueSectionIterator.

    If this type is initialized via its `__init__` method, it allocates a member of the underlying C type and
    destroys it again if the wrapper type is deallocted.

    This type also serves as adapter when appearing as argument type in a function signature.
    In this case, the type can further be initialized from the following Python objects
    that you can pass as argument instead:
    
    * `None`:

      This will set the ``self._ptr`` attribute to ``NULL``.

    * `int`:
      
      Interprets the integer value as pointer address and writes it to ``self._ptr``.
      No ownership is transferred.
      
    * `ctypes.c_void_p`:
      
      Takes the pointer address ``pyobj.value`` and writes it to ``self._ptr``.
      No ownership is transferred.
    
    
    Type checks are performed in the above order.

    C Attributes:
        _ptr (C type ``void *``, protected):
            Stores a pointer to the data of the original Python object.
        _ptr_owner (C type ``bint``, protected):
            If this wrapper is the owner of the underlying data.
        _py_buffer (C type ``Py_buffer`, protected):
            Stores a pointer to the data of the original Python object.
        _py_buffer_acquired (C type ``bint``, protected):
            Stores a pointer to the data of the original Python object.
    """
    # members declared in pxd file

    def __cinit__(self):
        self._ptr = NULL
        self.ptr_owner = False
        self._py_buffer_acquired = False

    cdef cobject.LLVMOpaqueSectionIterator* get_element_ptr(self):
        return <cobject.LLVMOpaqueSectionIterator*>self._ptr
        
    @staticmethod
    cdef LLVMOpaqueSectionIterator from_ptr(void* ptr, bint owner=False):
        """Factory function to create ``LLVMOpaqueSectionIterator`` objects from
        given ``cobject.LLVMOpaqueSectionIterator`` pointer.
        """
        # Fast call to __new__() that bypasses the __init__() constructor.
        cdef LLVMOpaqueSectionIterator wrapper = LLVMOpaqueSectionIterator.__new__(LLVMOpaqueSectionIterator)
        wrapper._ptr = ptr
        wrapper.ptr_owner = owner
        return wrapper

    @staticmethod
    cdef LLVMOpaqueSectionIterator from_pyobj(object pyobj):
        """Derives a LLVMOpaqueSectionIterator from a Python object.

        Derives a LLVMOpaqueSectionIterator from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMOpaqueSectionIterator`` reference, this method
        returns it directly. No new ``LLVMOpaqueSectionIterator`` is created in this case.

        Args:
            pyobj (object): Must be either `None`; a `rocm.llvm._util.types.Pointer`; a simple, contiguous buffer according to the buffer protocol;
                            or of type `LLVMOpaqueSectionIterator`; `int`; or `ctypes.c_void_p`.

        Note:
            This routine does not perform a copy but returns the original ``pyobj``
            if ``pyobj`` is an instance of LLVMOpaqueSectionIterator!
        """
        cdef LLVMOpaqueSectionIterator wrapper = LLVMOpaqueSectionIterator.__new__(LLVMOpaqueSectionIterator)
        cdef dict cuda_array_interface = getattr(pyobj, "__cuda_array_interface__", None)

        if pyobj is None:
            wrapper._ptr = NULL
        elif isinstance(pyobj,LLVMOpaqueSectionIterator):
            return pyobj
        elif isinstance(pyobj,int):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj)
        elif isinstance(pyobj,ctypes.c_void_p):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj.value) if pyobj.value != None else NULL
        elif cpython.buffer.PyObject_CheckBuffer(pyobj):
            err = cpython.buffer.PyObject_GetBuffer( 
                pyobj,
                &wrapper._py_buffer, 
                cpython.buffer.PyBUF_SIMPLE | cpython.buffer.PyBUF_ANY_CONTIGUOUS
            )
            if err == -1:
                raise RuntimeError("failed to create simple, contiguous Py_buffer from Python object")
            wrapper._py_buffer_acquired = True
            wrapper._ptr = wrapper._py_buffer.buf
        elif isinstance(pyobj,rocm.llvm._util.types.Pointer):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(int(pyobj))
        else:
            raise TypeError(f"unsupported input type: '{str(type(pyobj))}'")
        return wrapper
    def __dealloc__(self):
        # Release the buffer handle
        if self._py_buffer_acquired is True:
            cpython.buffer.PyBuffer_Release(&self._py_buffer)
    
    def __int__(self):
        """Returns the data's address as long integer.
        """
        return cpython.long.PyLong_FromVoidPtr(self._ptr)
    def __repr__(self):
        return f"<LLVMOpaqueSectionIterator object, self.ptr={int(self)}>"
    def as_c_void_p(self):
        """Returns the data's address as `ctypes.c_void_p`
        Note:
            Implemented as function to not collide with 
            autogenerated property names.
        """
        return ctypes.c_void_p(int(self))
    @staticmethod
    def PROPERTIES():
        return []

    def __contains__(self,item):
        properties = self.PROPERTIES()
        return item in properties

    def __getitem__(self,item):
        properties = self.PROPERTIES()
        if isinstance(item,int):
            if item < 0 or item >= len(properties):
                raise IndexError()
            return getattr(self,properties[item])
        raise ValueError("'item' type must be 'int'")


LLVMSectionIteratorRef = LLVMOpaqueSectionIterator

cdef class LLVMOpaqueSymbolIterator(rocm.llvm._util.types.Pointer):
    """Python wrapper for cdef class cobject.LLVMOpaqueSymbolIterator.
    
    Python wrapper for cdef class cobject.LLVMOpaqueSymbolIterator.

    If this type is initialized via its `__init__` method, it allocates a member of the underlying C type and
    destroys it again if the wrapper type is deallocted.

    This type also serves as adapter when appearing as argument type in a function signature.
    In this case, the type can further be initialized from the following Python objects
    that you can pass as argument instead:
    
    * `None`:

      This will set the ``self._ptr`` attribute to ``NULL``.

    * `int`:
      
      Interprets the integer value as pointer address and writes it to ``self._ptr``.
      No ownership is transferred.
      
    * `ctypes.c_void_p`:
      
      Takes the pointer address ``pyobj.value`` and writes it to ``self._ptr``.
      No ownership is transferred.
    
    
    Type checks are performed in the above order.

    C Attributes:
        _ptr (C type ``void *``, protected):
            Stores a pointer to the data of the original Python object.
        _ptr_owner (C type ``bint``, protected):
            If this wrapper is the owner of the underlying data.
        _py_buffer (C type ``Py_buffer`, protected):
            Stores a pointer to the data of the original Python object.
        _py_buffer_acquired (C type ``bint``, protected):
            Stores a pointer to the data of the original Python object.
    """
    # members declared in pxd file

    def __cinit__(self):
        self._ptr = NULL
        self.ptr_owner = False
        self._py_buffer_acquired = False

    cdef cobject.LLVMOpaqueSymbolIterator* get_element_ptr(self):
        return <cobject.LLVMOpaqueSymbolIterator*>self._ptr
        
    @staticmethod
    cdef LLVMOpaqueSymbolIterator from_ptr(void* ptr, bint owner=False):
        """Factory function to create ``LLVMOpaqueSymbolIterator`` objects from
        given ``cobject.LLVMOpaqueSymbolIterator`` pointer.
        """
        # Fast call to __new__() that bypasses the __init__() constructor.
        cdef LLVMOpaqueSymbolIterator wrapper = LLVMOpaqueSymbolIterator.__new__(LLVMOpaqueSymbolIterator)
        wrapper._ptr = ptr
        wrapper.ptr_owner = owner
        return wrapper

    @staticmethod
    cdef LLVMOpaqueSymbolIterator from_pyobj(object pyobj):
        """Derives a LLVMOpaqueSymbolIterator from a Python object.

        Derives a LLVMOpaqueSymbolIterator from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMOpaqueSymbolIterator`` reference, this method
        returns it directly. No new ``LLVMOpaqueSymbolIterator`` is created in this case.

        Args:
            pyobj (object): Must be either `None`; a `rocm.llvm._util.types.Pointer`; a simple, contiguous buffer according to the buffer protocol;
                            or of type `LLVMOpaqueSymbolIterator`; `int`; or `ctypes.c_void_p`.

        Note:
            This routine does not perform a copy but returns the original ``pyobj``
            if ``pyobj`` is an instance of LLVMOpaqueSymbolIterator!
        """
        cdef LLVMOpaqueSymbolIterator wrapper = LLVMOpaqueSymbolIterator.__new__(LLVMOpaqueSymbolIterator)
        cdef dict cuda_array_interface = getattr(pyobj, "__cuda_array_interface__", None)

        if pyobj is None:
            wrapper._ptr = NULL
        elif isinstance(pyobj,LLVMOpaqueSymbolIterator):
            return pyobj
        elif isinstance(pyobj,int):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj)
        elif isinstance(pyobj,ctypes.c_void_p):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj.value) if pyobj.value != None else NULL
        elif cpython.buffer.PyObject_CheckBuffer(pyobj):
            err = cpython.buffer.PyObject_GetBuffer( 
                pyobj,
                &wrapper._py_buffer, 
                cpython.buffer.PyBUF_SIMPLE | cpython.buffer.PyBUF_ANY_CONTIGUOUS
            )
            if err == -1:
                raise RuntimeError("failed to create simple, contiguous Py_buffer from Python object")
            wrapper._py_buffer_acquired = True
            wrapper._ptr = wrapper._py_buffer.buf
        elif isinstance(pyobj,rocm.llvm._util.types.Pointer):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(int(pyobj))
        else:
            raise TypeError(f"unsupported input type: '{str(type(pyobj))}'")
        return wrapper
    def __dealloc__(self):
        # Release the buffer handle
        if self._py_buffer_acquired is True:
            cpython.buffer.PyBuffer_Release(&self._py_buffer)
    
    def __int__(self):
        """Returns the data's address as long integer.
        """
        return cpython.long.PyLong_FromVoidPtr(self._ptr)
    def __repr__(self):
        return f"<LLVMOpaqueSymbolIterator object, self.ptr={int(self)}>"
    def as_c_void_p(self):
        """Returns the data's address as `ctypes.c_void_p`
        Note:
            Implemented as function to not collide with 
            autogenerated property names.
        """
        return ctypes.c_void_p(int(self))
    @staticmethod
    def PROPERTIES():
        return []

    def __contains__(self,item):
        properties = self.PROPERTIES()
        return item in properties

    def __getitem__(self,item):
        properties = self.PROPERTIES()
        if isinstance(item,int):
            if item < 0 or item >= len(properties):
                raise IndexError()
            return getattr(self,properties[item])
        raise ValueError("'item' type must be 'int'")


LLVMSymbolIteratorRef = LLVMOpaqueSymbolIterator

cdef class LLVMOpaqueRelocationIterator(rocm.llvm._util.types.Pointer):
    """Python wrapper for cdef class cobject.LLVMOpaqueRelocationIterator.
    
    Python wrapper for cdef class cobject.LLVMOpaqueRelocationIterator.

    If this type is initialized via its `__init__` method, it allocates a member of the underlying C type and
    destroys it again if the wrapper type is deallocted.

    This type also serves as adapter when appearing as argument type in a function signature.
    In this case, the type can further be initialized from the following Python objects
    that you can pass as argument instead:
    
    * `None`:

      This will set the ``self._ptr`` attribute to ``NULL``.

    * `int`:
      
      Interprets the integer value as pointer address and writes it to ``self._ptr``.
      No ownership is transferred.
      
    * `ctypes.c_void_p`:
      
      Takes the pointer address ``pyobj.value`` and writes it to ``self._ptr``.
      No ownership is transferred.
    
    
    Type checks are performed in the above order.

    C Attributes:
        _ptr (C type ``void *``, protected):
            Stores a pointer to the data of the original Python object.
        _ptr_owner (C type ``bint``, protected):
            If this wrapper is the owner of the underlying data.
        _py_buffer (C type ``Py_buffer`, protected):
            Stores a pointer to the data of the original Python object.
        _py_buffer_acquired (C type ``bint``, protected):
            Stores a pointer to the data of the original Python object.
    """
    # members declared in pxd file

    def __cinit__(self):
        self._ptr = NULL
        self.ptr_owner = False
        self._py_buffer_acquired = False

    cdef cobject.LLVMOpaqueRelocationIterator* get_element_ptr(self):
        return <cobject.LLVMOpaqueRelocationIterator*>self._ptr
        
    @staticmethod
    cdef LLVMOpaqueRelocationIterator from_ptr(void* ptr, bint owner=False):
        """Factory function to create ``LLVMOpaqueRelocationIterator`` objects from
        given ``cobject.LLVMOpaqueRelocationIterator`` pointer.
        """
        # Fast call to __new__() that bypasses the __init__() constructor.
        cdef LLVMOpaqueRelocationIterator wrapper = LLVMOpaqueRelocationIterator.__new__(LLVMOpaqueRelocationIterator)
        wrapper._ptr = ptr
        wrapper.ptr_owner = owner
        return wrapper

    @staticmethod
    cdef LLVMOpaqueRelocationIterator from_pyobj(object pyobj):
        """Derives a LLVMOpaqueRelocationIterator from a Python object.

        Derives a LLVMOpaqueRelocationIterator from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMOpaqueRelocationIterator`` reference, this method
        returns it directly. No new ``LLVMOpaqueRelocationIterator`` is created in this case.

        Args:
            pyobj (object): Must be either `None`; a `rocm.llvm._util.types.Pointer`; a simple, contiguous buffer according to the buffer protocol;
                            or of type `LLVMOpaqueRelocationIterator`; `int`; or `ctypes.c_void_p`.

        Note:
            This routine does not perform a copy but returns the original ``pyobj``
            if ``pyobj`` is an instance of LLVMOpaqueRelocationIterator!
        """
        cdef LLVMOpaqueRelocationIterator wrapper = LLVMOpaqueRelocationIterator.__new__(LLVMOpaqueRelocationIterator)
        cdef dict cuda_array_interface = getattr(pyobj, "__cuda_array_interface__", None)

        if pyobj is None:
            wrapper._ptr = NULL
        elif isinstance(pyobj,LLVMOpaqueRelocationIterator):
            return pyobj
        elif isinstance(pyobj,int):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj)
        elif isinstance(pyobj,ctypes.c_void_p):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj.value) if pyobj.value != None else NULL
        elif cpython.buffer.PyObject_CheckBuffer(pyobj):
            err = cpython.buffer.PyObject_GetBuffer( 
                pyobj,
                &wrapper._py_buffer, 
                cpython.buffer.PyBUF_SIMPLE | cpython.buffer.PyBUF_ANY_CONTIGUOUS
            )
            if err == -1:
                raise RuntimeError("failed to create simple, contiguous Py_buffer from Python object")
            wrapper._py_buffer_acquired = True
            wrapper._ptr = wrapper._py_buffer.buf
        elif isinstance(pyobj,rocm.llvm._util.types.Pointer):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(int(pyobj))
        else:
            raise TypeError(f"unsupported input type: '{str(type(pyobj))}'")
        return wrapper
    def __dealloc__(self):
        # Release the buffer handle
        if self._py_buffer_acquired is True:
            cpython.buffer.PyBuffer_Release(&self._py_buffer)
    
    def __int__(self):
        """Returns the data's address as long integer.
        """
        return cpython.long.PyLong_FromVoidPtr(self._ptr)
    def __repr__(self):
        return f"<LLVMOpaqueRelocationIterator object, self.ptr={int(self)}>"
    def as_c_void_p(self):
        """Returns the data's address as `ctypes.c_void_p`
        Note:
            Implemented as function to not collide with 
            autogenerated property names.
        """
        return ctypes.c_void_p(int(self))
    @staticmethod
    def PROPERTIES():
        return []

    def __contains__(self,item):
        properties = self.PROPERTIES()
        return item in properties

    def __getitem__(self,item):
        properties = self.PROPERTIES()
        if isinstance(item,int):
            if item < 0 or item >= len(properties):
                raise IndexError()
            return getattr(self,properties[item])
        raise ValueError("'item' type must be 'int'")


LLVMRelocationIteratorRef = LLVMOpaqueRelocationIterator

class _LLVMBinaryType__Base(enum.IntEnum):
    """Empty enum base class that allows subclassing.
    """
    pass
class LLVMBinaryType(_LLVMBinaryType__Base):
    """LLVMBinaryType

    Attributes:
        LLVMBinaryTypeArchive:
            Archive file.
        LLVMBinaryTypeMachOUniversalBinary:
            Mach-O Universal Binary file.
        LLVMBinaryTypeCOFFImportFile:
            COFF Import file.
        LLVMBinaryTypeIR:
            LLVM IR.
        LLVMBinaryTypeWinRes:
            Windows resource (.res) file.
        LLVMBinaryTypeCOFF:
            COFF Object file.
        LLVMBinaryTypeELF32L:
            ELF 32-bit, little endian.
        LLVMBinaryTypeELF32B:
            ELF 32-bit, big endian.
        LLVMBinaryTypeELF64L:
            ELF 64-bit, little endian.
        LLVMBinaryTypeELF64B:
            ELF 64-bit, big endian.
        LLVMBinaryTypeMachO32L:
            MachO 32-bit, little endian.
        LLVMBinaryTypeMachO32B:
            MachO 32-bit, big endian.
        LLVMBinaryTypeMachO64L:
            MachO 64-bit, little endian.
        LLVMBinaryTypeMachO64B:
            MachO 64-bit, big endian.
        LLVMBinaryTypeWasm:
            Web Assembly.
        LLVMBinaryTypeOffload:
            Offloading fatbinary.
    """
    LLVMBinaryTypeArchive = cobject.LLVMBinaryTypeArchive
    LLVMBinaryTypeMachOUniversalBinary = cobject.LLVMBinaryTypeMachOUniversalBinary
    LLVMBinaryTypeCOFFImportFile = cobject.LLVMBinaryTypeCOFFImportFile
    LLVMBinaryTypeIR = cobject.LLVMBinaryTypeIR
    LLVMBinaryTypeWinRes = cobject.LLVMBinaryTypeWinRes
    LLVMBinaryTypeCOFF = cobject.LLVMBinaryTypeCOFF
    LLVMBinaryTypeELF32L = cobject.LLVMBinaryTypeELF32L
    LLVMBinaryTypeELF32B = cobject.LLVMBinaryTypeELF32B
    LLVMBinaryTypeELF64L = cobject.LLVMBinaryTypeELF64L
    LLVMBinaryTypeELF64B = cobject.LLVMBinaryTypeELF64B
    LLVMBinaryTypeMachO32L = cobject.LLVMBinaryTypeMachO32L
    LLVMBinaryTypeMachO32B = cobject.LLVMBinaryTypeMachO32B
    LLVMBinaryTypeMachO64L = cobject.LLVMBinaryTypeMachO64L
    LLVMBinaryTypeMachO64B = cobject.LLVMBinaryTypeMachO64B
    LLVMBinaryTypeWasm = cobject.LLVMBinaryTypeWasm
    LLVMBinaryTypeOffload = cobject.LLVMBinaryTypeOffload
    @staticmethod
    def ctypes_type():
        """The type of the enum constants as ctypes type."""
        return ctypes.c_uint 


@cython.embedsignature(True)
def LLVMCreateBinary(object MemBuf, object Context, object ErrorMessage):
    r"""(No short description, might be part of a group.)

    Create a binary file from the given memory buffer.

    The exact type of the binary file will be inferred automatically, and the
    appropriate implementation selected.  The context may be NULL except if
    the resulting file is an LLVM IR file.

    The memory buffer is not consumed by this function.  It is the responsibilty
    of the caller to free it with ``LLVMDisposeMemoryBuffer.``

    If NULL is returned, the ``ErrorMessage`` parameter is populated with the
    error's description.  It is then the caller's responsibility to free this
    message by calling ``LLVMDisposeMessage.``

    See:
        `~.llvm``~.`~.object`.`~.createBinary``

    Args:
        MemBuf (`~.LLVMOpaqueMemoryBuffer`/`~.object`):
            (undocumented)

        Context (`~.LLVMOpaqueContext`/`~.object`):
            (undocumented)

        ErrorMessage (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _LLVMCreateBinary__retval = LLVMOpaqueBinary.from_ptr(cobject.LLVMCreateBinary(
        LLVMOpaqueMemoryBuffer.from_pyobj(MemBuf).get_element_ptr(),
        LLVMOpaqueContext.from_pyobj(Context).get_element_ptr(),
        <char **>rocm.llvm._util.types.Pointer.from_pyobj(ErrorMessage)._ptr))    # fully specified
    return _LLVMCreateBinary__retval


@cython.embedsignature(True)
def LLVMDisposeBinary(object BR):
    r"""(No short description, might be part of a group.)

    Dispose of a binary file.

    The binary file does not own its backing buffer.  It is the responsibilty
    of the caller to free it with ``LLVMDisposeMemoryBuffer.``

    Args:
        BR (`~.LLVMOpaqueBinary`/`~.object`):
            (undocumented)
    """
    cobject.LLVMDisposeBinary(
        LLVMOpaqueBinary.from_pyobj(BR).get_element_ptr())    # fully specified


@cython.embedsignature(True)
def LLVMBinaryCopyMemoryBuffer(object BR):
    r"""(No short description, might be part of a group.)

    Retrieves a copy of the memory buffer associated with this object file.

    The returned buffer is merely a shallow copy and does not own the actual
    backing buffer of the binary. Nevertheless, it is the responsibility of the
    caller to free it with ``LLVMDisposeMemoryBuffer.``

    See:
        `~.llvm``~.`~.object`.`~.getMemoryBufferRef``

    Args:
        BR (`~.LLVMOpaqueBinary`/`~.object`):
            (undocumented)
    """
    _LLVMBinaryCopyMemoryBuffer__retval = LLVMOpaqueMemoryBuffer.from_ptr(cobject.LLVMBinaryCopyMemoryBuffer(
        LLVMOpaqueBinary.from_pyobj(BR).get_element_ptr()))    # fully specified
    return _LLVMBinaryCopyMemoryBuffer__retval


@cython.embedsignature(True)
def LLVMBinaryGetType(object BR):
    r"""(No short description, might be part of a group.)

    Retrieve the specific type of a binary.

    See:
        `~.llvm``~.`~.object`.`~.Binary`.`~.getType``

    Args:
        BR (`~.LLVMOpaqueBinary`/`~.object`):
            (undocumented)

    Returns:
        `~.LLVMBinaryType`
    """
    _LLVMBinaryGetType__retval = LLVMBinaryType(cobject.LLVMBinaryGetType(
        LLVMOpaqueBinary.from_pyobj(BR).get_element_ptr()))    # fully specified
    return _LLVMBinaryGetType__retval


@cython.embedsignature(True)
def LLVMMachOUniversalBinaryCopyObjectForArch(object BR, const char * Arch, unsigned long ArchLen, object ErrorMessage):
    r"""(No short description, might be part of a group.)

    Args:
        BR (`~.LLVMOpaqueBinary`/`~.object`):
            (undocumented)

        Arch (`~.bytes`):
            (undocumented)

        ArchLen (`~.int`):
            (undocumented)

        ErrorMessage (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)
    """
    _LLVMMachOUniversalBinaryCopyObjectForArch__retval = LLVMOpaqueBinary.from_ptr(cobject.LLVMMachOUniversalBinaryCopyObjectForArch(
        LLVMOpaqueBinary.from_pyobj(BR).get_element_ptr(),Arch,ArchLen,
        <char **>rocm.llvm._util.types.Pointer.from_pyobj(ErrorMessage)._ptr))    # fully specified
    return _LLVMMachOUniversalBinaryCopyObjectForArch__retval


@cython.embedsignature(True)
def LLVMObjectFileCopySectionIterator(object BR):
    r"""(No short description, might be part of a group.)

    Retrieve a copy of the section iterator for this object file.

    If there are no sections, the result is NULL.

    The returned iterator is merely a shallow copy. Nevertheless, it is
    the responsibility of the caller to free it with
    ``LLVMDisposeSectionIterator.``

    See:
        `~.llvm``~.`~.object`.`~.sections``()

    Args:
        BR (`~.LLVMOpaqueBinary`/`~.object`):
            (undocumented)
    """
    _LLVMObjectFileCopySectionIterator__retval = LLVMOpaqueSectionIterator.from_ptr(cobject.LLVMObjectFileCopySectionIterator(
        LLVMOpaqueBinary.from_pyobj(BR).get_element_ptr()))    # fully specified
    return _LLVMObjectFileCopySectionIterator__retval


@cython.embedsignature(True)
def LLVMObjectFileIsSectionIteratorAtEnd(object BR, object SI):
    r"""(No short description, might be part of a group.)

    Returns whether the given section iterator is at the end.

    See:
        `~.llvm``~.`~.object`.`~.section_end``

    Args:
        BR (`~.LLVMOpaqueBinary`/`~.object`):
            (undocumented)

        SI (`~.LLVMOpaqueSectionIterator`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMObjectFileIsSectionIteratorAtEnd__retval = cobject.LLVMObjectFileIsSectionIteratorAtEnd(
        LLVMOpaqueBinary.from_pyobj(BR).get_element_ptr(),
        LLVMOpaqueSectionIterator.from_pyobj(SI).get_element_ptr())    # fully specified
    return _LLVMObjectFileIsSectionIteratorAtEnd__retval


@cython.embedsignature(True)
def LLVMObjectFileCopySymbolIterator(object BR):
    r"""(No short description, might be part of a group.)

    Retrieve a copy of the symbol iterator for this object file.

    If there are no symbols, the result is NULL.

    The returned iterator is merely a shallow copy. Nevertheless, it is
    the responsibility of the caller to free it with
    ``LLVMDisposeSymbolIterator.``

    See:
        `~.llvm``~.`~.object`.`~.symbols``()

    Args:
        BR (`~.LLVMOpaqueBinary`/`~.object`):
            (undocumented)
    """
    _LLVMObjectFileCopySymbolIterator__retval = LLVMOpaqueSymbolIterator.from_ptr(cobject.LLVMObjectFileCopySymbolIterator(
        LLVMOpaqueBinary.from_pyobj(BR).get_element_ptr()))    # fully specified
    return _LLVMObjectFileCopySymbolIterator__retval


@cython.embedsignature(True)
def LLVMObjectFileIsSymbolIteratorAtEnd(object BR, object SI):
    r"""(No short description, might be part of a group.)

    Returns whether the given symbol iterator is at the end.

    See:
        `~.llvm``~.`~.object`.`~.symbol_end``

    Args:
        BR (`~.LLVMOpaqueBinary`/`~.object`):
            (undocumented)

        SI (`~.LLVMOpaqueSymbolIterator`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMObjectFileIsSymbolIteratorAtEnd__retval = cobject.LLVMObjectFileIsSymbolIteratorAtEnd(
        LLVMOpaqueBinary.from_pyobj(BR).get_element_ptr(),
        LLVMOpaqueSymbolIterator.from_pyobj(SI).get_element_ptr())    # fully specified
    return _LLVMObjectFileIsSymbolIteratorAtEnd__retval


@cython.embedsignature(True)
def LLVMDisposeSectionIterator(object SI):
    r"""(No short description, might be part of a group.)

    Args:
        SI (`~.LLVMOpaqueSectionIterator`/`~.object`):
            (undocumented)
    """
    cobject.LLVMDisposeSectionIterator(
        LLVMOpaqueSectionIterator.from_pyobj(SI).get_element_ptr())    # fully specified


@cython.embedsignature(True)
def LLVMMoveToNextSection(object SI):
    r"""(No short description, might be part of a group.)

    Args:
        SI (`~.LLVMOpaqueSectionIterator`/`~.object`):
            (undocumented)
    """
    cobject.LLVMMoveToNextSection(
        LLVMOpaqueSectionIterator.from_pyobj(SI).get_element_ptr())    # fully specified


@cython.embedsignature(True)
def LLVMMoveToContainingSection(object Sect, object Sym):
    r"""(No short description, might be part of a group.)

    Args:
        Sect (`~.LLVMOpaqueSectionIterator`/`~.object`):
            (undocumented)

        Sym (`~.LLVMOpaqueSymbolIterator`/`~.object`):
            (undocumented)
    """
    cobject.LLVMMoveToContainingSection(
        LLVMOpaqueSectionIterator.from_pyobj(Sect).get_element_ptr(),
        LLVMOpaqueSymbolIterator.from_pyobj(Sym).get_element_ptr())    # fully specified


@cython.embedsignature(True)
def LLVMDisposeSymbolIterator(object SI):
    r"""(No short description, might be part of a group.)

    Args:
        SI (`~.LLVMOpaqueSymbolIterator`/`~.object`):
            (undocumented)
    """
    cobject.LLVMDisposeSymbolIterator(
        LLVMOpaqueSymbolIterator.from_pyobj(SI).get_element_ptr())    # fully specified


@cython.embedsignature(True)
def LLVMMoveToNextSymbol(object SI):
    r"""(No short description, might be part of a group.)

    Args:
        SI (`~.LLVMOpaqueSymbolIterator`/`~.object`):
            (undocumented)
    """
    cobject.LLVMMoveToNextSymbol(
        LLVMOpaqueSymbolIterator.from_pyobj(SI).get_element_ptr())    # fully specified


@cython.embedsignature(True)
def LLVMGetSectionName(object SI):
    r"""(No short description, might be part of a group.)

    Args:
        SI (`~.LLVMOpaqueSectionIterator`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    cdef const char * _LLVMGetSectionName__retval = cobject.LLVMGetSectionName(
        LLVMOpaqueSectionIterator.from_pyobj(SI).get_element_ptr())    # fully specified
    return _LLVMGetSectionName__retval


@cython.embedsignature(True)
def LLVMGetSectionSize(object SI):
    r"""(No short description, might be part of a group.)

    Args:
        SI (`~.LLVMOpaqueSectionIterator`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned long _LLVMGetSectionSize__retval = cobject.LLVMGetSectionSize(
        LLVMOpaqueSectionIterator.from_pyobj(SI).get_element_ptr())    # fully specified
    return _LLVMGetSectionSize__retval


@cython.embedsignature(True)
def LLVMGetSectionContents(object SI):
    r"""(No short description, might be part of a group.)

    Args:
        SI (`~.LLVMOpaqueSectionIterator`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    cdef const char * _LLVMGetSectionContents__retval = cobject.LLVMGetSectionContents(
        LLVMOpaqueSectionIterator.from_pyobj(SI).get_element_ptr())    # fully specified
    return _LLVMGetSectionContents__retval


@cython.embedsignature(True)
def LLVMGetSectionAddress(object SI):
    r"""(No short description, might be part of a group.)

    Args:
        SI (`~.LLVMOpaqueSectionIterator`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned long _LLVMGetSectionAddress__retval = cobject.LLVMGetSectionAddress(
        LLVMOpaqueSectionIterator.from_pyobj(SI).get_element_ptr())    # fully specified
    return _LLVMGetSectionAddress__retval


@cython.embedsignature(True)
def LLVMGetSectionContainsSymbol(object SI, object Sym):
    r"""(No short description, might be part of a group.)

    Args:
        SI (`~.LLVMOpaqueSectionIterator`/`~.object`):
            (undocumented)

        Sym (`~.LLVMOpaqueSymbolIterator`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMGetSectionContainsSymbol__retval = cobject.LLVMGetSectionContainsSymbol(
        LLVMOpaqueSectionIterator.from_pyobj(SI).get_element_ptr(),
        LLVMOpaqueSymbolIterator.from_pyobj(Sym).get_element_ptr())    # fully specified
    return _LLVMGetSectionContainsSymbol__retval


@cython.embedsignature(True)
def LLVMGetRelocations(object Section):
    r"""(No short description, might be part of a group.)

    Args:
        Section (`~.LLVMOpaqueSectionIterator`/`~.object`):
            (undocumented)
    """
    _LLVMGetRelocations__retval = LLVMOpaqueRelocationIterator.from_ptr(cobject.LLVMGetRelocations(
        LLVMOpaqueSectionIterator.from_pyobj(Section).get_element_ptr()))    # fully specified
    return _LLVMGetRelocations__retval


@cython.embedsignature(True)
def LLVMDisposeRelocationIterator(object RI):
    r"""(No short description, might be part of a group.)

    Args:
        RI (`~.LLVMOpaqueRelocationIterator`/`~.object`):
            (undocumented)
    """
    cobject.LLVMDisposeRelocationIterator(
        LLVMOpaqueRelocationIterator.from_pyobj(RI).get_element_ptr())    # fully specified


@cython.embedsignature(True)
def LLVMIsRelocationIteratorAtEnd(object Section, object RI):
    r"""(No short description, might be part of a group.)

    Args:
        Section (`~.LLVMOpaqueSectionIterator`/`~.object`):
            (undocumented)

        RI (`~.LLVMOpaqueRelocationIterator`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsRelocationIteratorAtEnd__retval = cobject.LLVMIsRelocationIteratorAtEnd(
        LLVMOpaqueSectionIterator.from_pyobj(Section).get_element_ptr(),
        LLVMOpaqueRelocationIterator.from_pyobj(RI).get_element_ptr())    # fully specified
    return _LLVMIsRelocationIteratorAtEnd__retval


@cython.embedsignature(True)
def LLVMMoveToNextRelocation(object RI):
    r"""(No short description, might be part of a group.)

    Args:
        RI (`~.LLVMOpaqueRelocationIterator`/`~.object`):
            (undocumented)
    """
    cobject.LLVMMoveToNextRelocation(
        LLVMOpaqueRelocationIterator.from_pyobj(RI).get_element_ptr())    # fully specified


@cython.embedsignature(True)
def LLVMGetSymbolName(object SI):
    r"""(No short description, might be part of a group.)

    Args:
        SI (`~.LLVMOpaqueSymbolIterator`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    cdef const char * _LLVMGetSymbolName__retval = cobject.LLVMGetSymbolName(
        LLVMOpaqueSymbolIterator.from_pyobj(SI).get_element_ptr())    # fully specified
    return _LLVMGetSymbolName__retval


@cython.embedsignature(True)
def LLVMGetSymbolAddress(object SI):
    r"""(No short description, might be part of a group.)

    Args:
        SI (`~.LLVMOpaqueSymbolIterator`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned long _LLVMGetSymbolAddress__retval = cobject.LLVMGetSymbolAddress(
        LLVMOpaqueSymbolIterator.from_pyobj(SI).get_element_ptr())    # fully specified
    return _LLVMGetSymbolAddress__retval


@cython.embedsignature(True)
def LLVMGetSymbolSize(object SI):
    r"""(No short description, might be part of a group.)

    Args:
        SI (`~.LLVMOpaqueSymbolIterator`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned long _LLVMGetSymbolSize__retval = cobject.LLVMGetSymbolSize(
        LLVMOpaqueSymbolIterator.from_pyobj(SI).get_element_ptr())    # fully specified
    return _LLVMGetSymbolSize__retval


@cython.embedsignature(True)
def LLVMGetRelocationOffset(object RI):
    r"""(No short description, might be part of a group.)

    Args:
        RI (`~.LLVMOpaqueRelocationIterator`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned long _LLVMGetRelocationOffset__retval = cobject.LLVMGetRelocationOffset(
        LLVMOpaqueRelocationIterator.from_pyobj(RI).get_element_ptr())    # fully specified
    return _LLVMGetRelocationOffset__retval


@cython.embedsignature(True)
def LLVMGetRelocationSymbol(object RI):
    r"""(No short description, might be part of a group.)

    Args:
        RI (`~.LLVMOpaqueRelocationIterator`/`~.object`):
            (undocumented)
    """
    _LLVMGetRelocationSymbol__retval = LLVMOpaqueSymbolIterator.from_ptr(cobject.LLVMGetRelocationSymbol(
        LLVMOpaqueRelocationIterator.from_pyobj(RI).get_element_ptr()))    # fully specified
    return _LLVMGetRelocationSymbol__retval


@cython.embedsignature(True)
def LLVMGetRelocationType(object RI):
    r"""(No short description, might be part of a group.)

    Args:
        RI (`~.LLVMOpaqueRelocationIterator`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef unsigned long _LLVMGetRelocationType__retval = cobject.LLVMGetRelocationType(
        LLVMOpaqueRelocationIterator.from_pyobj(RI).get_element_ptr())    # fully specified
    return _LLVMGetRelocationType__retval


@cython.embedsignature(True)
def LLVMGetRelocationTypeName(object RI):
    r"""(No short description, might be part of a group.)

    Args:
        RI (`~.LLVMOpaqueRelocationIterator`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    cdef const char * _LLVMGetRelocationTypeName__retval = cobject.LLVMGetRelocationTypeName(
        LLVMOpaqueRelocationIterator.from_pyobj(RI).get_element_ptr())    # fully specified
    return _LLVMGetRelocationTypeName__retval


@cython.embedsignature(True)
def LLVMGetRelocationValueString(object RI):
    r"""(No short description, might be part of a group.)

    Args:
        RI (`~.LLVMOpaqueRelocationIterator`/`~.object`):
            (undocumented)

    Returns:
        `~.bytes`
    """
    cdef const char * _LLVMGetRelocationValueString__retval = cobject.LLVMGetRelocationValueString(
        LLVMOpaqueRelocationIterator.from_pyobj(RI).get_element_ptr())    # fully specified
    return _LLVMGetRelocationValueString__retval


cdef class LLVMOpaqueObjectFile(rocm.llvm._util.types.Pointer):
    """Python wrapper for cdef class cobject.LLVMOpaqueObjectFile.
    
    Python wrapper for cdef class cobject.LLVMOpaqueObjectFile.

    If this type is initialized via its `__init__` method, it allocates a member of the underlying C type and
    destroys it again if the wrapper type is deallocted.

    This type also serves as adapter when appearing as argument type in a function signature.
    In this case, the type can further be initialized from the following Python objects
    that you can pass as argument instead:
    
    * `None`:

      This will set the ``self._ptr`` attribute to ``NULL``.

    * `int`:
      
      Interprets the integer value as pointer address and writes it to ``self._ptr``.
      No ownership is transferred.
      
    * `ctypes.c_void_p`:
      
      Takes the pointer address ``pyobj.value`` and writes it to ``self._ptr``.
      No ownership is transferred.
    
    
    Type checks are performed in the above order.

    C Attributes:
        _ptr (C type ``void *``, protected):
            Stores a pointer to the data of the original Python object.
        _ptr_owner (C type ``bint``, protected):
            If this wrapper is the owner of the underlying data.
        _py_buffer (C type ``Py_buffer`, protected):
            Stores a pointer to the data of the original Python object.
        _py_buffer_acquired (C type ``bint``, protected):
            Stores a pointer to the data of the original Python object.
    """
    # members declared in pxd file

    def __cinit__(self):
        self._ptr = NULL
        self.ptr_owner = False
        self._py_buffer_acquired = False

    cdef cobject.LLVMOpaqueObjectFile* get_element_ptr(self):
        return <cobject.LLVMOpaqueObjectFile*>self._ptr
        
    @staticmethod
    cdef LLVMOpaqueObjectFile from_ptr(void* ptr, bint owner=False):
        """Factory function to create ``LLVMOpaqueObjectFile`` objects from
        given ``cobject.LLVMOpaqueObjectFile`` pointer.
        """
        # Fast call to __new__() that bypasses the __init__() constructor.
        cdef LLVMOpaqueObjectFile wrapper = LLVMOpaqueObjectFile.__new__(LLVMOpaqueObjectFile)
        wrapper._ptr = ptr
        wrapper.ptr_owner = owner
        return wrapper

    @staticmethod
    cdef LLVMOpaqueObjectFile from_pyobj(object pyobj):
        """Derives a LLVMOpaqueObjectFile from a Python object.

        Derives a LLVMOpaqueObjectFile from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMOpaqueObjectFile`` reference, this method
        returns it directly. No new ``LLVMOpaqueObjectFile`` is created in this case.

        Args:
            pyobj (object): Must be either `None`; a `rocm.llvm._util.types.Pointer`; a simple, contiguous buffer according to the buffer protocol;
                            or of type `LLVMOpaqueObjectFile`; `int`; or `ctypes.c_void_p`.

        Note:
            This routine does not perform a copy but returns the original ``pyobj``
            if ``pyobj`` is an instance of LLVMOpaqueObjectFile!
        """
        cdef LLVMOpaqueObjectFile wrapper = LLVMOpaqueObjectFile.__new__(LLVMOpaqueObjectFile)
        cdef dict cuda_array_interface = getattr(pyobj, "__cuda_array_interface__", None)

        if pyobj is None:
            wrapper._ptr = NULL
        elif isinstance(pyobj,LLVMOpaqueObjectFile):
            return pyobj
        elif isinstance(pyobj,int):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj)
        elif isinstance(pyobj,ctypes.c_void_p):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(pyobj.value) if pyobj.value != None else NULL
        elif cpython.buffer.PyObject_CheckBuffer(pyobj):
            err = cpython.buffer.PyObject_GetBuffer( 
                pyobj,
                &wrapper._py_buffer, 
                cpython.buffer.PyBUF_SIMPLE | cpython.buffer.PyBUF_ANY_CONTIGUOUS
            )
            if err == -1:
                raise RuntimeError("failed to create simple, contiguous Py_buffer from Python object")
            wrapper._py_buffer_acquired = True
            wrapper._ptr = wrapper._py_buffer.buf
        elif isinstance(pyobj,rocm.llvm._util.types.Pointer):
            wrapper._ptr = cpython.long.PyLong_AsVoidPtr(int(pyobj))
        else:
            raise TypeError(f"unsupported input type: '{str(type(pyobj))}'")
        return wrapper
    def __dealloc__(self):
        # Release the buffer handle
        if self._py_buffer_acquired is True:
            cpython.buffer.PyBuffer_Release(&self._py_buffer)
    
    def __int__(self):
        """Returns the data's address as long integer.
        """
        return cpython.long.PyLong_FromVoidPtr(self._ptr)
    def __repr__(self):
        return f"<LLVMOpaqueObjectFile object, self.ptr={int(self)}>"
    def as_c_void_p(self):
        """Returns the data's address as `ctypes.c_void_p`
        Note:
            Implemented as function to not collide with 
            autogenerated property names.
        """
        return ctypes.c_void_p(int(self))
    @staticmethod
    def PROPERTIES():
        return []

    def __contains__(self,item):
        properties = self.PROPERTIES()
        return item in properties

    def __getitem__(self,item):
        properties = self.PROPERTIES()
        if isinstance(item,int):
            if item < 0 or item >= len(properties):
                raise IndexError()
            return getattr(self,properties[item])
        raise ValueError("'item' type must be 'int'")


LLVMObjectFileRef = LLVMOpaqueObjectFile

@cython.embedsignature(True)
def LLVMCreateObjectFile(object MemBuf):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMCreateBinary instead. */

    Args:
        MemBuf (`~.LLVMOpaqueMemoryBuffer`/`~.object`):
            (undocumented)
    """
    _LLVMCreateObjectFile__retval = LLVMOpaqueObjectFile.from_ptr(cobject.LLVMCreateObjectFile(
        LLVMOpaqueMemoryBuffer.from_pyobj(MemBuf).get_element_ptr()))    # fully specified
    return _LLVMCreateObjectFile__retval


@cython.embedsignature(True)
def LLVMDisposeObjectFile(object ObjectFile):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMDisposeBinary instead. */

    Args:
        ObjectFile (`~.LLVMOpaqueObjectFile`/`~.object`):
            (undocumented)
    """
    cobject.LLVMDisposeObjectFile(
        LLVMOpaqueObjectFile.from_pyobj(ObjectFile).get_element_ptr())    # fully specified


@cython.embedsignature(True)
def LLVMGetSections(object ObjectFile):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMObjectFileCopySectionIterator instead. */

    Args:
        ObjectFile (`~.LLVMOpaqueObjectFile`/`~.object`):
            (undocumented)
    """
    _LLVMGetSections__retval = LLVMOpaqueSectionIterator.from_ptr(cobject.LLVMGetSections(
        LLVMOpaqueObjectFile.from_pyobj(ObjectFile).get_element_ptr()))    # fully specified
    return _LLVMGetSections__retval


@cython.embedsignature(True)
def LLVMIsSectionIteratorAtEnd(object ObjectFile, object SI):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMObjectFileIsSectionIteratorAtEnd instead. */

    Args:
        ObjectFile (`~.LLVMOpaqueObjectFile`/`~.object`):
            (undocumented)

        SI (`~.LLVMOpaqueSectionIterator`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsSectionIteratorAtEnd__retval = cobject.LLVMIsSectionIteratorAtEnd(
        LLVMOpaqueObjectFile.from_pyobj(ObjectFile).get_element_ptr(),
        LLVMOpaqueSectionIterator.from_pyobj(SI).get_element_ptr())    # fully specified
    return _LLVMIsSectionIteratorAtEnd__retval


@cython.embedsignature(True)
def LLVMGetSymbols(object ObjectFile):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMObjectFileCopySymbolIterator instead. */

    Args:
        ObjectFile (`~.LLVMOpaqueObjectFile`/`~.object`):
            (undocumented)
    """
    _LLVMGetSymbols__retval = LLVMOpaqueSymbolIterator.from_ptr(cobject.LLVMGetSymbols(
        LLVMOpaqueObjectFile.from_pyobj(ObjectFile).get_element_ptr()))    # fully specified
    return _LLVMGetSymbols__retval


@cython.embedsignature(True)
def LLVMIsSymbolIteratorAtEnd(object ObjectFile, object SI):
    r"""(No short description, might be part of a group.)

    Deprecated: Use LLVMObjectFileIsSymbolIteratorAtEnd instead. */

    Args:
        ObjectFile (`~.LLVMOpaqueObjectFile`/`~.object`):
            (undocumented)

        SI (`~.LLVMOpaqueSymbolIterator`/`~.object`):
            (undocumented)

    Returns:
        `~.int`
    """
    cdef int _LLVMIsSymbolIteratorAtEnd__retval = cobject.LLVMIsSymbolIteratorAtEnd(
        LLVMOpaqueObjectFile.from_pyobj(ObjectFile).get_element_ptr(),
        LLVMOpaqueSymbolIterator.from_pyobj(SI).get_element_ptr())    # fully specified
    return _LLVMIsSymbolIteratorAtEnd__retval

__all__ = [
    "LLVMOpaqueSectionIterator",
    "LLVMSectionIteratorRef",
    "LLVMOpaqueSymbolIterator",
    "LLVMSymbolIteratorRef",
    "LLVMOpaqueRelocationIterator",
    "LLVMRelocationIteratorRef",
    "_LLVMBinaryType__Base",
    "LLVMBinaryType",
    "LLVMCreateBinary",
    "LLVMDisposeBinary",
    "LLVMBinaryCopyMemoryBuffer",
    "LLVMBinaryGetType",
    "LLVMMachOUniversalBinaryCopyObjectForArch",
    "LLVMObjectFileCopySectionIterator",
    "LLVMObjectFileIsSectionIteratorAtEnd",
    "LLVMObjectFileCopySymbolIterator",
    "LLVMObjectFileIsSymbolIteratorAtEnd",
    "LLVMDisposeSectionIterator",
    "LLVMMoveToNextSection",
    "LLVMMoveToContainingSection",
    "LLVMDisposeSymbolIterator",
    "LLVMMoveToNextSymbol",
    "LLVMGetSectionName",
    "LLVMGetSectionSize",
    "LLVMGetSectionContents",
    "LLVMGetSectionAddress",
    "LLVMGetSectionContainsSymbol",
    "LLVMGetRelocations",
    "LLVMDisposeRelocationIterator",
    "LLVMIsRelocationIteratorAtEnd",
    "LLVMMoveToNextRelocation",
    "LLVMGetSymbolName",
    "LLVMGetSymbolAddress",
    "LLVMGetSymbolSize",
    "LLVMGetRelocationOffset",
    "LLVMGetRelocationSymbol",
    "LLVMGetRelocationType",
    "LLVMGetRelocationTypeName",
    "LLVMGetRelocationValueString",
    "LLVMOpaqueObjectFile",
    "LLVMObjectFileRef",
    "LLVMCreateObjectFile",
    "LLVMDisposeObjectFile",
    "LLVMGetSections",
    "LLVMIsSectionIteratorAtEnd",
    "LLVMGetSymbols",
    "LLVMIsSymbolIteratorAtEnd",
]