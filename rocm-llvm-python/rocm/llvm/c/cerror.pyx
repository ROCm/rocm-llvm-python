# MIT License
#
# Copyright (c) 2021-2025 Advanced Micro Devices, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


# This file has been autogenerated, do not modify.

cimport rocm.llvm._util.posixloader as loader
cdef void* _lib_handle = NULL

DLL = b"librocmllvm.so"

cdef int __init() except 1 nogil:
    global DLL
    global _lib_handle
    cdef char* dll = NULL
    if _lib_handle == NULL:
        with gil:
            dll = DLL
        return loader.open_library(&_lib_handle,dll)
    return 0

cdef int __init_symbol(void** result, const char* name) except 1 nogil:
    global _lib_handle
    cdef int init_result = 0
    if _lib_handle == NULL:
        init_result = __init()
        if init_result > 0:
            return init_result
    if result[0] == NULL:
        return loader.load_symbol(result,_lib_handle, name)
    return 0


cdef void* _LLVMGetErrorTypeId__funptr = NULL
# 
# Returns the type id for the given error instance, which must be a failure
# value (i.e. non-null).
cdef const void * LLVMGetErrorTypeId(LLVMErrorRef Err):
    global _LLVMGetErrorTypeId__funptr
    if __init_symbol(&_LLVMGetErrorTypeId__funptr,"LLVMGetErrorTypeId") > 0:
        pass
    return (<const void * (*)(LLVMErrorRef) noexcept nogil> _LLVMGetErrorTypeId__funptr)(Err)


cdef void* _LLVMConsumeError__funptr = NULL
# 
# Dispose of the given error without handling it. This operation consumes the
# error, and the given LLVMErrorRef value is not usable once this call returns.
# Note: This method *only* needs to be called if the error is not being passed
# to some other consuming operation, e.g. LLVMGetErrorMessage.
cdef void LLVMConsumeError(LLVMErrorRef Err):
    global _LLVMConsumeError__funptr
    if __init_symbol(&_LLVMConsumeError__funptr,"LLVMConsumeError") > 0:
        pass
    (<void (*)(LLVMErrorRef) noexcept nogil> _LLVMConsumeError__funptr)(Err)


cdef void* _LLVMGetErrorMessage__funptr = NULL
# 
# Returns the given string's error message. This operation consumes the error,
# and the given LLVMErrorRef value is not usable once this call returns.
# The caller is responsible for disposing of the string by calling
# LLVMDisposeErrorMessage.
cdef char * LLVMGetErrorMessage(LLVMErrorRef Err):
    global _LLVMGetErrorMessage__funptr
    if __init_symbol(&_LLVMGetErrorMessage__funptr,"LLVMGetErrorMessage") > 0:
        pass
    return (<char * (*)(LLVMErrorRef) noexcept nogil> _LLVMGetErrorMessage__funptr)(Err)


cdef void* _LLVMDisposeErrorMessage__funptr = NULL
# 
# Dispose of the given error message.
cdef void LLVMDisposeErrorMessage(char * ErrMsg):
    global _LLVMDisposeErrorMessage__funptr
    if __init_symbol(&_LLVMDisposeErrorMessage__funptr,"LLVMDisposeErrorMessage") > 0:
        pass
    (<void (*)(char *) noexcept nogil> _LLVMDisposeErrorMessage__funptr)(ErrMsg)


cdef void* _LLVMGetStringErrorTypeId__funptr = NULL
# 
# Returns the type id for llvm StringError.
cdef const void * LLVMGetStringErrorTypeId():
    global _LLVMGetStringErrorTypeId__funptr
    if __init_symbol(&_LLVMGetStringErrorTypeId__funptr,"LLVMGetStringErrorTypeId") > 0:
        pass
    return (<const void * (*)() noexcept nogil> _LLVMGetStringErrorTypeId__funptr)()


cdef void* _LLVMCreateStringError__funptr = NULL
# 
# Create a StringError.
cdef LLVMErrorRef LLVMCreateStringError(const char * ErrMsg):
    global _LLVMCreateStringError__funptr
    if __init_symbol(&_LLVMCreateStringError__funptr,"LLVMCreateStringError") > 0:
        pass
    return (<LLVMErrorRef (*)(const char *) noexcept nogil> _LLVMCreateStringError__funptr)(ErrMsg)
