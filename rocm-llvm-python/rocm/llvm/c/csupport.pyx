# MIT License
#
# Copyright (c) 2023-2024 Advanced Micro Devices, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

cimport rocm.llvm._util.posixloader as loader
cdef void* _lib_handle = NULL

DLL = b"librocmllvm.so"

cdef int __init() except 1 nogil:
    global DLL
    global _lib_handle
    cdef char* dll = NULL
    if _lib_handle == NULL:
        with gil:
            dll = DLL
        return loader.open_library(&_lib_handle,dll)
    return 0

cdef int __init_symbol(void** result, const char* name) except 1 nogil:
    global _lib_handle
    cdef int init_result = 0
    if _lib_handle == NULL:
        init_result = __init()
        if init_result > 0:
            return init_result
    if result[0] == NULL:
        return loader.load_symbol(result,_lib_handle, name)
    return 0


cdef void* _LLVMLoadLibraryPermanently__funptr = NULL
# 
# This function permanently loads the dynamic library at the given path.
# It is safe to call this function multiple times for the same library.
# 
# @see sys::DynamicLibrary::LoadLibraryPermanently()
cdef int LLVMLoadLibraryPermanently(const char * Filename):
    global _LLVMLoadLibraryPermanently__funptr
    if __init_symbol(&_LLVMLoadLibraryPermanently__funptr,"LLVMLoadLibraryPermanently") > 0:
        pass
    return (<int (*)(const char *) noexcept nogil> _LLVMLoadLibraryPermanently__funptr)(Filename)


cdef void* _LLVMParseCommandLineOptions__funptr = NULL
# 
# This function parses the given arguments using the LLVM command line parser.
# Note that the only stable thing about this function is its signature; you
# cannot rely on any particular set of command line arguments being interpreted
# the same way across LLVM versions.
# 
# @see llvm::cl::ParseCommandLineOptions()
cdef void LLVMParseCommandLineOptions(int argc,const char *const * argv,const char * Overview):
    global _LLVMParseCommandLineOptions__funptr
    if __init_symbol(&_LLVMParseCommandLineOptions__funptr,"LLVMParseCommandLineOptions") > 0:
        pass
    (<void (*)(int,const char *const *,const char *) noexcept nogil> _LLVMParseCommandLineOptions__funptr)(argc,argv,Overview)


cdef void* _LLVMSearchForAddressOfSymbol__funptr = NULL
# 
# This function will search through all previously loaded dynamic
# libraries for the symbol \p symbolName. If it is found, the address of
# that symbol is returned. If not, null is returned.
# 
# @see sys::DynamicLibrary::SearchForAddressOfSymbol()
cdef void * LLVMSearchForAddressOfSymbol(const char * symbolName):
    global _LLVMSearchForAddressOfSymbol__funptr
    if __init_symbol(&_LLVMSearchForAddressOfSymbol__funptr,"LLVMSearchForAddressOfSymbol") > 0:
        pass
    return (<void * (*)(const char *) noexcept nogil> _LLVMSearchForAddressOfSymbol__funptr)(symbolName)


cdef void* _LLVMAddSymbol__funptr = NULL
# 
# This functions permanently adds the symbol \p symbolName with the
# value \p symbolValue.  These symbols are searched before any
# libraries.
# 
# @see sys::DynamicLibrary::AddSymbol()
cdef void LLVMAddSymbol(const char * symbolName,void * symbolValue):
    global _LLVMAddSymbol__funptr
    if __init_symbol(&_LLVMAddSymbol__funptr,"LLVMAddSymbol") > 0:
        pass
    (<void (*)(const char *,void *) noexcept nogil> _LLVMAddSymbol__funptr)(symbolName,symbolValue)
