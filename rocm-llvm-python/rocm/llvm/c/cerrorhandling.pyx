# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

cimport hip._util.posixloader as loader
cdef void* _lib_handle = NULL

cdef void __init() nogil:
    global _lib_handle
    if _lib_handle == NULL:
        with gil:
            _lib_handle = loader.open_library("librocmllvm.so")

cdef void __init_symbol(void** result, const char* name) nogil:
    global _lib_handle
    if _lib_handle == NULL:
        __init()
    if result[0] == NULL:
        with gil:
            result[0] = loader.load_symbol(_lib_handle, name) 


cdef void* _LLVMInstallFatalErrorHandler__funptr = NULL
# 
# Install a fatal error handler. By default, if LLVM detects a fatal error, it
# will call exit(1). This may not be appropriate in many contexts. For example,
# doing exit(1) will bypass many crash reporting/tracing system tools. This
# function allows you to install a callback that will be invoked prior to the
# call to exit(1).
cdef void LLVMInstallFatalErrorHandler(LLVMFatalErrorHandler Handler):
    global _LLVMInstallFatalErrorHandler__funptr
    __init_symbol(&_LLVMInstallFatalErrorHandler__funptr,"LLVMInstallFatalErrorHandler")
    return (<void (*)(LLVMFatalErrorHandler)> _LLVMInstallFatalErrorHandler__funptr)(Handler)


cdef void* _LLVMResetFatalErrorHandler__funptr = NULL
# 
# Reset the fatal error handler. This resets LLVM's fatal error handling
# behavior to the default.
cdef void LLVMResetFatalErrorHandler() nogil:
    global _LLVMResetFatalErrorHandler__funptr
    __init_symbol(&_LLVMResetFatalErrorHandler__funptr,"LLVMResetFatalErrorHandler")
    return (<void (*)() nogil> _LLVMResetFatalErrorHandler__funptr)()


cdef void* _LLVMEnablePrettyStackTrace__funptr = NULL
# 
# Enable LLVM's built-in stack trace code. This intercepts the OS's crash
# signals and prints which component of LLVM you were in at the time if the
# crash.
cdef void LLVMEnablePrettyStackTrace() nogil:
    global _LLVMEnablePrettyStackTrace__funptr
    __init_symbol(&_LLVMEnablePrettyStackTrace__funptr,"LLVMEnablePrettyStackTrace")
    return (<void (*)() nogil> _LLVMEnablePrettyStackTrace__funptr)()
