# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

cimport hip._util.posixloader as loader
cdef void* _lib_handle = NULL

cdef void __init() nogil:
    global _lib_handle
    if _lib_handle == NULL:
        with gil:
            _lib_handle = loader.open_library("librocmllvm.so")

cdef void __init_symbol(void** result, const char* name) nogil:
    global _lib_handle
    if _lib_handle == NULL:
        __init()
    if result[0] == NULL:
        with gil:
            result[0] = loader.load_symbol(_lib_handle, name) 


cdef void* _LLVMInitializeAllTargetInfos__funptr = NULL
# LLVMInitializeAllTargetInfos - The main program should call this function if
# it wants access to all available targets that LLVM is configured to
# support.
cdef void LLVMInitializeAllTargetInfos() nogil:
    global _LLVMInitializeAllTargetInfos__funptr
    __init_symbol(&_LLVMInitializeAllTargetInfos__funptr,"LLVMInitializeAllTargetInfos")
    return (<void (*)() nogil> _LLVMInitializeAllTargetInfos__funptr)()


cdef void* _LLVMInitializeAllTargets__funptr = NULL
# LLVMInitializeAllTargets - The main program should call this function if it
# wants to link in all available targets that LLVM is configured to
# support.
cdef void LLVMInitializeAllTargets() nogil:
    global _LLVMInitializeAllTargets__funptr
    __init_symbol(&_LLVMInitializeAllTargets__funptr,"LLVMInitializeAllTargets")
    return (<void (*)() nogil> _LLVMInitializeAllTargets__funptr)()


cdef void* _LLVMInitializeAllTargetMCs__funptr = NULL
# LLVMInitializeAllTargetMCs - The main program should call this function if
# it wants access to all available target MC that LLVM is configured to
# support.
cdef void LLVMInitializeAllTargetMCs() nogil:
    global _LLVMInitializeAllTargetMCs__funptr
    __init_symbol(&_LLVMInitializeAllTargetMCs__funptr,"LLVMInitializeAllTargetMCs")
    return (<void (*)() nogil> _LLVMInitializeAllTargetMCs__funptr)()


cdef void* _LLVMInitializeAllAsmPrinters__funptr = NULL
# LLVMInitializeAllAsmPrinters - The main program should call this function if
# it wants all asm printers that LLVM is configured to support, to make them
# available via the TargetRegistry.
cdef void LLVMInitializeAllAsmPrinters() nogil:
    global _LLVMInitializeAllAsmPrinters__funptr
    __init_symbol(&_LLVMInitializeAllAsmPrinters__funptr,"LLVMInitializeAllAsmPrinters")
    return (<void (*)() nogil> _LLVMInitializeAllAsmPrinters__funptr)()


cdef void* _LLVMInitializeAllAsmParsers__funptr = NULL
# LLVMInitializeAllAsmParsers - The main program should call this function if
# it wants all asm parsers that LLVM is configured to support, to make them
# available via the TargetRegistry.
cdef void LLVMInitializeAllAsmParsers() nogil:
    global _LLVMInitializeAllAsmParsers__funptr
    __init_symbol(&_LLVMInitializeAllAsmParsers__funptr,"LLVMInitializeAllAsmParsers")
    return (<void (*)() nogil> _LLVMInitializeAllAsmParsers__funptr)()


cdef void* _LLVMInitializeAllDisassemblers__funptr = NULL
# LLVMInitializeAllDisassemblers - The main program should call this function
# if it wants all disassemblers that LLVM is configured to support, to make
# them available via the TargetRegistry.
cdef void LLVMInitializeAllDisassemblers() nogil:
    global _LLVMInitializeAllDisassemblers__funptr
    __init_symbol(&_LLVMInitializeAllDisassemblers__funptr,"LLVMInitializeAllDisassemblers")
    return (<void (*)() nogil> _LLVMInitializeAllDisassemblers__funptr)()


cdef void* _LLVMInitializeNativeTarget__funptr = NULL
# LLVMInitializeNativeTarget - The main program should call this function to
# initialize the native target corresponding to the host.  This is useful
# for JIT applications to ensure that the target gets linked in correctly.
cdef int LLVMInitializeNativeTarget() nogil:
    global _LLVMInitializeNativeTarget__funptr
    __init_symbol(&_LLVMInitializeNativeTarget__funptr,"LLVMInitializeNativeTarget")
    return (<int (*)() nogil> _LLVMInitializeNativeTarget__funptr)()


cdef void* _LLVMInitializeNativeAsmParser__funptr = NULL
# LLVMInitializeNativeTargetAsmParser - The main program should call this
# function to initialize the parser for the native target corresponding to the
# host.
cdef int LLVMInitializeNativeAsmParser() nogil:
    global _LLVMInitializeNativeAsmParser__funptr
    __init_symbol(&_LLVMInitializeNativeAsmParser__funptr,"LLVMInitializeNativeAsmParser")
    return (<int (*)() nogil> _LLVMInitializeNativeAsmParser__funptr)()


cdef void* _LLVMInitializeNativeAsmPrinter__funptr = NULL
# LLVMInitializeNativeTargetAsmPrinter - The main program should call this
# function to initialize the printer for the native target corresponding to
# the host.
cdef int LLVMInitializeNativeAsmPrinter() nogil:
    global _LLVMInitializeNativeAsmPrinter__funptr
    __init_symbol(&_LLVMInitializeNativeAsmPrinter__funptr,"LLVMInitializeNativeAsmPrinter")
    return (<int (*)() nogil> _LLVMInitializeNativeAsmPrinter__funptr)()


cdef void* _LLVMInitializeNativeDisassembler__funptr = NULL
# LLVMInitializeNativeTargetDisassembler - The main program should call this
# function to initialize the disassembler for the native target corresponding
# to the host.
cdef int LLVMInitializeNativeDisassembler() nogil:
    global _LLVMInitializeNativeDisassembler__funptr
    __init_symbol(&_LLVMInitializeNativeDisassembler__funptr,"LLVMInitializeNativeDisassembler")
    return (<int (*)() nogil> _LLVMInitializeNativeDisassembler__funptr)()


cdef void* _LLVMGetModuleDataLayout__funptr = NULL
# 
# Obtain the data layout for a module.
# 
# @see Module::getDataLayout()
cdef LLVMTargetDataRef LLVMGetModuleDataLayout(LLVMModuleRef M) nogil:
    global _LLVMGetModuleDataLayout__funptr
    __init_symbol(&_LLVMGetModuleDataLayout__funptr,"LLVMGetModuleDataLayout")
    return (<LLVMTargetDataRef (*)(LLVMModuleRef) nogil> _LLVMGetModuleDataLayout__funptr)(M)


cdef void* _LLVMSetModuleDataLayout__funptr = NULL
# 
# Set the data layout for a module.
# 
# @see Module::setDataLayout()
cdef void LLVMSetModuleDataLayout(LLVMModuleRef M,LLVMTargetDataRef DL) nogil:
    global _LLVMSetModuleDataLayout__funptr
    __init_symbol(&_LLVMSetModuleDataLayout__funptr,"LLVMSetModuleDataLayout")
    return (<void (*)(LLVMModuleRef,LLVMTargetDataRef) nogil> _LLVMSetModuleDataLayout__funptr)(M,DL)


cdef void* _LLVMCreateTargetData__funptr = NULL
# Creates target data from a target layout string.
# See the constructor llvm::DataLayout::DataLayout.
cdef LLVMTargetDataRef LLVMCreateTargetData(const char * StringRep) nogil:
    global _LLVMCreateTargetData__funptr
    __init_symbol(&_LLVMCreateTargetData__funptr,"LLVMCreateTargetData")
    return (<LLVMTargetDataRef (*)(const char *) nogil> _LLVMCreateTargetData__funptr)(StringRep)


cdef void* _LLVMDisposeTargetData__funptr = NULL
# Deallocates a TargetData.
# See the destructor llvm::DataLayout::~DataLayout.
cdef void LLVMDisposeTargetData(LLVMTargetDataRef TD) nogil:
    global _LLVMDisposeTargetData__funptr
    __init_symbol(&_LLVMDisposeTargetData__funptr,"LLVMDisposeTargetData")
    return (<void (*)(LLVMTargetDataRef) nogil> _LLVMDisposeTargetData__funptr)(TD)


cdef void* _LLVMAddTargetLibraryInfo__funptr = NULL
# Adds target library information to a pass manager. This does not take
# ownership of the target library info.
# See the method llvm::PassManagerBase::add.
cdef void LLVMAddTargetLibraryInfo(LLVMTargetLibraryInfoRef TLI,LLVMPassManagerRef PM) nogil:
    global _LLVMAddTargetLibraryInfo__funptr
    __init_symbol(&_LLVMAddTargetLibraryInfo__funptr,"LLVMAddTargetLibraryInfo")
    return (<void (*)(LLVMTargetLibraryInfoRef,LLVMPassManagerRef) nogil> _LLVMAddTargetLibraryInfo__funptr)(TLI,PM)


cdef void* _LLVMCopyStringRepOfTargetData__funptr = NULL
# Converts target data to a target layout string. The string must be disposed
# with LLVMDisposeMessage.
# See the constructor llvm::DataLayout::DataLayout.
cdef char * LLVMCopyStringRepOfTargetData(LLVMTargetDataRef TD) nogil:
    global _LLVMCopyStringRepOfTargetData__funptr
    __init_symbol(&_LLVMCopyStringRepOfTargetData__funptr,"LLVMCopyStringRepOfTargetData")
    return (<char * (*)(LLVMTargetDataRef) nogil> _LLVMCopyStringRepOfTargetData__funptr)(TD)


cdef void* _LLVMByteOrder__funptr = NULL
# Returns the byte order of a target, either LLVMBigEndian or
# LLVMLittleEndian.
# See the method llvm::DataLayout::isLittleEndian.
cdef LLVMByteOrdering LLVMByteOrder(LLVMTargetDataRef TD) nogil:
    global _LLVMByteOrder__funptr
    __init_symbol(&_LLVMByteOrder__funptr,"LLVMByteOrder")
    return (<LLVMByteOrdering (*)(LLVMTargetDataRef) nogil> _LLVMByteOrder__funptr)(TD)


cdef void* _LLVMPointerSize__funptr = NULL
# Returns the pointer size in bytes for a target.
# See the method llvm::DataLayout::getPointerSize.
cdef unsigned int LLVMPointerSize(LLVMTargetDataRef TD) nogil:
    global _LLVMPointerSize__funptr
    __init_symbol(&_LLVMPointerSize__funptr,"LLVMPointerSize")
    return (<unsigned int (*)(LLVMTargetDataRef) nogil> _LLVMPointerSize__funptr)(TD)


cdef void* _LLVMPointerSizeForAS__funptr = NULL
# Returns the pointer size in bytes for a target for a specified
# address space.
# See the method llvm::DataLayout::getPointerSize.
cdef unsigned int LLVMPointerSizeForAS(LLVMTargetDataRef TD,unsigned int AS) nogil:
    global _LLVMPointerSizeForAS__funptr
    __init_symbol(&_LLVMPointerSizeForAS__funptr,"LLVMPointerSizeForAS")
    return (<unsigned int (*)(LLVMTargetDataRef,unsigned int) nogil> _LLVMPointerSizeForAS__funptr)(TD,AS)


cdef void* _LLVMIntPtrType__funptr = NULL
# Returns the integer type that is the same size as a pointer on a target.
# See the method llvm::DataLayout::getIntPtrType.
cdef LLVMTypeRef LLVMIntPtrType(LLVMTargetDataRef TD) nogil:
    global _LLVMIntPtrType__funptr
    __init_symbol(&_LLVMIntPtrType__funptr,"LLVMIntPtrType")
    return (<LLVMTypeRef (*)(LLVMTargetDataRef) nogil> _LLVMIntPtrType__funptr)(TD)


cdef void* _LLVMIntPtrTypeForAS__funptr = NULL
# Returns the integer type that is the same size as a pointer on a target.
# This version allows the address space to be specified.
# See the method llvm::DataLayout::getIntPtrType.
cdef LLVMTypeRef LLVMIntPtrTypeForAS(LLVMTargetDataRef TD,unsigned int AS) nogil:
    global _LLVMIntPtrTypeForAS__funptr
    __init_symbol(&_LLVMIntPtrTypeForAS__funptr,"LLVMIntPtrTypeForAS")
    return (<LLVMTypeRef (*)(LLVMTargetDataRef,unsigned int) nogil> _LLVMIntPtrTypeForAS__funptr)(TD,AS)


cdef void* _LLVMIntPtrTypeInContext__funptr = NULL
# Returns the integer type that is the same size as a pointer on a target.
# See the method llvm::DataLayout::getIntPtrType.
cdef LLVMTypeRef LLVMIntPtrTypeInContext(LLVMContextRef C,LLVMTargetDataRef TD) nogil:
    global _LLVMIntPtrTypeInContext__funptr
    __init_symbol(&_LLVMIntPtrTypeInContext__funptr,"LLVMIntPtrTypeInContext")
    return (<LLVMTypeRef (*)(LLVMContextRef,LLVMTargetDataRef) nogil> _LLVMIntPtrTypeInContext__funptr)(C,TD)


cdef void* _LLVMIntPtrTypeForASInContext__funptr = NULL
# Returns the integer type that is the same size as a pointer on a target.
# This version allows the address space to be specified.
# See the method llvm::DataLayout::getIntPtrType.
cdef LLVMTypeRef LLVMIntPtrTypeForASInContext(LLVMContextRef C,LLVMTargetDataRef TD,unsigned int AS) nogil:
    global _LLVMIntPtrTypeForASInContext__funptr
    __init_symbol(&_LLVMIntPtrTypeForASInContext__funptr,"LLVMIntPtrTypeForASInContext")
    return (<LLVMTypeRef (*)(LLVMContextRef,LLVMTargetDataRef,unsigned int) nogil> _LLVMIntPtrTypeForASInContext__funptr)(C,TD,AS)


cdef void* _LLVMSizeOfTypeInBits__funptr = NULL
# Computes the size of a type in bytes for a target.
# See the method llvm::DataLayout::getTypeSizeInBits.
cdef unsigned long long LLVMSizeOfTypeInBits(LLVMTargetDataRef TD,LLVMTypeRef Ty) nogil:
    global _LLVMSizeOfTypeInBits__funptr
    __init_symbol(&_LLVMSizeOfTypeInBits__funptr,"LLVMSizeOfTypeInBits")
    return (<unsigned long long (*)(LLVMTargetDataRef,LLVMTypeRef) nogil> _LLVMSizeOfTypeInBits__funptr)(TD,Ty)


cdef void* _LLVMStoreSizeOfType__funptr = NULL
# Computes the storage size of a type in bytes for a target.
# See the method llvm::DataLayout::getTypeStoreSize.
cdef unsigned long long LLVMStoreSizeOfType(LLVMTargetDataRef TD,LLVMTypeRef Ty) nogil:
    global _LLVMStoreSizeOfType__funptr
    __init_symbol(&_LLVMStoreSizeOfType__funptr,"LLVMStoreSizeOfType")
    return (<unsigned long long (*)(LLVMTargetDataRef,LLVMTypeRef) nogil> _LLVMStoreSizeOfType__funptr)(TD,Ty)


cdef void* _LLVMABISizeOfType__funptr = NULL
# Computes the ABI size of a type in bytes for a target.
# See the method llvm::DataLayout::getTypeAllocSize.
cdef unsigned long long LLVMABISizeOfType(LLVMTargetDataRef TD,LLVMTypeRef Ty) nogil:
    global _LLVMABISizeOfType__funptr
    __init_symbol(&_LLVMABISizeOfType__funptr,"LLVMABISizeOfType")
    return (<unsigned long long (*)(LLVMTargetDataRef,LLVMTypeRef) nogil> _LLVMABISizeOfType__funptr)(TD,Ty)


cdef void* _LLVMABIAlignmentOfType__funptr = NULL
# Computes the ABI alignment of a type in bytes for a target.
# See the method llvm::DataLayout::getTypeABISize.
cdef unsigned int LLVMABIAlignmentOfType(LLVMTargetDataRef TD,LLVMTypeRef Ty) nogil:
    global _LLVMABIAlignmentOfType__funptr
    __init_symbol(&_LLVMABIAlignmentOfType__funptr,"LLVMABIAlignmentOfType")
    return (<unsigned int (*)(LLVMTargetDataRef,LLVMTypeRef) nogil> _LLVMABIAlignmentOfType__funptr)(TD,Ty)


cdef void* _LLVMCallFrameAlignmentOfType__funptr = NULL
# Computes the call frame alignment of a type in bytes for a target.
# See the method llvm::DataLayout::getTypeABISize.
cdef unsigned int LLVMCallFrameAlignmentOfType(LLVMTargetDataRef TD,LLVMTypeRef Ty) nogil:
    global _LLVMCallFrameAlignmentOfType__funptr
    __init_symbol(&_LLVMCallFrameAlignmentOfType__funptr,"LLVMCallFrameAlignmentOfType")
    return (<unsigned int (*)(LLVMTargetDataRef,LLVMTypeRef) nogil> _LLVMCallFrameAlignmentOfType__funptr)(TD,Ty)


cdef void* _LLVMPreferredAlignmentOfType__funptr = NULL
# Computes the preferred alignment of a type in bytes for a target.
# See the method llvm::DataLayout::getTypeABISize.
cdef unsigned int LLVMPreferredAlignmentOfType(LLVMTargetDataRef TD,LLVMTypeRef Ty) nogil:
    global _LLVMPreferredAlignmentOfType__funptr
    __init_symbol(&_LLVMPreferredAlignmentOfType__funptr,"LLVMPreferredAlignmentOfType")
    return (<unsigned int (*)(LLVMTargetDataRef,LLVMTypeRef) nogil> _LLVMPreferredAlignmentOfType__funptr)(TD,Ty)


cdef void* _LLVMPreferredAlignmentOfGlobal__funptr = NULL
# Computes the preferred alignment of a global variable in bytes for a target.
# See the method llvm::DataLayout::getPreferredAlignment.
cdef unsigned int LLVMPreferredAlignmentOfGlobal(LLVMTargetDataRef TD,LLVMValueRef GlobalVar) nogil:
    global _LLVMPreferredAlignmentOfGlobal__funptr
    __init_symbol(&_LLVMPreferredAlignmentOfGlobal__funptr,"LLVMPreferredAlignmentOfGlobal")
    return (<unsigned int (*)(LLVMTargetDataRef,LLVMValueRef) nogil> _LLVMPreferredAlignmentOfGlobal__funptr)(TD,GlobalVar)


cdef void* _LLVMElementAtOffset__funptr = NULL
# Computes the structure element that contains the byte offset for a target.
# See the method llvm::StructLayout::getElementContainingOffset.
cdef unsigned int LLVMElementAtOffset(LLVMTargetDataRef TD,LLVMTypeRef StructTy,unsigned long long Offset) nogil:
    global _LLVMElementAtOffset__funptr
    __init_symbol(&_LLVMElementAtOffset__funptr,"LLVMElementAtOffset")
    return (<unsigned int (*)(LLVMTargetDataRef,LLVMTypeRef,unsigned long long) nogil> _LLVMElementAtOffset__funptr)(TD,StructTy,Offset)


cdef void* _LLVMOffsetOfElement__funptr = NULL
# Computes the byte offset of the indexed struct element for a target.
# See the method llvm::StructLayout::getElementContainingOffset.
cdef unsigned long long LLVMOffsetOfElement(LLVMTargetDataRef TD,LLVMTypeRef StructTy,unsigned int Element) nogil:
    global _LLVMOffsetOfElement__funptr
    __init_symbol(&_LLVMOffsetOfElement__funptr,"LLVMOffsetOfElement")
    return (<unsigned long long (*)(LLVMTargetDataRef,LLVMTypeRef,unsigned int) nogil> _LLVMOffsetOfElement__funptr)(TD,StructTy,Element)
