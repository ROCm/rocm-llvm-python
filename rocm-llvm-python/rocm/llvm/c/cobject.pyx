# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

cimport hip._util.posixloader as loader
cdef void* _lib_handle = NULL

cdef void __init() nogil:
    global _lib_handle
    if _lib_handle == NULL:
        with gil:
            _lib_handle = loader.open_library("librocmllvm.so")

cdef void __init_symbol(void** result, const char* name) nogil:
    global _lib_handle
    if _lib_handle == NULL:
        __init()
    if result[0] == NULL:
        with gil:
            result[0] = loader.load_symbol(_lib_handle, name) 


cdef void* _LLVMCreateBinary__funptr = NULL
# 
# Create a binary file from the given memory buffer.
# 
# The exact type of the binary file will be inferred automatically, and the
# appropriate implementation selected.  The context may be NULL except if
# the resulting file is an LLVM IR file.
# 
# The memory buffer is not consumed by this function.  It is the responsibilty
# of the caller to free it with \c LLVMDisposeMemoryBuffer.
# 
# If NULL is returned, the \p ErrorMessage parameter is populated with the
# error's description.  It is then the caller's responsibility to free this
# message by calling \c LLVMDisposeMessage.
# 
# @see llvm::object::createBinary
cdef LLVMBinaryRef LLVMCreateBinary(LLVMMemoryBufferRef MemBuf,LLVMContextRef Context,char ** ErrorMessage) nogil:
    global _LLVMCreateBinary__funptr
    __init_symbol(&_LLVMCreateBinary__funptr,"LLVMCreateBinary")
    return (<LLVMBinaryRef (*)(LLVMMemoryBufferRef,LLVMContextRef,char **) nogil> _LLVMCreateBinary__funptr)(MemBuf,Context,ErrorMessage)


cdef void* _LLVMDisposeBinary__funptr = NULL
# 
# Dispose of a binary file.
# 
# The binary file does not own its backing buffer.  It is the responsibilty
# of the caller to free it with \c LLVMDisposeMemoryBuffer.
cdef void LLVMDisposeBinary(LLVMBinaryRef BR) nogil:
    global _LLVMDisposeBinary__funptr
    __init_symbol(&_LLVMDisposeBinary__funptr,"LLVMDisposeBinary")
    return (<void (*)(LLVMBinaryRef) nogil> _LLVMDisposeBinary__funptr)(BR)


cdef void* _LLVMBinaryCopyMemoryBuffer__funptr = NULL
# 
# Retrieves a copy of the memory buffer associated with this object file.
# 
# The returned buffer is merely a shallow copy and does not own the actual
# backing buffer of the binary. Nevertheless, it is the responsibility of the
# caller to free it with \c LLVMDisposeMemoryBuffer.
# 
# @see llvm::object::getMemoryBufferRef
cdef LLVMMemoryBufferRef LLVMBinaryCopyMemoryBuffer(LLVMBinaryRef BR) nogil:
    global _LLVMBinaryCopyMemoryBuffer__funptr
    __init_symbol(&_LLVMBinaryCopyMemoryBuffer__funptr,"LLVMBinaryCopyMemoryBuffer")
    return (<LLVMMemoryBufferRef (*)(LLVMBinaryRef) nogil> _LLVMBinaryCopyMemoryBuffer__funptr)(BR)


cdef void* _LLVMBinaryGetType__funptr = NULL
# 
# Retrieve the specific type of a binary.
# 
# @see llvm::object::Binary::getType
cdef LLVMBinaryType LLVMBinaryGetType(LLVMBinaryRef BR) nogil:
    global _LLVMBinaryGetType__funptr
    __init_symbol(&_LLVMBinaryGetType__funptr,"LLVMBinaryGetType")
    return (<LLVMBinaryType (*)(LLVMBinaryRef) nogil> _LLVMBinaryGetType__funptr)(BR)


cdef void* _LLVMMachOUniversalBinaryCopyObjectForArch__funptr = NULL
cdef LLVMBinaryRef LLVMMachOUniversalBinaryCopyObjectForArch(LLVMBinaryRef BR,const char * Arch,unsigned long ArchLen,char ** ErrorMessage) nogil:
    global _LLVMMachOUniversalBinaryCopyObjectForArch__funptr
    __init_symbol(&_LLVMMachOUniversalBinaryCopyObjectForArch__funptr,"LLVMMachOUniversalBinaryCopyObjectForArch")
    return (<LLVMBinaryRef (*)(LLVMBinaryRef,const char *,unsigned long,char **) nogil> _LLVMMachOUniversalBinaryCopyObjectForArch__funptr)(BR,Arch,ArchLen,ErrorMessage)


cdef void* _LLVMObjectFileCopySectionIterator__funptr = NULL
# 
# Retrieve a copy of the section iterator for this object file.
# 
# If there are no sections, the result is NULL.
# 
# The returned iterator is merely a shallow copy. Nevertheless, it is
# the responsibility of the caller to free it with
# \c LLVMDisposeSectionIterator.
# 
# @see llvm::object::sections()
cdef LLVMSectionIteratorRef LLVMObjectFileCopySectionIterator(LLVMBinaryRef BR) nogil:
    global _LLVMObjectFileCopySectionIterator__funptr
    __init_symbol(&_LLVMObjectFileCopySectionIterator__funptr,"LLVMObjectFileCopySectionIterator")
    return (<LLVMSectionIteratorRef (*)(LLVMBinaryRef) nogil> _LLVMObjectFileCopySectionIterator__funptr)(BR)


cdef void* _LLVMObjectFileIsSectionIteratorAtEnd__funptr = NULL
# 
# Returns whether the given section iterator is at the end.
# 
# @see llvm::object::section_end
cdef int LLVMObjectFileIsSectionIteratorAtEnd(LLVMBinaryRef BR,LLVMSectionIteratorRef SI) nogil:
    global _LLVMObjectFileIsSectionIteratorAtEnd__funptr
    __init_symbol(&_LLVMObjectFileIsSectionIteratorAtEnd__funptr,"LLVMObjectFileIsSectionIteratorAtEnd")
    return (<int (*)(LLVMBinaryRef,LLVMSectionIteratorRef) nogil> _LLVMObjectFileIsSectionIteratorAtEnd__funptr)(BR,SI)


cdef void* _LLVMObjectFileCopySymbolIterator__funptr = NULL
# 
# Retrieve a copy of the symbol iterator for this object file.
# 
# If there are no symbols, the result is NULL.
# 
# The returned iterator is merely a shallow copy. Nevertheless, it is
# the responsibility of the caller to free it with
# \c LLVMDisposeSymbolIterator.
# 
# @see llvm::object::symbols()
cdef LLVMSymbolIteratorRef LLVMObjectFileCopySymbolIterator(LLVMBinaryRef BR) nogil:
    global _LLVMObjectFileCopySymbolIterator__funptr
    __init_symbol(&_LLVMObjectFileCopySymbolIterator__funptr,"LLVMObjectFileCopySymbolIterator")
    return (<LLVMSymbolIteratorRef (*)(LLVMBinaryRef) nogil> _LLVMObjectFileCopySymbolIterator__funptr)(BR)


cdef void* _LLVMObjectFileIsSymbolIteratorAtEnd__funptr = NULL
# 
# Returns whether the given symbol iterator is at the end.
# 
# @see llvm::object::symbol_end
cdef int LLVMObjectFileIsSymbolIteratorAtEnd(LLVMBinaryRef BR,LLVMSymbolIteratorRef SI) nogil:
    global _LLVMObjectFileIsSymbolIteratorAtEnd__funptr
    __init_symbol(&_LLVMObjectFileIsSymbolIteratorAtEnd__funptr,"LLVMObjectFileIsSymbolIteratorAtEnd")
    return (<int (*)(LLVMBinaryRef,LLVMSymbolIteratorRef) nogil> _LLVMObjectFileIsSymbolIteratorAtEnd__funptr)(BR,SI)


cdef void* _LLVMDisposeSectionIterator__funptr = NULL
cdef void LLVMDisposeSectionIterator(LLVMSectionIteratorRef SI) nogil:
    global _LLVMDisposeSectionIterator__funptr
    __init_symbol(&_LLVMDisposeSectionIterator__funptr,"LLVMDisposeSectionIterator")
    return (<void (*)(LLVMSectionIteratorRef) nogil> _LLVMDisposeSectionIterator__funptr)(SI)


cdef void* _LLVMMoveToNextSection__funptr = NULL
cdef void LLVMMoveToNextSection(LLVMSectionIteratorRef SI) nogil:
    global _LLVMMoveToNextSection__funptr
    __init_symbol(&_LLVMMoveToNextSection__funptr,"LLVMMoveToNextSection")
    return (<void (*)(LLVMSectionIteratorRef) nogil> _LLVMMoveToNextSection__funptr)(SI)


cdef void* _LLVMMoveToContainingSection__funptr = NULL
cdef void LLVMMoveToContainingSection(LLVMSectionIteratorRef Sect,LLVMSymbolIteratorRef Sym) nogil:
    global _LLVMMoveToContainingSection__funptr
    __init_symbol(&_LLVMMoveToContainingSection__funptr,"LLVMMoveToContainingSection")
    return (<void (*)(LLVMSectionIteratorRef,LLVMSymbolIteratorRef) nogil> _LLVMMoveToContainingSection__funptr)(Sect,Sym)


cdef void* _LLVMDisposeSymbolIterator__funptr = NULL
cdef void LLVMDisposeSymbolIterator(LLVMSymbolIteratorRef SI) nogil:
    global _LLVMDisposeSymbolIterator__funptr
    __init_symbol(&_LLVMDisposeSymbolIterator__funptr,"LLVMDisposeSymbolIterator")
    return (<void (*)(LLVMSymbolIteratorRef) nogil> _LLVMDisposeSymbolIterator__funptr)(SI)


cdef void* _LLVMMoveToNextSymbol__funptr = NULL
cdef void LLVMMoveToNextSymbol(LLVMSymbolIteratorRef SI) nogil:
    global _LLVMMoveToNextSymbol__funptr
    __init_symbol(&_LLVMMoveToNextSymbol__funptr,"LLVMMoveToNextSymbol")
    return (<void (*)(LLVMSymbolIteratorRef) nogil> _LLVMMoveToNextSymbol__funptr)(SI)


cdef void* _LLVMGetSectionName__funptr = NULL
cdef const char * LLVMGetSectionName(LLVMSectionIteratorRef SI) nogil:
    global _LLVMGetSectionName__funptr
    __init_symbol(&_LLVMGetSectionName__funptr,"LLVMGetSectionName")
    return (<const char * (*)(LLVMSectionIteratorRef) nogil> _LLVMGetSectionName__funptr)(SI)


cdef void* _LLVMGetSectionSize__funptr = NULL
cdef unsigned long LLVMGetSectionSize(LLVMSectionIteratorRef SI) nogil:
    global _LLVMGetSectionSize__funptr
    __init_symbol(&_LLVMGetSectionSize__funptr,"LLVMGetSectionSize")
    return (<unsigned long (*)(LLVMSectionIteratorRef) nogil> _LLVMGetSectionSize__funptr)(SI)


cdef void* _LLVMGetSectionContents__funptr = NULL
cdef const char * LLVMGetSectionContents(LLVMSectionIteratorRef SI) nogil:
    global _LLVMGetSectionContents__funptr
    __init_symbol(&_LLVMGetSectionContents__funptr,"LLVMGetSectionContents")
    return (<const char * (*)(LLVMSectionIteratorRef) nogil> _LLVMGetSectionContents__funptr)(SI)


cdef void* _LLVMGetSectionAddress__funptr = NULL
cdef unsigned long LLVMGetSectionAddress(LLVMSectionIteratorRef SI) nogil:
    global _LLVMGetSectionAddress__funptr
    __init_symbol(&_LLVMGetSectionAddress__funptr,"LLVMGetSectionAddress")
    return (<unsigned long (*)(LLVMSectionIteratorRef) nogil> _LLVMGetSectionAddress__funptr)(SI)


cdef void* _LLVMGetSectionContainsSymbol__funptr = NULL
cdef int LLVMGetSectionContainsSymbol(LLVMSectionIteratorRef SI,LLVMSymbolIteratorRef Sym) nogil:
    global _LLVMGetSectionContainsSymbol__funptr
    __init_symbol(&_LLVMGetSectionContainsSymbol__funptr,"LLVMGetSectionContainsSymbol")
    return (<int (*)(LLVMSectionIteratorRef,LLVMSymbolIteratorRef) nogil> _LLVMGetSectionContainsSymbol__funptr)(SI,Sym)


cdef void* _LLVMGetRelocations__funptr = NULL
cdef LLVMRelocationIteratorRef LLVMGetRelocations(LLVMSectionIteratorRef Section) nogil:
    global _LLVMGetRelocations__funptr
    __init_symbol(&_LLVMGetRelocations__funptr,"LLVMGetRelocations")
    return (<LLVMRelocationIteratorRef (*)(LLVMSectionIteratorRef) nogil> _LLVMGetRelocations__funptr)(Section)


cdef void* _LLVMDisposeRelocationIterator__funptr = NULL
cdef void LLVMDisposeRelocationIterator(LLVMRelocationIteratorRef RI) nogil:
    global _LLVMDisposeRelocationIterator__funptr
    __init_symbol(&_LLVMDisposeRelocationIterator__funptr,"LLVMDisposeRelocationIterator")
    return (<void (*)(LLVMRelocationIteratorRef) nogil> _LLVMDisposeRelocationIterator__funptr)(RI)


cdef void* _LLVMIsRelocationIteratorAtEnd__funptr = NULL
cdef int LLVMIsRelocationIteratorAtEnd(LLVMSectionIteratorRef Section,LLVMRelocationIteratorRef RI) nogil:
    global _LLVMIsRelocationIteratorAtEnd__funptr
    __init_symbol(&_LLVMIsRelocationIteratorAtEnd__funptr,"LLVMIsRelocationIteratorAtEnd")
    return (<int (*)(LLVMSectionIteratorRef,LLVMRelocationIteratorRef) nogil> _LLVMIsRelocationIteratorAtEnd__funptr)(Section,RI)


cdef void* _LLVMMoveToNextRelocation__funptr = NULL
cdef void LLVMMoveToNextRelocation(LLVMRelocationIteratorRef RI) nogil:
    global _LLVMMoveToNextRelocation__funptr
    __init_symbol(&_LLVMMoveToNextRelocation__funptr,"LLVMMoveToNextRelocation")
    return (<void (*)(LLVMRelocationIteratorRef) nogil> _LLVMMoveToNextRelocation__funptr)(RI)


cdef void* _LLVMGetSymbolName__funptr = NULL
cdef const char * LLVMGetSymbolName(LLVMSymbolIteratorRef SI) nogil:
    global _LLVMGetSymbolName__funptr
    __init_symbol(&_LLVMGetSymbolName__funptr,"LLVMGetSymbolName")
    return (<const char * (*)(LLVMSymbolIteratorRef) nogil> _LLVMGetSymbolName__funptr)(SI)


cdef void* _LLVMGetSymbolAddress__funptr = NULL
cdef unsigned long LLVMGetSymbolAddress(LLVMSymbolIteratorRef SI) nogil:
    global _LLVMGetSymbolAddress__funptr
    __init_symbol(&_LLVMGetSymbolAddress__funptr,"LLVMGetSymbolAddress")
    return (<unsigned long (*)(LLVMSymbolIteratorRef) nogil> _LLVMGetSymbolAddress__funptr)(SI)


cdef void* _LLVMGetSymbolSize__funptr = NULL
cdef unsigned long LLVMGetSymbolSize(LLVMSymbolIteratorRef SI) nogil:
    global _LLVMGetSymbolSize__funptr
    __init_symbol(&_LLVMGetSymbolSize__funptr,"LLVMGetSymbolSize")
    return (<unsigned long (*)(LLVMSymbolIteratorRef) nogil> _LLVMGetSymbolSize__funptr)(SI)


cdef void* _LLVMGetRelocationOffset__funptr = NULL
cdef unsigned long LLVMGetRelocationOffset(LLVMRelocationIteratorRef RI) nogil:
    global _LLVMGetRelocationOffset__funptr
    __init_symbol(&_LLVMGetRelocationOffset__funptr,"LLVMGetRelocationOffset")
    return (<unsigned long (*)(LLVMRelocationIteratorRef) nogil> _LLVMGetRelocationOffset__funptr)(RI)


cdef void* _LLVMGetRelocationSymbol__funptr = NULL
cdef LLVMSymbolIteratorRef LLVMGetRelocationSymbol(LLVMRelocationIteratorRef RI) nogil:
    global _LLVMGetRelocationSymbol__funptr
    __init_symbol(&_LLVMGetRelocationSymbol__funptr,"LLVMGetRelocationSymbol")
    return (<LLVMSymbolIteratorRef (*)(LLVMRelocationIteratorRef) nogil> _LLVMGetRelocationSymbol__funptr)(RI)


cdef void* _LLVMGetRelocationType__funptr = NULL
cdef unsigned long LLVMGetRelocationType(LLVMRelocationIteratorRef RI) nogil:
    global _LLVMGetRelocationType__funptr
    __init_symbol(&_LLVMGetRelocationType__funptr,"LLVMGetRelocationType")
    return (<unsigned long (*)(LLVMRelocationIteratorRef) nogil> _LLVMGetRelocationType__funptr)(RI)


cdef void* _LLVMGetRelocationTypeName__funptr = NULL
cdef const char * LLVMGetRelocationTypeName(LLVMRelocationIteratorRef RI) nogil:
    global _LLVMGetRelocationTypeName__funptr
    __init_symbol(&_LLVMGetRelocationTypeName__funptr,"LLVMGetRelocationTypeName")
    return (<const char * (*)(LLVMRelocationIteratorRef) nogil> _LLVMGetRelocationTypeName__funptr)(RI)


cdef void* _LLVMGetRelocationValueString__funptr = NULL
cdef const char * LLVMGetRelocationValueString(LLVMRelocationIteratorRef RI) nogil:
    global _LLVMGetRelocationValueString__funptr
    __init_symbol(&_LLVMGetRelocationValueString__funptr,"LLVMGetRelocationValueString")
    return (<const char * (*)(LLVMRelocationIteratorRef) nogil> _LLVMGetRelocationValueString__funptr)(RI)


cdef void* _LLVMCreateObjectFile__funptr = NULL
# Deprecated: Use LLVMCreateBinary instead. */
cdef LLVMObjectFileRef LLVMCreateObjectFile(LLVMMemoryBufferRef MemBuf) nogil:
    global _LLVMCreateObjectFile__funptr
    __init_symbol(&_LLVMCreateObjectFile__funptr,"LLVMCreateObjectFile")
    return (<LLVMObjectFileRef (*)(LLVMMemoryBufferRef) nogil> _LLVMCreateObjectFile__funptr)(MemBuf)


cdef void* _LLVMDisposeObjectFile__funptr = NULL
# Deprecated: Use LLVMDisposeBinary instead. */
cdef void LLVMDisposeObjectFile(LLVMObjectFileRef ObjectFile) nogil:
    global _LLVMDisposeObjectFile__funptr
    __init_symbol(&_LLVMDisposeObjectFile__funptr,"LLVMDisposeObjectFile")
    return (<void (*)(LLVMObjectFileRef) nogil> _LLVMDisposeObjectFile__funptr)(ObjectFile)


cdef void* _LLVMGetSections__funptr = NULL
# Deprecated: Use LLVMObjectFileCopySectionIterator instead. */
cdef LLVMSectionIteratorRef LLVMGetSections(LLVMObjectFileRef ObjectFile) nogil:
    global _LLVMGetSections__funptr
    __init_symbol(&_LLVMGetSections__funptr,"LLVMGetSections")
    return (<LLVMSectionIteratorRef (*)(LLVMObjectFileRef) nogil> _LLVMGetSections__funptr)(ObjectFile)


cdef void* _LLVMIsSectionIteratorAtEnd__funptr = NULL
# Deprecated: Use LLVMObjectFileIsSectionIteratorAtEnd instead. */
cdef int LLVMIsSectionIteratorAtEnd(LLVMObjectFileRef ObjectFile,LLVMSectionIteratorRef SI) nogil:
    global _LLVMIsSectionIteratorAtEnd__funptr
    __init_symbol(&_LLVMIsSectionIteratorAtEnd__funptr,"LLVMIsSectionIteratorAtEnd")
    return (<int (*)(LLVMObjectFileRef,LLVMSectionIteratorRef) nogil> _LLVMIsSectionIteratorAtEnd__funptr)(ObjectFile,SI)


cdef void* _LLVMGetSymbols__funptr = NULL
# Deprecated: Use LLVMObjectFileCopySymbolIterator instead. */
cdef LLVMSymbolIteratorRef LLVMGetSymbols(LLVMObjectFileRef ObjectFile) nogil:
    global _LLVMGetSymbols__funptr
    __init_symbol(&_LLVMGetSymbols__funptr,"LLVMGetSymbols")
    return (<LLVMSymbolIteratorRef (*)(LLVMObjectFileRef) nogil> _LLVMGetSymbols__funptr)(ObjectFile)


cdef void* _LLVMIsSymbolIteratorAtEnd__funptr = NULL
# Deprecated: Use LLVMObjectFileIsSymbolIteratorAtEnd instead. */
cdef int LLVMIsSymbolIteratorAtEnd(LLVMObjectFileRef ObjectFile,LLVMSymbolIteratorRef SI) nogil:
    global _LLVMIsSymbolIteratorAtEnd__funptr
    __init_symbol(&_LLVMIsSymbolIteratorAtEnd__funptr,"LLVMIsSymbolIteratorAtEnd")
    return (<int (*)(LLVMObjectFileRef,LLVMSymbolIteratorRef) nogil> _LLVMIsSymbolIteratorAtEnd__funptr)(ObjectFile,SI)
