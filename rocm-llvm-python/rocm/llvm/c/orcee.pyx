# MIT License
#
# Copyright (c) 2023-2024 Advanced Micro Devices, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.


"""
(No short description)


"""

import cython
import ctypes
import enum

from rocm.llvm.c.error import LLVMErrorRef
from rocm.llvm.c.error import LLVMGetErrorTypeId
from rocm.llvm.c.error import LLVMConsumeError
from rocm.llvm.c.error import LLVMGetErrorMessage
from rocm.llvm.c.error import LLVMDisposeErrorMessage
from rocm.llvm.c.error import LLVMGetStringErrorTypeId
from rocm.llvm.c.error import LLVMCreateStringError


from rocm.llvm.c.executionengine import LLVMLinkInMCJIT
from rocm.llvm.c.executionengine import LLVMLinkInInterpreter
from rocm.llvm.c.executionengine import LLVMGenericValueRef
from rocm.llvm.c.executionengine import LLVMExecutionEngineRef
from rocm.llvm.c.executionengine import LLVMMCJITMemoryManagerRef
from rocm.llvm.c.executionengine import LLVMCreateGenericValueOfInt
from rocm.llvm.c.executionengine import LLVMCreateGenericValueOfPointer
from rocm.llvm.c.executionengine import LLVMCreateGenericValueOfFloat
from rocm.llvm.c.executionengine import LLVMGenericValueIntWidth
from rocm.llvm.c.executionengine import LLVMGenericValueToInt
from rocm.llvm.c.executionengine import LLVMGenericValueToPointer
from rocm.llvm.c.executionengine import LLVMGenericValueToFloat
from rocm.llvm.c.executionengine import LLVMDisposeGenericValue
from rocm.llvm.c.executionengine import LLVMCreateExecutionEngineForModule
from rocm.llvm.c.executionengine import LLVMCreateInterpreterForModule
from rocm.llvm.c.executionengine import LLVMCreateJITCompilerForModule
from rocm.llvm.c.executionengine import LLVMInitializeMCJITCompilerOptions
from rocm.llvm.c.executionengine import LLVMCreateMCJITCompilerForModule
from rocm.llvm.c.executionengine import LLVMDisposeExecutionEngine
from rocm.llvm.c.executionengine import LLVMRunStaticConstructors
from rocm.llvm.c.executionengine import LLVMRunStaticDestructors
from rocm.llvm.c.executionengine import LLVMRunFunctionAsMain
from rocm.llvm.c.executionengine import LLVMRunFunction
from rocm.llvm.c.executionengine import LLVMFreeMachineCodeForFunction
from rocm.llvm.c.executionengine import LLVMAddModule
from rocm.llvm.c.executionengine import LLVMRemoveModule
from rocm.llvm.c.executionengine import LLVMFindFunction
from rocm.llvm.c.executionengine import LLVMRecompileAndRelinkFunction
from rocm.llvm.c.executionengine import LLVMGetExecutionEngineTargetData
from rocm.llvm.c.executionengine import LLVMGetExecutionEngineTargetMachine
from rocm.llvm.c.executionengine import LLVMAddGlobalMapping
from rocm.llvm.c.executionengine import LLVMGetPointerToGlobal
from rocm.llvm.c.executionengine import LLVMGetGlobalValueAddress
from rocm.llvm.c.executionengine import LLVMGetFunctionAddress
from rocm.llvm.c.executionengine import LLVMExecutionEngineGetErrMsg
from rocm.llvm.c.executionengine import LLVMCreateSimpleMCJITMemoryManager
from rocm.llvm.c.executionengine import LLVMDisposeMCJITMemoryManager
from rocm.llvm.c.executionengine import LLVMCreateGDBRegistrationListener
from rocm.llvm.c.executionengine import LLVMCreateIntelJITEventListener
from rocm.llvm.c.executionengine import LLVMCreateOProfileJITEventListener
from rocm.llvm.c.executionengine import LLVMCreatePerfJITEventListener


from rocm.llvm.c.orc import LLVMJITSymbolGenericFlags
from rocm.llvm.c.orc import LLVMOrcExecutionSessionRef
from rocm.llvm.c.orc import LLVMOrcSymbolStringPoolRef
from rocm.llvm.c.orc import LLVMOrcSymbolStringPoolEntryRef
from rocm.llvm.c.orc import LLVMOrcCSymbolFlagsMapPairs
from rocm.llvm.c.orc import LLVMOrcCSymbolMapPairs
from rocm.llvm.c.orc import LLVMOrcCSymbolAliasMapPairs
from rocm.llvm.c.orc import LLVMOrcJITDylibRef
from rocm.llvm.c.orc import LLVMOrcCDependenceMapPairs
from rocm.llvm.c.orc import LLVMOrcLookupKind
from rocm.llvm.c.orc import LLVMOrcJITDylibLookupFlags
from rocm.llvm.c.orc import LLVMOrcCJITDylibSearchOrder
from rocm.llvm.c.orc import LLVMOrcSymbolLookupFlags
from rocm.llvm.c.orc import LLVMOrcCLookupSet
from rocm.llvm.c.orc import LLVMOrcMaterializationUnitRef
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityRef
from rocm.llvm.c.orc import LLVMOrcResourceTrackerRef
from rocm.llvm.c.orc import LLVMOrcDefinitionGeneratorRef
from rocm.llvm.c.orc import LLVMOrcLookupStateRef
from rocm.llvm.c.orc import LLVMOrcThreadSafeContextRef
from rocm.llvm.c.orc import LLVMOrcThreadSafeModuleRef
from rocm.llvm.c.orc import LLVMOrcJITTargetMachineBuilderRef
from rocm.llvm.c.orc import LLVMOrcObjectLayerRef
from rocm.llvm.c.orc import LLVMOrcObjectLinkingLayerRef
from rocm.llvm.c.orc import LLVMOrcIRTransformLayerRef
from rocm.llvm.c.orc import LLVMOrcObjectTransformLayerRef
from rocm.llvm.c.orc import LLVMOrcIndirectStubsManagerRef
from rocm.llvm.c.orc import LLVMOrcLazyCallThroughManagerRef
from rocm.llvm.c.orc import LLVMOrcDumpObjectsRef
from rocm.llvm.c.orc import LLVMOrcExecutionSessionSetErrorReporter
from rocm.llvm.c.orc import LLVMOrcExecutionSessionGetSymbolStringPool
from rocm.llvm.c.orc import LLVMOrcSymbolStringPoolClearDeadEntries
from rocm.llvm.c.orc import LLVMOrcExecutionSessionIntern
from rocm.llvm.c.orc import LLVMOrcExecutionSessionLookup
from rocm.llvm.c.orc import LLVMOrcRetainSymbolStringPoolEntry
from rocm.llvm.c.orc import LLVMOrcReleaseSymbolStringPoolEntry
from rocm.llvm.c.orc import LLVMOrcSymbolStringPoolEntryStr
from rocm.llvm.c.orc import LLVMOrcReleaseResourceTracker
from rocm.llvm.c.orc import LLVMOrcResourceTrackerTransferTo
from rocm.llvm.c.orc import LLVMOrcResourceTrackerRemove
from rocm.llvm.c.orc import LLVMOrcDisposeDefinitionGenerator
from rocm.llvm.c.orc import LLVMOrcDisposeMaterializationUnit
from rocm.llvm.c.orc import LLVMOrcCreateCustomMaterializationUnit
from rocm.llvm.c.orc import LLVMOrcAbsoluteSymbols
from rocm.llvm.c.orc import LLVMOrcLazyReexports
from rocm.llvm.c.orc import LLVMOrcDisposeMaterializationResponsibility
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityGetTargetDylib
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityGetExecutionSession
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityGetSymbols
from rocm.llvm.c.orc import LLVMOrcDisposeCSymbolFlagsMap
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityGetInitializerSymbol
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityGetRequestedSymbols
from rocm.llvm.c.orc import LLVMOrcDisposeSymbols
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityNotifyResolved
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityNotifyEmitted
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityDefineMaterializing
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityFailMaterialization
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityReplace
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityDelegate
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityAddDependencies
from rocm.llvm.c.orc import LLVMOrcMaterializationResponsibilityAddDependenciesForAll
from rocm.llvm.c.orc import LLVMOrcExecutionSessionCreateBareJITDylib
from rocm.llvm.c.orc import LLVMOrcExecutionSessionCreateJITDylib
from rocm.llvm.c.orc import LLVMOrcExecutionSessionGetJITDylibByName
from rocm.llvm.c.orc import LLVMOrcJITDylibCreateResourceTracker
from rocm.llvm.c.orc import LLVMOrcJITDylibGetDefaultResourceTracker
from rocm.llvm.c.orc import LLVMOrcJITDylibDefine
from rocm.llvm.c.orc import LLVMOrcJITDylibClear
from rocm.llvm.c.orc import LLVMOrcJITDylibAddGenerator
from rocm.llvm.c.orc import LLVMOrcCreateCustomCAPIDefinitionGenerator
from rocm.llvm.c.orc import LLVMOrcLookupStateContinueLookup
from rocm.llvm.c.orc import LLVMOrcCreateDynamicLibrarySearchGeneratorForProcess
from rocm.llvm.c.orc import LLVMOrcCreateDynamicLibrarySearchGeneratorForPath
from rocm.llvm.c.orc import LLVMOrcCreateStaticLibrarySearchGeneratorForPath
from rocm.llvm.c.orc import LLVMOrcCreateNewThreadSafeContext
from rocm.llvm.c.orc import LLVMOrcThreadSafeContextGetContext
from rocm.llvm.c.orc import LLVMOrcDisposeThreadSafeContext
from rocm.llvm.c.orc import LLVMOrcCreateNewThreadSafeModule
from rocm.llvm.c.orc import LLVMOrcDisposeThreadSafeModule
from rocm.llvm.c.orc import LLVMOrcThreadSafeModuleWithModuleDo
from rocm.llvm.c.orc import LLVMOrcJITTargetMachineBuilderDetectHost
from rocm.llvm.c.orc import LLVMOrcJITTargetMachineBuilderCreateFromTargetMachine
from rocm.llvm.c.orc import LLVMOrcDisposeJITTargetMachineBuilder
from rocm.llvm.c.orc import LLVMOrcJITTargetMachineBuilderGetTargetTriple
from rocm.llvm.c.orc import LLVMOrcJITTargetMachineBuilderSetTargetTriple
from rocm.llvm.c.orc import LLVMOrcObjectLayerAddObjectFile
from rocm.llvm.c.orc import LLVMOrcObjectLayerAddObjectFileWithRT
from rocm.llvm.c.orc import LLVMOrcObjectLayerEmit
from rocm.llvm.c.orc import LLVMOrcDisposeObjectLayer
from rocm.llvm.c.orc import LLVMOrcIRTransformLayerEmit
from rocm.llvm.c.orc import LLVMOrcIRTransformLayerSetTransform
from rocm.llvm.c.orc import LLVMOrcObjectTransformLayerSetTransform
from rocm.llvm.c.orc import LLVMOrcCreateLocalIndirectStubsManager
from rocm.llvm.c.orc import LLVMOrcDisposeIndirectStubsManager
from rocm.llvm.c.orc import LLVMOrcCreateLocalLazyCallThroughManager
from rocm.llvm.c.orc import LLVMOrcDisposeLazyCallThroughManager
from rocm.llvm.c.orc import LLVMOrcCreateDumpObjects
from rocm.llvm.c.orc import LLVMOrcDisposeDumpObjects
from rocm.llvm.c.orc import LLVMOrcDumpObjects_CallOperator


from rocm.llvm.c.targetmachine import LLVMTargetMachineRef
from rocm.llvm.c.targetmachine import LLVMTargetRef
from rocm.llvm.c.targetmachine import LLVMCodeGenOptLevel
from rocm.llvm.c.targetmachine import LLVMRelocMode
from rocm.llvm.c.targetmachine import LLVMCodeModel
from rocm.llvm.c.targetmachine import LLVMCodeGenFileType
from rocm.llvm.c.targetmachine import LLVMGetFirstTarget
from rocm.llvm.c.targetmachine import LLVMGetNextTarget
from rocm.llvm.c.targetmachine import LLVMGetTargetFromName
from rocm.llvm.c.targetmachine import LLVMGetTargetFromTriple
from rocm.llvm.c.targetmachine import LLVMGetTargetName
from rocm.llvm.c.targetmachine import LLVMGetTargetDescription
from rocm.llvm.c.targetmachine import LLVMTargetHasJIT
from rocm.llvm.c.targetmachine import LLVMTargetHasTargetMachine
from rocm.llvm.c.targetmachine import LLVMTargetHasAsmBackend
from rocm.llvm.c.targetmachine import LLVMCreateTargetMachine
from rocm.llvm.c.targetmachine import LLVMDisposeTargetMachine
from rocm.llvm.c.targetmachine import LLVMGetTargetMachineTarget
from rocm.llvm.c.targetmachine import LLVMGetTargetMachineTriple
from rocm.llvm.c.targetmachine import LLVMGetTargetMachineCPU
from rocm.llvm.c.targetmachine import LLVMGetTargetMachineFeatureString
from rocm.llvm.c.targetmachine import LLVMCreateTargetDataLayout
from rocm.llvm.c.targetmachine import LLVMSetTargetMachineAsmVerbosity
from rocm.llvm.c.targetmachine import LLVMTargetMachineEmitToFile
from rocm.llvm.c.targetmachine import LLVMTargetMachineEmitToMemoryBuffer
from rocm.llvm.c.targetmachine import LLVMGetDefaultTargetTriple
from rocm.llvm.c.targetmachine import LLVMNormalizeTargetTriple
from rocm.llvm.c.targetmachine import LLVMGetHostCPUName
from rocm.llvm.c.targetmachine import LLVMGetHostCPUFeatures
from rocm.llvm.c.targetmachine import LLVMAddAnalysisPasses


from rocm.llvm.c.types import LLVMMemoryBufferRef
from rocm.llvm.c.types import LLVMContextRef
from rocm.llvm.c.types import LLVMModuleRef
from rocm.llvm.c.types import LLVMTypeRef
from rocm.llvm.c.types import LLVMValueRef
from rocm.llvm.c.types import LLVMBasicBlockRef
from rocm.llvm.c.types import LLVMMetadataRef
from rocm.llvm.c.types import LLVMNamedMDNodeRef
from rocm.llvm.c.types import LLVMValueMetadataEntry
from rocm.llvm.c.types import LLVMBuilderRef
from rocm.llvm.c.types import LLVMDIBuilderRef
from rocm.llvm.c.types import LLVMModuleProviderRef
from rocm.llvm.c.types import LLVMPassManagerRef
from rocm.llvm.c.types import LLVMPassRegistryRef
from rocm.llvm.c.types import LLVMUseRef
from rocm.llvm.c.types import LLVMAttributeRef
from rocm.llvm.c.types import LLVMDiagnosticInfoRef
from rocm.llvm.c.types import LLVMComdatRef
from rocm.llvm.c.types import LLVMModuleFlagEntry
from rocm.llvm.c.types import LLVMJITEventListenerRef
from rocm.llvm.c.types import LLVMBinaryRef

cdef class LLVMMemoryManagerCreateContextCallback(rocm.llvm._util.types.Pointer):
    """Python wrapper for cdef class corcee.LLVMMemoryManagerCreateContextCallback.

    Python wrapper for cdef class corcee.LLVMMemoryManagerCreateContextCallback.

    If this type is initialized via its `__init__` method, it allocates a
    member of the underlying C type and destroys it again if the wrapper
    type is deallocated.

    This type also serves as adapter when appearing as argument type in a
    function signature. In this case, the type can further be initialized
    from a number of Python objects:

    * `None`:

      This will set the ``self._ptr`` attribute to ``NULL``.

    * `int`:

      Interprets the integer value as pointer address and writes it to ``self._ptr``.
      No ownership is transferred.

    * `ctypes.c_void_p`:

      Takes the pointer address ``pyobj.value`` and writes it to ``self._ptr``.
      No ownership is transferred.

    * `object` that implements the `CUDA Array Interface <https://numba.readthedocs.io/en/stable/cuda/cuda_array_interface.html>`_ protocol:

      Takes the integer-valued pointer address, i.e. the first entry of the `data` tuple
      from `pyobj`'s member ``__cuda_array_interface__``  and writes it to ``self._ptr``.

    * `object` that implements the Python buffer protocol:

      If the object represents a simple contiguous array,
      writes the `Py_buffer` associated with ``pyobj`` to `self._py_buffer`,
      sets the `self._py_buffer_acquired` flag to `True`, and
      writes `self._py_buffer.buf` to the data pointer `self._ptr`.

    * `rocm.llvm._util.types.Pointer`:

      Takes the pointer address ``pyobj._ptr`` and writes it to ``self._ptr``.
      No ownership is transferred.

    Type checks are performed in the above order.

    C Attributes:
        _ptr (C type ``void *``, protected):
            Stores a pointer to the data of the original Python object.
        _is_ptr_owner (C type ``bint``, protected):
            If this wrapper is the owner of the underlying data.
        _py_buffer (C type ``Py_buffer`, protected):
            Stores a pointer to the data of the original Python object.
        _py_buffer_acquired (C type ``bint``, protected):
            Stores a pointer to the data of the original Python object.
    """
    # C members declared in pxd file

    def __cinit__(self):
        self._ptr = NULL
        self._is_ptr_owner = False
        self._py_buffer_acquired = False

    cdef corcee.LLVMMemoryManagerCreateContextCallback getElementPtr(self):
        return <corcee.LLVMMemoryManagerCreateContextCallback>self._ptr

    @staticmethod
    cdef LLVMMemoryManagerCreateContextCallback fromPtr(void* ptr, bint owner=False):
        """Factory function to create ``LLVMMemoryManagerCreateContextCallback`` objects from
        given ``corcee.LLVMMemoryManagerCreateContextCallback`` pointer.
        """
        # Fast call to __new__() that bypasses the __init__() constructor.
        cdef LLVMMemoryManagerCreateContextCallback wrapper = LLVMMemoryManagerCreateContextCallback.__new__(LLVMMemoryManagerCreateContextCallback)
        wrapper._ptr = ptr
        wrapper._is_ptr_owner = owner
        return wrapper

    @staticmethod
    def fromObj(pyobj):
        """Creates a LLVMMemoryManagerCreateContextCallback from a Python object.

        Derives a LLVMMemoryManagerCreateContextCallback from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMMemoryManagerCreateContextCallback`` reference, this method
        returns it directly. No new ``LLVMMemoryManagerCreateContextCallback`` is created in this case.
        """
        return LLVMMemoryManagerCreateContextCallback.fromPyobj(pyobj)

    @staticmethod
    cdef LLVMMemoryManagerCreateContextCallback fromPyobj(object pyobj):
        """Creates a LLVMMemoryManagerCreateContextCallback from a Python object.

        Derives a LLVMMemoryManagerCreateContextCallback from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMMemoryManagerCreateContextCallback`` reference, this method
        returns it directly. No new ``LLVMMemoryManagerCreateContextCallback`` is created in this case.

        Args:
            pyobj (object): Must be either `None`; a `rocm.llvm._util.types.Pointer`; a simple, contiguous buffer according to the buffer protocol;
                            or of type `LLVMMemoryManagerCreateContextCallback`; `int`; or `ctypes.c_void_p`.

        Note:
            This routine does not perform a copy but returns the original ``pyobj``
            if ``pyobj`` is an instance of LLVMMemoryManagerCreateContextCallback!
        """
        cdef LLVMMemoryManagerCreateContextCallback wrapper

        if isinstance(pyobj,LLVMMemoryManagerCreateContextCallback):
            return pyobj
        else:
            wrapper = LLVMMemoryManagerCreateContextCallback.__new__(LLVMMemoryManagerCreateContextCallback)
            wrapper.init_from_pyobj(pyobj)
            return wrapper

    def __dealloc__(self):
        # Release the buffer handle
        if self._py_buffer_acquired is True:
            cpython.buffer.PyBuffer_Release(&self._py_buffer)

    def __int__(self):
        """Returns the data's address as long integer.
        """
        return cpython.long.PyLong_FromVoidPtr(self._ptr)

    def __repr__(self):
        return f"<LLVMMemoryManagerCreateContextCallback object, ptr: {int(self)}>"

    def as_c_void_p(self):
        """Returns the data's address as `ctypes.c_void_p`
        Note:
            Implemented as function to not collide with
            autogenerated property names.
        """
        return ctypes.c_void_p(int(self))


cdef class LLVMMemoryManagerNotifyTerminatingCallback(rocm.llvm._util.types.Pointer):
    """Python wrapper for cdef class corcee.LLVMMemoryManagerNotifyTerminatingCallback.

    Python wrapper for cdef class corcee.LLVMMemoryManagerNotifyTerminatingCallback.

    If this type is initialized via its `__init__` method, it allocates a
    member of the underlying C type and destroys it again if the wrapper
    type is deallocated.

    This type also serves as adapter when appearing as argument type in a
    function signature. In this case, the type can further be initialized
    from a number of Python objects:

    * `None`:

      This will set the ``self._ptr`` attribute to ``NULL``.

    * `int`:

      Interprets the integer value as pointer address and writes it to ``self._ptr``.
      No ownership is transferred.

    * `ctypes.c_void_p`:

      Takes the pointer address ``pyobj.value`` and writes it to ``self._ptr``.
      No ownership is transferred.

    * `object` that implements the `CUDA Array Interface <https://numba.readthedocs.io/en/stable/cuda/cuda_array_interface.html>`_ protocol:

      Takes the integer-valued pointer address, i.e. the first entry of the `data` tuple
      from `pyobj`'s member ``__cuda_array_interface__``  and writes it to ``self._ptr``.

    * `object` that implements the Python buffer protocol:

      If the object represents a simple contiguous array,
      writes the `Py_buffer` associated with ``pyobj`` to `self._py_buffer`,
      sets the `self._py_buffer_acquired` flag to `True`, and
      writes `self._py_buffer.buf` to the data pointer `self._ptr`.

    * `rocm.llvm._util.types.Pointer`:

      Takes the pointer address ``pyobj._ptr`` and writes it to ``self._ptr``.
      No ownership is transferred.

    Type checks are performed in the above order.

    C Attributes:
        _ptr (C type ``void *``, protected):
            Stores a pointer to the data of the original Python object.
        _is_ptr_owner (C type ``bint``, protected):
            If this wrapper is the owner of the underlying data.
        _py_buffer (C type ``Py_buffer`, protected):
            Stores a pointer to the data of the original Python object.
        _py_buffer_acquired (C type ``bint``, protected):
            Stores a pointer to the data of the original Python object.
    """
    # C members declared in pxd file

    def __cinit__(self):
        self._ptr = NULL
        self._is_ptr_owner = False
        self._py_buffer_acquired = False

    cdef corcee.LLVMMemoryManagerNotifyTerminatingCallback getElementPtr(self):
        return <corcee.LLVMMemoryManagerNotifyTerminatingCallback>self._ptr

    @staticmethod
    cdef LLVMMemoryManagerNotifyTerminatingCallback fromPtr(void* ptr, bint owner=False):
        """Factory function to create ``LLVMMemoryManagerNotifyTerminatingCallback`` objects from
        given ``corcee.LLVMMemoryManagerNotifyTerminatingCallback`` pointer.
        """
        # Fast call to __new__() that bypasses the __init__() constructor.
        cdef LLVMMemoryManagerNotifyTerminatingCallback wrapper = LLVMMemoryManagerNotifyTerminatingCallback.__new__(LLVMMemoryManagerNotifyTerminatingCallback)
        wrapper._ptr = ptr
        wrapper._is_ptr_owner = owner
        return wrapper

    @staticmethod
    def fromObj(pyobj):
        """Creates a LLVMMemoryManagerNotifyTerminatingCallback from a Python object.

        Derives a LLVMMemoryManagerNotifyTerminatingCallback from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMMemoryManagerNotifyTerminatingCallback`` reference, this method
        returns it directly. No new ``LLVMMemoryManagerNotifyTerminatingCallback`` is created in this case.
        """
        return LLVMMemoryManagerNotifyTerminatingCallback.fromPyobj(pyobj)

    @staticmethod
    cdef LLVMMemoryManagerNotifyTerminatingCallback fromPyobj(object pyobj):
        """Creates a LLVMMemoryManagerNotifyTerminatingCallback from a Python object.

        Derives a LLVMMemoryManagerNotifyTerminatingCallback from the given Python object ``pyobj``.
        In case ``pyobj`` is itself an ``LLVMMemoryManagerNotifyTerminatingCallback`` reference, this method
        returns it directly. No new ``LLVMMemoryManagerNotifyTerminatingCallback`` is created in this case.

        Args:
            pyobj (object): Must be either `None`; a `rocm.llvm._util.types.Pointer`; a simple, contiguous buffer according to the buffer protocol;
                            or of type `LLVMMemoryManagerNotifyTerminatingCallback`; `int`; or `ctypes.c_void_p`.

        Note:
            This routine does not perform a copy but returns the original ``pyobj``
            if ``pyobj`` is an instance of LLVMMemoryManagerNotifyTerminatingCallback!
        """
        cdef LLVMMemoryManagerNotifyTerminatingCallback wrapper

        if isinstance(pyobj,LLVMMemoryManagerNotifyTerminatingCallback):
            return pyobj
        else:
            wrapper = LLVMMemoryManagerNotifyTerminatingCallback.__new__(LLVMMemoryManagerNotifyTerminatingCallback)
            wrapper.init_from_pyobj(pyobj)
            return wrapper

    def __dealloc__(self):
        # Release the buffer handle
        if self._py_buffer_acquired is True:
            cpython.buffer.PyBuffer_Release(&self._py_buffer)

    def __int__(self):
        """Returns the data's address as long integer.
        """
        return cpython.long.PyLong_FromVoidPtr(self._ptr)

    def __repr__(self):
        return f"<LLVMMemoryManagerNotifyTerminatingCallback object, ptr: {int(self)}>"

    def as_c_void_p(self):
        """Returns the data's address as `ctypes.c_void_p`
        Note:
            Implemented as function to not collide with
            autogenerated property names.
        """
        return ctypes.c_void_p(int(self))


@cython.embedsignature(True)
def LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager(object ES):
    r"""(No short description, might be part of a group.)

    Create a RTDyldObjectLinkingLayer instance using the standard
    SectionMemoryManager for memory management.

    Args:
        ES (`~.LLVMOrcOpaqueExecutionSession`/`~.object`):
            (undocumented)
    """
    _LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager__retval = LLVMOrcOpaqueObjectLayer.fromPtr(corcee.LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager(
        LLVMOrcOpaqueExecutionSession.fromPyobj(ES).getElementPtr()))
    return None if _LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager__retval._ptr == NULL else _LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager__retval


@cython.embedsignature(True)
def LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks(object ES, object CreateContextCtx, object CreateContext, object NotifyTerminating, object AllocateCodeSection, object AllocateDataSection, object FinalizeMemory, object Destroy):
    r"""(No short description, might be part of a group.)

    Create a RTDyldObjectLinkingLayer instance using MCJIT-memory-manager-like
    callbacks.

    This is intended to simplify transitions for existing MCJIT clients. The
    callbacks used are similar (but not identical) to the callbacks for
    LLVMCreateSimpleMCJITMemoryManager: Unlike MCJIT, RTDyldObjectLinkingLayer
    will create a new memory manager for each object linked by calling the given
    CreateContext callback. This allows for code removal by destroying each
    allocator individually. Every allocator will be destroyed (if it has not been
    already) at RTDyldObjectLinkingLayer destruction time, and the
    NotifyTerminating callback will be called to indicate that no further
    allocation contexts will be created.

    To implement MCJIT-like behavior clients can implement CreateContext,
    NotifyTerminating, and Destroy as:

      void *CreateContext(void *CtxCtx) { return CtxCtx; }
      void NotifyTerminating(void *CtxCtx) { MyOriginalDestroy(CtxCtx); }
      void Destroy(void *Ctx) { }

    This scheme simply reuses the CreateContextCtx pointer as the one-and-only
    allocation context.

    Args:
        ES (`~.LLVMOrcOpaqueExecutionSession`/`~.object`):
            (undocumented)

        CreateContextCtx (`~.rocm.llvm._util.types.Pointer`/`~.object`):
            (undocumented)

        CreateContext (`~.LLVMMemoryManagerCreateContextCallback`/`~.object`):
            (undocumented)

        NotifyTerminating (`~.LLVMMemoryManagerNotifyTerminatingCallback`/`~.object`):
            (undocumented)

        AllocateCodeSection (`~.LLVMMemoryManagerAllocateCodeSectionCallback`/`~.object`):
            (undocumented)

        AllocateDataSection (`~.LLVMMemoryManagerAllocateDataSectionCallback`/`~.object`):
            (undocumented)

        FinalizeMemory (`~.LLVMMemoryManagerFinalizeMemoryCallback`/`~.object`):
            (undocumented)

        Destroy (`~.LLVMMemoryManagerDestroyCallback`/`~.object`):
            (undocumented)
    """
    _LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks__retval = LLVMOrcOpaqueObjectLayer.fromPtr(corcee.LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks(
        LLVMOrcOpaqueExecutionSession.fromPyobj(ES).getElementPtr(),
        <void *>rocm.llvm._util.types.Pointer.fromPyobj(CreateContextCtx)._ptr,
        LLVMMemoryManagerCreateContextCallback.fromPyobj(CreateContext).getElementPtr(),
        LLVMMemoryManagerNotifyTerminatingCallback.fromPyobj(NotifyTerminating).getElementPtr(),
        LLVMMemoryManagerAllocateCodeSectionCallback.fromPyobj(AllocateCodeSection).getElementPtr(),
        LLVMMemoryManagerAllocateDataSectionCallback.fromPyobj(AllocateDataSection).getElementPtr(),
        LLVMMemoryManagerFinalizeMemoryCallback.fromPyobj(FinalizeMemory).getElementPtr(),
        LLVMMemoryManagerDestroyCallback.fromPyobj(Destroy).getElementPtr()))
    return None if _LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks__retval._ptr == NULL else _LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks__retval


@cython.embedsignature(True)
def LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener(object RTDyldObjLinkingLayer, object Listener):
    r"""(No short description, might be part of a group.)

    Add the given listener to the given RTDyldObjectLinkingLayer.

    Note: Layer must be an RTDyldObjectLinkingLayer instance or
    behavior is undefined.

    Args:
        RTDyldObjLinkingLayer (`~.LLVMOrcOpaqueObjectLayer`/`~.object`):
            (undocumented)

        Listener (`~.LLVMOpaqueJITEventListener`/`~.object`):
            (undocumented)
    """
    corcee.LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener(
        LLVMOrcOpaqueObjectLayer.fromPyobj(RTDyldObjLinkingLayer).getElementPtr(),
        LLVMOpaqueJITEventListener.fromPyobj(Listener).getElementPtr())

__all__ = [
    "LLVMMemoryManagerCreateContextCallback",
    "LLVMMemoryManagerNotifyTerminatingCallback",
    "LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager",
    "LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks",
    "LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener",
]