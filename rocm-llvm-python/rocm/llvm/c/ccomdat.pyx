# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

cimport hip._util.posixloader as loader
cdef void* _lib_handle = NULL

cdef void __init() nogil:
    global _lib_handle
    if _lib_handle == NULL:
        with gil:
            _lib_handle = loader.open_library("librocmllvm.so")

cdef void __init_symbol(void** result, const char* name) nogil:
    global _lib_handle
    if _lib_handle == NULL:
        __init()
    if result[0] == NULL:
        with gil:
            result[0] = loader.load_symbol(_lib_handle, name) 


cdef void* _LLVMGetOrInsertComdat__funptr = NULL
# 
# Return the Comdat in the module with the specified name. It is created
# if it didn't already exist.
# 
# @see llvm::Module::getOrInsertComdat()
cdef LLVMComdatRef LLVMGetOrInsertComdat(LLVMModuleRef M,const char * Name) nogil:
    global _LLVMGetOrInsertComdat__funptr
    __init_symbol(&_LLVMGetOrInsertComdat__funptr,"LLVMGetOrInsertComdat")
    return (<LLVMComdatRef (*)(LLVMModuleRef,const char *) nogil> _LLVMGetOrInsertComdat__funptr)(M,Name)


cdef void* _LLVMGetComdat__funptr = NULL
# 
# Get the Comdat assigned to the given global object.
# 
# @see llvm::GlobalObject::getComdat()
cdef LLVMComdatRef LLVMGetComdat(LLVMValueRef V) nogil:
    global _LLVMGetComdat__funptr
    __init_symbol(&_LLVMGetComdat__funptr,"LLVMGetComdat")
    return (<LLVMComdatRef (*)(LLVMValueRef) nogil> _LLVMGetComdat__funptr)(V)


cdef void* _LLVMSetComdat__funptr = NULL
# 
# Assign the Comdat to the given global object.
# 
# @see llvm::GlobalObject::setComdat()
cdef void LLVMSetComdat(LLVMValueRef V,LLVMComdatRef C) nogil:
    global _LLVMSetComdat__funptr
    __init_symbol(&_LLVMSetComdat__funptr,"LLVMSetComdat")
    return (<void (*)(LLVMValueRef,LLVMComdatRef) nogil> _LLVMSetComdat__funptr)(V,C)


cdef void* _LLVMGetComdatSelectionKind__funptr = NULL
cdef LLVMComdatSelectionKind LLVMGetComdatSelectionKind(LLVMComdatRef C) nogil:
    global _LLVMGetComdatSelectionKind__funptr
    __init_symbol(&_LLVMGetComdatSelectionKind__funptr,"LLVMGetComdatSelectionKind")
    return (<LLVMComdatSelectionKind (*)(LLVMComdatRef) nogil> _LLVMGetComdatSelectionKind__funptr)(C)


cdef void* _LLVMSetComdatSelectionKind__funptr = NULL
cdef void LLVMSetComdatSelectionKind(LLVMComdatRef C,LLVMComdatSelectionKind Kind) nogil:
    global _LLVMSetComdatSelectionKind__funptr
    __init_symbol(&_LLVMSetComdatSelectionKind__funptr,"LLVMSetComdatSelectionKind")
    return (<void (*)(LLVMComdatRef,LLVMComdatSelectionKind) nogil> _LLVMSetComdatSelectionKind__funptr)(C,Kind)
