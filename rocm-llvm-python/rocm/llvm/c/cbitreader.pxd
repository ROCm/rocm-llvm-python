# MIT License
# 
# Copyright (c) 2023 Advanced Micro Devices, Inc.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This file has been autogenerated, do not modify.

from libc.stdint cimport *
ctypedef bint _Bool # bool is not a reserved keyword in C, _Bool is
from rocm.llvm.c.ctypes cimport *
# 
# @defgroup LLVMCBitReader Bit Reader
# @ingroup LLVMC
# 
# @{
cdef int LLVMParseBitcode(LLVMMemoryBufferRef MemBuf,LLVMModuleRef* OutModule,char ** OutMessage) nogil



cdef int LLVMParseBitcode2(LLVMMemoryBufferRef MemBuf,LLVMModuleRef* OutModule) nogil



cdef int LLVMParseBitcodeInContext(LLVMContextRef ContextRef,LLVMMemoryBufferRef MemBuf,LLVMModuleRef* OutModule,char ** OutMessage) nogil



cdef int LLVMParseBitcodeInContext2(LLVMContextRef ContextRef,LLVMMemoryBufferRef MemBuf,LLVMModuleRef* OutModule) nogil


# Reads a module from the specified path, returning via the OutMP parameter
# a module provider which performs lazy deserialization. Returns 0 on success.
# Optionally returns a human-readable error message via OutMessage.
# This is deprecated. Use LLVMGetBitcodeModuleInContext2.
cdef int LLVMGetBitcodeModuleInContext(LLVMContextRef ContextRef,LLVMMemoryBufferRef MemBuf,LLVMModuleRef* OutM,char ** OutMessage) nogil


#  Reads a module from the given memory buffer, returning via the OutMP
# parameter a module provider which performs lazy deserialization.
# 
# Returns 0 on success.
# 
# Takes ownership of \p MemBuf if (and only if) the module was read
# successfully.
cdef int LLVMGetBitcodeModuleInContext2(LLVMContextRef ContextRef,LLVMMemoryBufferRef MemBuf,LLVMModuleRef* OutM) nogil



cdef int LLVMGetBitcodeModule(LLVMMemoryBufferRef MemBuf,LLVMModuleRef* OutM,char ** OutMessage) nogil



cdef int LLVMGetBitcodeModule2(LLVMMemoryBufferRef MemBuf,LLVMModuleRef* OutM) nogil
